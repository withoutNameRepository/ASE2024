```python
def all_right_truncatable_prime(numbers):
    x = numbers[91]
    prime_list = []
    for i in range(2, x+1):
        if is_prime(i) and is_right_truncatable_prime(i):
            prime_list.append(i)
    return sorted(prime_list)
```
This function takes a tuple of positive integers as an argument and returns the sorted list of all right-truncatable prime numbers less than the integer at index 91. The function first checks if each number is a prime number using the `is_prime` function, then it checks if the number is a right-truncatable prime number using the `is_right_truncatable_prime` function. Finally, it returns the sorted list of all right-truncatable prime numbers less than x.

Here is the implementation of the `is_prime` and `is_right_truncatable_prime` functions:
```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_right_truncatable_prime(n):
    while n > 0:
        if not is_prime(n):
            return False
        n //= 10
    return True
```