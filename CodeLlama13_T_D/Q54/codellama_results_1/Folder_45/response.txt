```
def all_right_truncatable_prime(numbers):
    x = numbers[61]
    prime_numbers = []
    for i in range(2, x + 1):
        if is_prime(i):
            prime_numbers.append(i)
    right_truncatable_primes = []
    for p in prime_numbers:
        if is_right_truncatable_prime(p):
            right_truncatable_primes.append(p)
    return sorted(right_truncatable_primes)
```
This code defines a function `all_right_truncatable_prime` that takes an argument `numbers`, which is expected to be a tuple of positive integers. The function first extracts the integer at index 61 from the tuple, and then creates a list of all prime numbers less than or equal to this value using the `is_prime` function. Next, it creates another list of right-truncatable primes by iterating over the list of prime numbers and checking each one for right-truncatability using the `is_right_truncatable_prime` function. Finally, it returns a sorted list of these right-truncatable primes.

The `is_prime` and `is_right_truncatable_prime` functions are not defined in this code snippet, but they should be implemented separately. The `is_prime` function is typically implemented using a simple trial division algorithm that checks whether the given number has any divisors other than 1 and itself. The `is_right_truncatable_prime` function is more complex and involves checking whether the number remains prime when the last rightmost digit is successively removed.