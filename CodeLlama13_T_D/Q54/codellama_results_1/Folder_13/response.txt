```python
def all_right_truncatable_prime(x):
    prime_numbers = []
    for i in range(2, x+1):
        if is_prime(i) and is_right_truncatable_prime(i):
            prime_numbers.append(i)
    return sorted(prime_numbers)
```
The `is_prime` function checks whether the given number is a prime number or not:
```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
```
The `is_right_truncatable_prime` function checks whether the given number is a right-truncatable prime number or not:
```python
def is_right_truncatable_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0 and is_prime(n - i):
            return True
    return False
```