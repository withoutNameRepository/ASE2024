```
def all_right_truncatable_prime(numbers):
    # Initialize an empty list to store the right-truncatable prime numbers
    prime_list = []

    # Iterate over the tuple of positive integers
    for num in numbers:
        # Check if the number is a right-truncatable prime
        if is_right_truncatable_prime(num):
            # If it is, add it to the list
            prime_list.append(num)

    # Return the sorted list of right-truncatable prime numbers
    return sorted(prime_list, reverse=True)

def is_right_truncatable_prime(num):
    # Check if the number is prime
    if not is_prime(num):
        return False

    # Iterate over the digits of the number
    for i in range(len(str(num)) - 1, 0, -1):
        # Check if the number remains prime when the last rightmost digit is removed
        if not is_prime(int(str(num)[:i])):
            return False

    # If the number passes all the tests, it is a right-truncatable prime
    return True

def is_prime(num):
    # Check if the number is divisible by any other number between 2 and the square root of the number
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False

    # If the number is not divisible, it is prime
    return True
```