```python
def all_right_truncatable_prime(x):
    prime_numbers = []
    for i in range(10, x+1):
        if is_prime(i) and is_right_truncatable_prime(i):
            prime_numbers.append(i)
    return sorted(prime_numbers)
```
The `is_prime` function checks whether a number is prime or not:
```python
def is_prime(n):
    if n == 1 or n % 2 == 0 and n != 2:
        return False
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True
```
The `is_right_truncatable_prime` function checks whether a number is a right-truncatable prime or not:
```python
def is_right_truncatable_prime(n):
    while n > 1:
        if not is_prime(n):
            return False
        n //= 10
    return True
```