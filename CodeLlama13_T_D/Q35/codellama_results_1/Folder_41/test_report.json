{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests35_41_1.py::test_merged_strings", "location": ["tests35_41_1.py", 18, "test_merged_strings"], "keywords": {"test_merged_strings": 1, "tests35_41_1.py": 1, "Folder_41": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011328101390972733, "start": 1700327325.918799, "stop": 1700327325.9189124, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "a79e65c7faa64681bd29abbaa517d563", "node": "<WorkerController gw1>"}
{"nodeid": "tests35_41_1.py::test_repeat_char", "location": ["tests35_41_1.py", 5, "test_repeat_char"], "keywords": {"test_repeat_char": 1, "tests35_41_1.py": 1, "Folder_41": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001492589944973588, "start": 1700327325.9188259, "stop": 1700327325.918976, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "a79e65c7faa64681bd29abbaa517d563", "node": "<WorkerController gw0>"}
{"nodeid": "tests35_41_1.py::test_repeat_char", "location": ["tests35_41_1.py", 5, "test_repeat_char"], "keywords": {"test_repeat_char": 1, "tests35_41_1.py": 1, "Folder_41": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_13B/Q35/codellama_results_1/Folder_41/generated_answer.py", "lineno": 9, "message": "TypeError: can only concatenate list (not \"str\") to list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_repeat_char():", "        s = 'a' * (8 + 2)", "        if 8 - 3 - 1 == 1:", "            assert remove_repeat_chars(s) == s", "        else:", ">           assert not remove_repeat_chars(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q35/codellama_results_1/Folder_41/tests35_41_1.py", "lineno": 11, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def remove_repeat_chars(s):", "        seen = set()", "        res = []", "        for c in s[3:8]:", "            if c not in seen:", "                res.append(c)", "                seen.add(c)", ">       return \"\".join(res + s[8:])", "E       TypeError: can only concatenate list (not \"str\") to list"], "reprfuncargs": {"args": [["s", "'aaaaaaaaaa'"]]}, "reprlocals": null, "reprfileloc": {"path": "Q35/codellama_results_1/Folder_41/generated_answer.py", "lineno": 9, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_repeat_char():", "        s = 'a' * (8 + 2)", "        if 8 - 3 - 1 == 1:", "            assert remove_repeat_chars(s) == s", "        else:", ">           assert not remove_repeat_chars(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q35/codellama_results_1/Folder_41/tests35_41_1.py", "lineno": 11, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def remove_repeat_chars(s):", "        seen = set()", "        res = []", "        for c in s[3:8]:", "            if c not in seen:", "                res.append(c)", "                seen.add(c)", ">       return \"\".join(res + s[8:])", "E       TypeError: can only concatenate list (not \"str\") to list"], "reprfuncargs": {"args": [["s", "'aaaaaaaaaa'"]]}, "reprlocals": null, "reprfileloc": {"path": "Q35/codellama_results_1/Folder_41/generated_answer.py", "lineno": 9, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_13B/Q35/codellama_results_1/Folder_41/generated_answer.py", "lineno": 9, "message": "TypeError: can only concatenate list (not \"str\") to list"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0001279969874303788, "start": 1700327325.9191566, "stop": 1700327325.9192848, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "a79e65c7faa64681bd29abbaa517d563", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
