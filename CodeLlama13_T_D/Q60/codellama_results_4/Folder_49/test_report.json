{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_49_4.py::test_if_result_is_less_than_equal_to_14", "location": ["tests60_49_4.py", 43, "test_if_result_is_less_than_equal_to_14"], "keywords": {"test_if_result_is_less_than_equal_to_14": 1, "tests60_49_4.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.972500265575945e-05, "start": 1700337528.5845768, "stop": 1700337528.584677, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "30f22159dafa4f72bf70d01175dc10c3", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_49_4.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_49_4.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_49_4.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00019805299234576523, "start": 1700337528.5848022, "stop": 1700337528.585001, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "30f22159dafa4f72bf70d01175dc10c3", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_49_4.py::test_if_result_is_less_than_equal_to_14", "location": ["tests60_49_4.py", 43, "test_if_result_is_less_than_equal_to_14"], "keywords": {"test_if_result_is_less_than_equal_to_14": 1, "tests60_49_4.py": 1, "Folder_49": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_13B/Q60/codellama_results_4/Folder_49/generated_answer.py", "lineno": 4, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_14():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(14 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/codellama_results_4/Folder_49/tests60_49_4.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        primes = []", ">       for i in range(2, x+1):", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(463, 649, 589, 38, 89, 363, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/codellama_results_4/Folder_49/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_14():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(14 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/codellama_results_4/Folder_49/tests60_49_4.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        primes = []", ">       for i in range(2, x+1):", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(463, 649, 589, 38, 89, 363, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/codellama_results_4/Folder_49/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_13B/Q60/codellama_results_4/Folder_49/generated_answer.py", "lineno": 4, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00014718601596541703, "start": 1700337528.5848706, "stop": 1700337528.5850182, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "30f22159dafa4f72bf70d01175dc10c3", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
