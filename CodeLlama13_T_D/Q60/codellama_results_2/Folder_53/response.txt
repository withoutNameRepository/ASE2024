```
def all_left_right_truncatable_prime(nums):
    result = []
    for num in nums:
        if is_left_right_truncatable_prime(num):
            result.append(num)
    return sorted(result, reverse=True)

def is_left_right_truncatable_prime(num):
    if str(num).count("0") > 0:
        return False
    for i in range(len(str(num)) - 1):
        if not is_prime(int(str(num)[:-i])) or not is_prime(int(str(num)[i + 1:])):
            return False
    return True

def is_prime(num):
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True
```
Note that this code only generates one solution without any explanation. The `all_left_right_truncatable_prime` function takes a tuple of positive integers as input and returns the list of all left-and-right-truncatable prime numbers less than or equal to the integer at index 86, sorted in descending order. The `is_left_right_truncatable_prime` function checks if a given number is a left-and-right-truncatable prime number. Finally, the `is_prime` function checks if a given number is a prime number.