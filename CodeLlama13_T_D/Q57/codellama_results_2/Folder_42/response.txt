```python
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Initialize a list to store the results
    results = []
    
    # Iterate over each row of the matrix
    for i in range(matrix.shape[0]):
        # Iterate over each column of the matrix
        for j in range(matrix.shape[1]):
            # Initialize a temporary list to store the current submatrix
            temp = []
            
            # Add the current element to the temporary list
            temp.append(matrix[i, j])
            
            # Iterate over each element below and to the right of the current element
            for k in range(i+1, matrix.shape[0]):
                for l in range(j+1, matrix.shape[1]):
                    # Add the current element to the temporary list
                    temp.append(matrix[k, l])
            
            # Check if the sum of all integers in the current submatrix is equal to 862
            if sum(temp) == 862:
                # If it is, add the submatrix to the results list
                results.append(np.array(temp).reshape((len(temp),1)))
    
    return results
```
This code defines a function `submatrix_with_particular_sum` that takes a two-dimensional numpy matrix of integers as input. The function returns a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 862. If no such submatrix is found, the function returns an empty list.

The code iterates over each row and column of the matrix using two nested loops. For each element in the matrix, a temporary list `temp` is initialized and the current element is added to it. The remaining elements below and to the right of the current element are then iterated over and added to the temporary list as well. Finally, the sum of all integers in the temporary list is calculated using the built-in `sum` function. If the sum equals 862, the submatrix is added to the results list.

The code uses numpy's `reshape` method to convert the temporary list into a two-dimensional numpy array with the same dimensions as the original matrix before adding it to the results list. This allows the function to return a list of submatrices that can be used in other parts of the program.