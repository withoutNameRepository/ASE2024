```
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Initialize an empty list to store the found submatrices
    found_submatrices = []
    
    # Iterate over each submatrix of the given matrix
    for i in range(matrix.shape[0] - 1):
        for j in range(matrix.shape[1] - 1):
            # Calculate the sum of all integers in the current submatrix
            current_sum = np.sum(matrix[i:i+2, j:j+2])
            
            # If the current sum is equal to -452, add the submatrix to the list of found submatrices
            if current_sum == -452:
                found_submatrices.append(matrix[i:i+2, j:j+2])
    
    # Return the list of found submatrices
    return found_submatrices
```
Please note that this solution assumes that the given matrix is a two-dimensional numpy matrix of integers. If the input matrix is not a valid numpy matrix, the code will raise an error. Additionally, the code does not check for any edge cases or errors, and it is up to the user to ensure that the input data is correct and sufficient for the function to work correctly.