```
def submatrices_with_particular_sum(matrix):
    # Initialize a list to store the results
    result = []
    
    # Iterate over each row of the matrix
    for i in range(len(matrix)):
        # Iterate over each column of the matrix
        for j in range(len(matrix[0])):
            # Initialize a temporary list to store the current submatrix
            temp = []
            
            # Iterate over each row and column of the submatrix
            for k in range(i, len(matrix)):
                for l in range(j, len(matrix[0])):
                    # Add the current element to the temporary list
                    temp.append(matrix[k][l])
            
            # Check if the sum of all elements in the temporary list is equal to -336
            if sum(temp) == -336:
                # If so, add the submatrix to the result list
                result.append(temp)
    
    # Return the result list
    return result
```
Please note that this solution uses nested loops to iterate over all possible submatrices of a given matrix and checks if the sum of all integers in each submatrix is equal to -336. The time complexity of this solution is O(n^4), where n is the number of rows and columns in the matrix.