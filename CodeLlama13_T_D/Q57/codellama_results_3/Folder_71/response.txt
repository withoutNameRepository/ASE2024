```python
import numpy as np

def submatrix_with_particular_sum(matrix):
    """
    Finds all submatrices of a given matrix such that the sum of all integers in each submatrix equals 69.
    
    Args:
        matrix (numpy.ndarray): A two-dimensional numpy array of integers.
        
    Returns:
        list[list[int]]: List of all submatrices that satisfy the given condition.
    """
    # Initialize an empty list to store the results
    result = []
    
    # Iterate over each row in the matrix
    for i in range(matrix.shape[0]):
        # Iterate over each column in the matrix
        for j in range(matrix.shape[1]):
            # Initialize a submatrix with the current element
            submatrix = np.array([[matrix[i,j]]])
            
            # Check if the sum of all integers in the submatrix is 69
            if np.sum(submatrix) == 69:
                # If so, add the submatrix to the results list
                result.append(submatrix)
                
            # If the current element is not the last element in its row,
            # check if there is a submatrix that starts at the next row and column
            if i != matrix.shape[0] - 1 and j != matrix.shape[1] - 1:
                # Initialize a new submatrix with the current element as the starting point
                submatrix = np.array([[matrix[i,j], matrix[i+1,j]], [matrix[i,j+1], matrix[i+1,j+1]]])
                
                # Check if the sum of all integers in the new submatrix is 69
                if np.sum(submatrix) == 69:
                    # If so, add the submatrix to the results list
                    result.append(submatrix)
    
    return result
```