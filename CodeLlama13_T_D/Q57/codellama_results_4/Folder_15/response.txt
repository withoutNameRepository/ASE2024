```python
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Initialize an empty list to store the found submatrices
    submatrices = []
    
    # Loop through each row of the matrix
    for i in range(matrix.shape[0]):
        # Loop through each column of the matrix
        for j in range(matrix.shape[1]):
            # Initialize a temporary matrix to store the current submatrix
            temp_mat = np.zeros((3, 3))
            
            # Fill the temporary matrix with the values from the original matrix
            temp_mat[:, :] = matrix[i:i+3, j:j+3]
            
            # Check if the sum of all integers in the current submatrix is -9
            if np.sum(temp_mat) == -9:
                # If it is, add the submatrix to the list of found submatrices
                submatrices.append(temp_mat)
    
    return submatrices
```
This code defines a function `submatrix_with_particular_sum` that takes one argument which is a two-dimensional numpy matrix of integers. The function returns the list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals -9. If no such submatrix is found, the function returns an empty list.

The function uses nested loops to iterate over each row and column of the input matrix. For each iteration, a temporary matrix is created with size 3x3. The values from the original matrix are then filled into this temporary matrix. Finally, the sum of all integers in the current submatrix is checked against -9, and if it matches, the submatrix is added to the list of found submatrices.

The resulting list of submatrices with a particular sum is returned by the function.