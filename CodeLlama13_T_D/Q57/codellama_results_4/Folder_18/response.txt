```python
import numpy as np
def submatrix_with_particular_sum(matrix):
    # Initialize an empty list to store the submatrices with the particular sum
    submatrices = []
    
    # Iterate over each row of the matrix
    for i in range(matrix.shape[0]):
        # Iterate over each column of the matrix
        for j in range(matrix.shape[1]):
            # Initialize a temporary list to store the submatrix
            temp_submatrix = []
            
            # Iterate over each row and column of the submatrix
            for k in range(i, matrix.shape[0]):
                temp_row = []
                for l in range(j, matrix.shape[1]):
                    # Add the element to the temporary list
                    temp_row.append(matrix[k][l])
                # Add the temporary row to the temporary submatrix
                temp_submatrix.append(temp_row)
            
            # Check if the sum of all integers in the submatrix is 616
            if np.sum(np.array(temp_submatrix)) == 616:
                # Add the submatrix to the list of submatrices with the particular sum
                submatrices.append(temp_submatrix)
    
    # Return the list of submatrices with the particular sum
    return submatrices
```
This code defines a function called `submatrix_with_particular_sum` that takes one argument, which is a two-dimensional numpy matrix of integers. The function returns a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 616. If no such submatrix is found, the function returns an empty list.

The code uses nested for loops to iterate over each row and column of the input matrix, and another nested for loop to iterate over each row and column of the submatrix. For each submatrix, it calculates its sum using `numpy.sum` and checks if it is equal to 616. If it is, the submatrix is added to a list of submatrices with the particular sum.

The code uses `numpy.array` to convert the temporary submatrix into an array for efficient sum calculation, and `numpy.shape` to get the shape of the input matrix and iterate over its rows and columns.