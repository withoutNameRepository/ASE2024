{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_38_2.py::test_if_result_is_sorted", "location": ["tests39_38_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_38_2.py": 1, "Folder_38": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.81499906629324e-05, "start": 1700328719.8199062, "stop": 1700328719.820005, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "8188884fae514e1ea35f6ada27460e90", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_38_2.py::test_strings_of_size_equal_to_45", "location": ["tests39_38_2.py", 5, "test_strings_of_size_equal_to_45"], "keywords": {"test_strings_of_size_equal_to_45": 1, "tests39_38_2.py": 1, "Folder_38": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011532398639246821, "start": 1700328719.8200483, "stop": 1700328719.8201644, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "8188884fae514e1ea35f6ada27460e90", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_38_2.py::test_if_result_is_sorted", "location": ["tests39_38_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_38_2.py": 1, "Folder_38": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_13B/Q39/codellama_results_2/Folder_38/tests39_38_2.py", "lineno": 26, "message": "AssertionError: assert '#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~' == ['#', '$', '&', '*', ',', '-', ...]\n +  where ['#', '$', '&', '*', ',', '-', ...] = sorted('#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=45 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert '#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~' == ['#', '$', '&', '*', ',', '-', ...]", "E            +  where ['#', '$', '&', '*', ',', '-', ...] = sorted('#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_results_2/Folder_38/tests39_38_2.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=45 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert '#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~' == ['#', '$', '&', '*', ',', '-', ...]", "E            +  where ['#', '$', '&', '*', ',', '-', ...] = sorted('#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_results_2/Folder_38/tests39_38_2.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_13B/Q39/codellama_results_2/Folder_38/tests39_38_2.py", "lineno": 26, "message": "AssertionError: assert '#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~' == ['#', '$', '&', '*', ',', '-', ...]\n +  where ['#', '$', '&', '*', ',', '-', ...] = sorted('#$&*,-.0126789:;<CIMOPTVXY[]^bdegjlnpqsuxy{}~')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002080639824271202, "start": 1700328719.8201683, "stop": 1700328719.8203766, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "8188884fae514e1ea35f6ada27460e90", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
