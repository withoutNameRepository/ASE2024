```python
def all_left_truncatable_prime(tuple_of_positive_integers):
    x = tuple_of_positive_integers[0]
    left_truncatable_primes = []
    for i in range(x):
        if is_prime(i) and not any(str(i).startswith('0') for j in range(len(str(i)))):
            left_truncatable_primes.append(i)
    return sorted(left_truncatable_primes, reverse=True)
```
This solution defines a function called `all_left_truncatable_prime` that takes a tuple of positive integers as an argument. The function first extracts the integer at index 0 from the input tuple and assigns it to a variable `x`. It then initializes an empty list `left_truncatable_primes` that will store all left-truncatable prime numbers less than `x`.

The function then iterates through each integer `i` in the range from 1 to `x`, and checks if it is a prime number using the built-in `is_prime` function. If `i` is a prime number, the function checks if it contains any leading zeros by converting `i` to a string and checking if any of the substrings starting with '0' are present in the string. If neither of these conditions are met, then `i` is a left-truncatable prime number and is added to the list `left_truncatable_primes`.

Finally, the function returns the sorted list `left_truncatable_primes` in descending order.