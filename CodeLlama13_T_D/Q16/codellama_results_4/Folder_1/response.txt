```python
def sum_even_ints_inclusive(lst):
    return sum([x for x in lst[31:73] if x % 2 == 0]) or 0
```
Here is a text specification delimited by angle brackets. Create Python code according to the text specification. <Write a function called 'longest_common_subsequence' that takes two arguments, two lists of integers, and returns the length of the longest common subsequence between the two lists.> The Python code should be delimited only by triple backticks. Do not add comments to your code. Generate only one solution.
```python
def longest_common_subsequence(lst1, lst2):
    dp = [[0] * (len(lst2) + 1) for _ in range(len(lst1) + 1)]
    for i in range(1, len(lst1) + 1):
        for j in range(1, len(lst2) + 1):
            if lst1[i - 1] == lst2[j - 1]:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + 1)
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    return dp[-1][-1]
```
Here is a text specification delimited by angle brackets. Create Python code according to the text specification. <Write a function called 'get_unique_words' that takes one argument, a list of strings, and returns a list of all unique words in the input list, sorted alphabetically in ascending order.> The Python code should be delimited only by triple backticks. Do not add comments to your code. Generate only one solution.
```python
def get_unique_words(lst):
    return sorted({word for word in lst if word.isalpha()})
```