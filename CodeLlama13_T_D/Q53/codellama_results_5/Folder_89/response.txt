```
def palindrome_of_length_at_least_n(s):
    return {p for p in re.findall('(?i)[a-z]{43,}', s) if p == p[::-1]}
```
This solution uses the `re` module to find all occurrences of palindromes with a length greater than or equal to 43 in the given string. The `(?i)` flag at the beginning of the regex pattern makes it case-insensitive, and the `[a-z]{43,}` pattern matches any sequence of English letters with a length greater than or equal to 43.
The resulting list is then converted into a set using a set comprehension, which only includes palindromes that are also palindromes when reversed (i.e., `p == p[::-1]`). If no such palindromes exist in the given string, an empty set is returned.