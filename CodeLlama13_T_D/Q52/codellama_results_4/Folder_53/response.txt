```
def palindrome_of_length_n(s, n):
    return {w for w in s.lower().split() if len(w) == n and w == w[::-1]}
```
Note: This code uses a set comprehension to find all the palindromes of length `n` in the given string `s`, where each palindrome is a substring of `s`. The `lower()` method is used to convert the string to lowercase, and the `split()` method is used to split the string into substrings at whitespace. The `if` clause checks if the length of the current substring is equal to `n`, and the second clause checks if the substring is a palindrome (i.e., it reads the same backwards as forwards). If both clauses are true, the substring is added to the set.