{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests40_35_1.py::test_strings_of_size_equal_to_7", "location": ["tests40_35_1.py", 5, "test_strings_of_size_equal_to_7"], "keywords": {"test_strings_of_size_equal_to_7": 1, "tests40_35_1.py": 1, "Folder_35": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001263979938812554, "start": 1700329195.0634658, "stop": 1700329195.0635927, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "6f4007f2e57c4681abc5d21d19d340f3", "node": "<WorkerController gw0>"}
{"nodeid": "tests40_35_1.py::test_if_result_is_sorted", "location": ["tests40_35_1.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests40_35_1.py": 1, "Folder_35": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00010282601579092443, "start": 1700329195.0633528, "stop": 1700329195.0634563, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "6f4007f2e57c4681abc5d21d19d340f3", "node": "<WorkerController gw1>"}
{"nodeid": "tests40_35_1.py::test_strings_of_size_equal_to_7", "location": ["tests40_35_1.py", 5, "test_strings_of_size_equal_to_7"], "keywords": {"test_strings_of_size_equal_to_7": 1, "tests40_35_1.py": 1, "Folder_35": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_13B/Q40/codellama_results_1/Folder_35/tests40_35_1.py", "lineno": 10, "message": "AssertionError: assert ['S', ':', 'Q...'7', 'Z', ...] == ['(', '7', ':...'S', 'Z', ...]\n  At index 0 diff: 'S' != '('\n  Full diff:\n  - ['(', '7', ':', 'Q', 'S', 'Z', 'c']\n  + ['S', ':', 'Q', 'c', '7', 'Z', '(']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_7():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=7))", "        if 'ascending' == 'ascending':", ">           assert return_n_smallest_chars(s) == sorted(s)", "E           AssertionError: assert ['S', ':', 'Q...'7', 'Z', ...] == ['(', '7', ':...'S', 'Z', ...]", "E             At index 0 diff: 'S' != '('", "E             Full diff:", "E             - ['(', '7', ':', 'Q', 'S', 'Z', 'c']", "E             + ['S', ':', 'Q', 'c', '7', 'Z', '(']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q40/codellama_results_1/Folder_35/tests40_35_1.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_7():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=7))", "        if 'ascending' == 'ascending':", ">           assert return_n_smallest_chars(s) == sorted(s)", "E           AssertionError: assert ['S', ':', 'Q...'7', 'Z', ...] == ['(', '7', ':...'S', 'Z', ...]", "E             At index 0 diff: 'S' != '('", "E             Full diff:", "E             - ['(', '7', ':', 'Q', 'S', 'Z', 'c']", "E             + ['S', ':', 'Q', 'c', '7', 'Z', '(']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q40/codellama_results_1/Folder_35/tests40_35_1.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_13B/Q40/codellama_results_1/Folder_35/tests40_35_1.py", "lineno": 10, "message": "AssertionError: assert ['S', ':', 'Q...'7', 'Z', ...] == ['(', '7', ':...'S', 'Z', ...]\n  At index 0 diff: 'S' != '('\n  Full diff:\n  - ['(', '7', ':', 'Q', 'S', 'Z', 'c']\n  + ['S', ':', 'Q', 'c', '7', 'Z', '(']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0003704020055010915, "start": 1700329195.0637805, "stop": 1700329195.0641513, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "6f4007f2e57c4681abc5d21d19d340f3", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
