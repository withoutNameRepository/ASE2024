```python
def find_primes_between_indices(my_list):
    prime_numbers = []
    for i in range(16, 25 + 1):
        if my_list[i] > 1:
            for j in range(2, int(my_list[i] ** 0.5) + 1):
                if my_list[i] % j == 0:
                    break
            else:
                prime_numbers.append(my_list[i])
    return sorted(prime_numbers, reverse=True)
```
This function takes a list of integers as input and returns the sorted list of all prime numbers from index 16 to index 25, both inclusive. If no prime number exists in the specified range, an empty list is returned. The code uses a nested for loop to iterate over the indices in the range and checks if each integer is a prime number using the Sieve of Eratosthenes algorithm.

The `sorted` function is used to sort the list of prime numbers in descending order. The `reverse` parameter is set to `True` to reverse the order of the list.