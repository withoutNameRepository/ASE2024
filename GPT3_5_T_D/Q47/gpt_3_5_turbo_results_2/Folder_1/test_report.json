{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests47_1_2.py::test_string_of_punctuations_and_space", "location": ["tests47_1_2.py", 47, "test_string_of_punctuations_and_space"], "keywords": {"test_string_of_punctuations_and_space": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00043700498645193875, "start": 1699955261.7447443, "stop": 1699955261.7451837, "$report_type": "TestReport", "item_index": 7, "worker_id": "gw7", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw7>"}
{"nodeid": "tests47_1_2.py::test_string_of_similar_nums", "location": ["tests47_1_2.py", 10, "test_string_of_similar_nums"], "keywords": {"test_string_of_similar_nums": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00048072999925352633, "start": 1699955261.7443786, "stop": 1699955261.7448616, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_1_2.py::test_string_of_spaces_and_letters", "location": ["tests47_1_2.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00048628199147060513, "start": 1699955261.7445593, "stop": 1699955261.745048, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw4>"}
{"nodeid": "tests47_1_2.py::test_string_of_spaces", "location": ["tests47_1_2.py", 22, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0006079559971112758, "start": 1699955261.744681, "stop": 1699955261.745292, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw3", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw3>"}
{"nodeid": "tests47_1_2.py::test_location_of_palindrome", "location": ["tests47_1_2.py", 39, "test_location_of_palindrome"], "keywords": {"test_location_of_palindrome": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0006371269992087036, "start": 1699955261.7450025, "stop": 1699955261.7456434, "$report_type": "TestReport", "item_index": 6, "worker_id": "gw6", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw6>"}
{"nodeid": "tests47_1_2.py::test_string_of_similar_chars", "location": ["tests47_1_2.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0006187530234456062, "start": 1699955261.745104, "stop": 1699955261.7457256, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_1_2.py::test_length_of_palindrome", "location": ["tests47_1_2.py", 32, "test_length_of_palindrome"], "keywords": {"test_length_of_palindrome": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0006611749995499849, "start": 1699955261.744564, "stop": 1699955261.745228, "$report_type": "TestReport", "item_index": 5, "worker_id": "gw5", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw5>"}
{"nodeid": "tests47_1_2.py::test_string_of_distinct_chars", "location": ["tests47_1_2.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0006079570157453418, "start": 1699955261.7446814, "stop": 1699955261.7452922, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_1_2.py::test_string_of_similar_chars", "location": ["tests47_1_2.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_1_2.py": 1, "Folder_1": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "re.error: bad character range :-1 at position 25"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(89, 72)", "        m = min(89 - 15 + 1, 72)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(40, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/gpt_3_5_turbo_results_2/Folder_1/tests47_1_2.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    matches = re.findall(regex, substring)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/gpt_3_5_turbo_results_2/Folder_1/generated_answer.py", "lineno": 10, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 240, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 755, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", ">                           raise source.error(msg, len(this) + 1 + len(that))", "E                           re.error: bad character range :-1 at position 25"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f8966e26980>"], ["state", "<sre_parse.State object at 0x7f8966e26ec0>"], ["verbose", "0"], ["nested", "3"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(89, 72)", "        m = min(89 - 15 + 1, 72)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(40, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/gpt_3_5_turbo_results_2/Folder_1/tests47_1_2.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    matches = re.findall(regex, substring)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/gpt_3_5_turbo_results_2/Folder_1/generated_answer.py", "lineno": 10, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 240, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 755, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", ">                           raise source.error(msg, len(this) + 1 + len(that))", "E                           re.error: bad character range :-1 at position 25"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f8966e26980>"], ["state", "<sre_parse.State object at 0x7f8966e26ec0>"], ["verbose", "0"], ["nested", "3"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "re.error: bad character range :-1 at position 25"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0010006270022131503, "start": 1699955261.7467716, "stop": 1699955261.7477753, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "99b25459d6e6422aa05b3436405c6c19", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
