{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests27_44_3.py::test_presence_of_inserted_element", "location": ["tests27_44_3.py", 4, "test_presence_of_inserted_element"], "keywords": {"test_presence_of_inserted_element": 1, "tests27_44_3.py": 1, "Folder_44": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00021822098642587662, "start": 1701648266.9714086, "stop": 1701648266.9716277, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "eae951da5cf24be2a81d31e8d73bcdb3", "node": "<WorkerController gw0>"}
{"nodeid": "tests27_44_3.py::test_presence_of_inserted_element_at_index_48", "location": ["tests27_44_3.py", 20, "test_presence_of_inserted_element_at_index_48"], "keywords": {"test_presence_of_inserted_element_at_index_48": 1, "tests27_44_3.py": 1, "Folder_44": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00038692797534167767, "start": 1701648266.9727967, "stop": 1701648266.973185, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "eae951da5cf24be2a81d31e8d73bcdb3", "node": "<WorkerController gw1>"}
{"nodeid": "tests27_44_3.py::test_presence_of_inserted_element", "location": ["tests27_44_3.py", 4, "test_presence_of_inserted_element"], "keywords": {"test_presence_of_inserted_element": 1, "tests27_44_3.py": 1, "Folder_44": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3/dist-packages/numpy/lib/function_base.py", "lineno": 4673, "message": "numpy.AxisError: axis 1 is out of bounds for array of dimension 1"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_presence_of_inserted_element():", "        initial_list = [set() for i in range((48 + 1) * 2)]", ">       returned_list = insert_after_index(initial_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q27/command_results_3/Folder_44/tests27_44_3.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.insert(x, x.shape[0] + 1, [86, 77], 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q27/command_results_3/Folder_44/generated_answer.py", "lineno": 6, "message": "in insert_after_index"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    ???"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "<__array_function__ internals>", "lineno": 5, "message": "in insert"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_insert_dispatcher)", "    def insert(arr, obj, values, axis=None):", "        \"\"\"", "        Insert values along the given axis before the given indices.", "    ", "        Parameters", "        ----------", "        arr : array_like", "            Input array.", "        obj : int, slice or sequence of ints", "            Object that defines the index or indices before which `values` is", "            inserted.", "    ", "            .. versionadded:: 1.8.0", "    ", "            Support for multiple insertions when `obj` is a single scalar or a", "            sequence with one element (similar to calling insert multiple", "            times).", "        values : array_like", "            Values to insert into `arr`. If the type of `values` is different", "            from that of `arr`, `values` is converted to the type of `arr`.", "            `values` should be shaped so that ``arr[...,obj,...] = values``", "            is legal.", "        axis : int, optional", "            Axis along which to insert `values`.  If `axis` is None then `arr`", "            is flattened first.", "    ", "        Returns", "        -------", "        out : ndarray", "            A copy of `arr` with `values` inserted.  Note that `insert`", "            does not occur in-place: a new array is returned. If", "            `axis` is None, `out` is a flattened array.", "    ", "        See Also", "        --------", "        append : Append elements at the end of an array.", "        concatenate : Join a sequence of arrays along an existing axis.", "        delete : Delete elements from an array.", "    ", "        Notes", "        -----", "        Note that for higher dimensional inserts `obj=0` behaves very different", "        from `obj=[0]` just like `arr[:,0,:] = values` is different from", "        `arr[:,[0],:] = values`.", "    ", "        Examples", "        --------", "        >>> a = np.array([[1, 1], [2, 2], [3, 3]])", "        >>> a", "        array([[1, 1],", "               [2, 2],", "               [3, 3]])", "        >>> np.insert(a, 1, 5)", "        array([1, 5, 1, ..., 2, 3, 3])", "        >>> np.insert(a, 1, 5, axis=1)", "        array([[1, 5, 1],", "               [2, 5, 2],", "               [3, 5, 3]])", "    ", "        Difference between sequence and scalars:", "    ", "        >>> np.insert(a, [1], [[1],[2],[3]], axis=1)", "        array([[1, 1, 1],", "               [2, 2, 2],", "               [3, 3, 3]])", "        >>> np.array_equal(np.insert(a, 1, [1, 2, 3], axis=1),", "        ...                np.insert(a, [1], [[1],[2],[3]], axis=1))", "        True", "    ", "        >>> b = a.flatten()", "        >>> b", "        array([1, 1, 2, 2, 3, 3])", "        >>> np.insert(b, [2, 2], [5, 6])", "        array([1, 1, 5, ..., 2, 3, 3])", "    ", "        >>> np.insert(b, slice(2, 4), [5, 6])", "        array([1, 1, 5, ..., 2, 3, 3])", "    ", "        >>> np.insert(b, [2, 2], [7.13, False]) # type casting", "        array([1, 1, 7, ..., 2, 3, 3])", "    ", "        >>> x = np.arange(8).reshape(2, 4)", "        >>> idx = (1, 3)", "        >>> np.insert(x, idx, 999, axis=1)", "        array([[  0, 999,   1,   2, 999,   3],", "               [  4, 999,   5,   6, 999,   7]])", "    ", "        \"\"\"", "        wrap = None", "        if type(arr) is not ndarray:", "            try:", "                wrap = arr.__array_wrap__", "            except AttributeError:", "                pass", "    ", "        arr = asarray(arr)", "        ndim = arr.ndim", "        arrorder = 'F' if arr.flags.fnc else 'C'", "        if axis is None:", "            if ndim != 1:", "                arr = arr.ravel()", "            # needed for np.matrix, which is still not 1d after being ravelled", "            ndim = arr.ndim", "            axis = ndim - 1", "        else:", ">           axis = normalize_axis_index(axis, ndim)", "E           numpy.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["arr", "array([set(), set(), set(), set(), set(), set(), set(), set(), set(),\n       set(), set(), set(), set(), set(), set(),... set(), set(), set(), set(), set(),\n       set(), set(), set(), set(), set(), set(), set(), set()],\n      dtype=object)"], ["obj", "99"], ["values", "[86, 77]"], ["axis", "1"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3/dist-packages/numpy/lib/function_base.py", "lineno": 4673, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_presence_of_inserted_element():", "        initial_list = [set() for i in range((48 + 1) * 2)]", ">       returned_list = insert_after_index(initial_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q27/command_results_3/Folder_44/tests27_44_3.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.insert(x, x.shape[0] + 1, [86, 77], 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q27/command_results_3/Folder_44/generated_answer.py", "lineno": 6, "message": "in insert_after_index"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    ???"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "<__array_function__ internals>", "lineno": 5, "message": "in insert"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_insert_dispatcher)", "    def insert(arr, obj, values, axis=None):", "        \"\"\"", "        Insert values along the given axis before the given indices.", "    ", "        Parameters", "        ----------", "        arr : array_like", "            Input array.", "        obj : int, slice or sequence of ints", "            Object that defines the index or indices before which `values` is", "            inserted.", "    ", "            .. versionadded:: 1.8.0", "    ", "            Support for multiple insertions when `obj` is a single scalar or a", "            sequence with one element (similar to calling insert multiple", "            times).", "        values : array_like", "            Values to insert into `arr`. If the type of `values` is different", "            from that of `arr`, `values` is converted to the type of `arr`.", "            `values` should be shaped so that ``arr[...,obj,...] = values``", "            is legal.", "        axis : int, optional", "            Axis along which to insert `values`.  If `axis` is None then `arr`", "            is flattened first.", "    ", "        Returns", "        -------", "        out : ndarray", "            A copy of `arr` with `values` inserted.  Note that `insert`", "            does not occur in-place: a new array is returned. If", "            `axis` is None, `out` is a flattened array.", "    ", "        See Also", "        --------", "        append : Append elements at the end of an array.", "        concatenate : Join a sequence of arrays along an existing axis.", "        delete : Delete elements from an array.", "    ", "        Notes", "        -----", "        Note that for higher dimensional inserts `obj=0` behaves very different", "        from `obj=[0]` just like `arr[:,0,:] = values` is different from", "        `arr[:,[0],:] = values`.", "    ", "        Examples", "        --------", "        >>> a = np.array([[1, 1], [2, 2], [3, 3]])", "        >>> a", "        array([[1, 1],", "               [2, 2],", "               [3, 3]])", "        >>> np.insert(a, 1, 5)", "        array([1, 5, 1, ..., 2, 3, 3])", "        >>> np.insert(a, 1, 5, axis=1)", "        array([[1, 5, 1],", "               [2, 5, 2],", "               [3, 5, 3]])", "    ", "        Difference between sequence and scalars:", "    ", "        >>> np.insert(a, [1], [[1],[2],[3]], axis=1)", "        array([[1, 1, 1],", "               [2, 2, 2],", "               [3, 3, 3]])", "        >>> np.array_equal(np.insert(a, 1, [1, 2, 3], axis=1),", "        ...                np.insert(a, [1], [[1],[2],[3]], axis=1))", "        True", "    ", "        >>> b = a.flatten()", "        >>> b", "        array([1, 1, 2, 2, 3, 3])", "        >>> np.insert(b, [2, 2], [5, 6])", "        array([1, 1, 5, ..., 2, 3, 3])", "    ", "        >>> np.insert(b, slice(2, 4), [5, 6])", "        array([1, 1, 5, ..., 2, 3, 3])", "    ", "        >>> np.insert(b, [2, 2], [7.13, False]) # type casting", "        array([1, 1, 7, ..., 2, 3, 3])", "    ", "        >>> x = np.arange(8).reshape(2, 4)", "        >>> idx = (1, 3)", "        >>> np.insert(x, idx, 999, axis=1)", "        array([[  0, 999,   1,   2, 999,   3],", "               [  4, 999,   5,   6, 999,   7]])", "    ", "        \"\"\"", "        wrap = None", "        if type(arr) is not ndarray:", "            try:", "                wrap = arr.__array_wrap__", "            except AttributeError:", "                pass", "    ", "        arr = asarray(arr)", "        ndim = arr.ndim", "        arrorder = 'F' if arr.flags.fnc else 'C'", "        if axis is None:", "            if ndim != 1:", "                arr = arr.ravel()", "            # needed for np.matrix, which is still not 1d after being ravelled", "            ndim = arr.ndim", "            axis = ndim - 1", "        else:", ">           axis = normalize_axis_index(axis, ndim)", "E           numpy.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["arr", "array([set(), set(), set(), set(), set(), set(), set(), set(), set(),\n       set(), set(), set(), set(), set(), set(),... set(), set(), set(), set(), set(),\n       set(), set(), set(), set(), set(), set(), set(), set()],\n      dtype=object)"], ["obj", "99"], ["values", "[86, 77]"], ["axis", "1"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3/dist-packages/numpy/lib/function_base.py", "lineno": 4673, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3/dist-packages/numpy/lib/function_base.py", "lineno": 4673, "message": "numpy.AxisError: axis 1 is out of bounds for array of dimension 1"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005091979401186109, "start": 1701648266.9724808, "stop": 1701648266.972991, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "eae951da5cf24be2a81d31e8d73bcdb3", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
