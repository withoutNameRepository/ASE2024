{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_38_4.py::test_if_result_is_sorted", "location": ["tests39_38_4.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_38_4.py": 1, "Folder_38": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011264500790275633, "start": 1700341828.1598425, "stop": 1700341828.1599557, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "822c71be49ca439283c258fd2382d9a0", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_38_4.py::test_strings_of_size_equal_to_45", "location": ["tests39_38_4.py", 5, "test_strings_of_size_equal_to_45"], "keywords": {"test_strings_of_size_equal_to_45": 1, "tests39_38_4.py": 1, "Folder_38": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013778801076114178, "start": 1700341828.1600025, "stop": 1700341828.1601408, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "822c71be49ca439283c258fd2382d9a0", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_38_4.py::test_if_result_is_sorted", "location": ["tests39_38_4.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_38_4.py": 1, "Folder_38": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_4/Folder_38/tests39_38_4.py", "lineno": 26, "message": "AssertionError: assert 'l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP' == [' ', '#', '$', '%', '*', '+', ...]\n +  where [' ', '#', '$', '%', '*', '+', ...] = sorted('l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=45 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert 'l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP' == [' ', '#', '$', '%', '*', '+', ...]", "E            +  where [' ', '#', '$', '%', '*', '+', ...] = sorted('l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_4/Folder_38/tests39_38_4.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=45 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert 'l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP' == [' ', '#', '$', '%', '*', '+', ...]", "E            +  where [' ', '#', '$', '%', '*', '+', ...] = sorted('l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_4/Folder_38/tests39_38_4.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_4/Folder_38/tests39_38_4.py", "lineno": 26, "message": "AssertionError: assert 'l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP' == [' ', '#', '$', '%', '*', '+', ...]\n +  where [' ', '#', '$', '%', '*', '+', ...] = sorted('l*/FvL_b#oBwQ%AUMRf>~qKY@4$ T=Od}7;X?+NghaGxP')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00029877101769670844, "start": 1700341828.1601546, "stop": 1700341828.1604538, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "822c71be49ca439283c258fd2382d9a0", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
