{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_17_5.py::test_if_result_is_sorted", "location": ["tests39_17_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_17_5.py": 1, "Folder_17": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016814301488921046, "start": 1700341909.5066512, "stop": 1700341909.5068202, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "a08fafaf8fc9490188aa028aeb235b7c", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_17_5.py::test_strings_of_size_equal_to_11", "location": ["tests39_17_5.py", 5, "test_strings_of_size_equal_to_11"], "keywords": {"test_strings_of_size_equal_to_11": 1, "tests39_17_5.py": 1, "Folder_17": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00017253000987693667, "start": 1700341909.5066948, "stop": 1700341909.5068684, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "a08fafaf8fc9490188aa028aeb235b7c", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_17_5.py::test_if_result_is_sorted", "location": ["tests39_17_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_17_5.py": 1, "Folder_17": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00025867100339382887, "start": 1700341909.507094, "stop": 1700341909.5073533, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "a08fafaf8fc9490188aa028aeb235b7c", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_17_5.py::test_if_result_is_sorted", "location": ["tests39_17_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_17_5.py": 1, "Folder_17": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 9.249901631847024e-05, "start": 1700341909.5076537, "stop": 1700341909.5077465, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "a08fafaf8fc9490188aa028aeb235b7c", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_17_5.py::test_if_result_contains_highest_chars", "location": ["tests39_17_5.py", 30, "test_if_result_contains_highest_chars"], "keywords": {"test_if_result_contains_highest_chars": 1, "tests39_17_5.py": 1, "Folder_17": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 8.990700007416308e-05, "start": 1700341909.508136, "stop": 1700341909.5082264, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "a08fafaf8fc9490188aa028aeb235b7c", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_17_5.py::test_strings_of_size_equal_to_11", "location": ["tests39_17_5.py", 5, "test_strings_of_size_equal_to_11"], "keywords": {"test_strings_of_size_equal_to_11": 1, "tests39_17_5.py": 1, "Folder_17": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_5/Folder_17/tests39_17_5.py", "lineno": 10, "message": "AssertionError: assert ['UH', 'D', 'G'] == ['(', '4', '6...'D', 'G', ...]\n  At index 0 diff: 'UH' != '('\n  Right contains 8 more items, first extra item: '='\n  Full diff:\n  - ['(', '4', '6', '=', 'D', 'G', 'H', 'U', 'k', 'm', '~']\n  + ['UH', 'D', 'G']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_11():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=11))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)", "E           AssertionError: assert ['UH', 'D', 'G'] == ['(', '4', '6...'D', 'G', ...]", "E             At index 0 diff: 'UH' != '('", "E             Right contains 8 more items, first extra item: '='", "E             Full diff:", "E             - ['(', '4', '6', '=', 'D', 'G', 'H', 'U', 'k', 'm', '~']", "E             + ['UH', 'D', 'G']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_5/Folder_17/tests39_17_5.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_11():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=11))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)", "E           AssertionError: assert ['UH', 'D', 'G'] == ['(', '4', '6...'D', 'G', ...]", "E             At index 0 diff: 'UH' != '('", "E             Right contains 8 more items, first extra item: '='", "E             Full diff:", "E             - ['(', '4', '6', '=', 'D', 'G', 'H', 'U', 'k', 'm', '~']", "E             + ['UH', 'D', 'G']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_5/Folder_17/tests39_17_5.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_5/Folder_17/tests39_17_5.py", "lineno": 10, "message": "AssertionError: assert ['UH', 'D', 'G'] == ['(', '4', '6...'D', 'G', ...]\n  At index 0 diff: 'UH' != '('\n  Right contains 8 more items, first extra item: '='\n  Full diff:\n  - ['(', '4', '6', '=', 'D', 'G', 'H', 'U', 'k', 'm', '~']\n  + ['UH', 'D', 'G']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005465210124384612, "start": 1700341909.5071447, "stop": 1700341909.507692, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "a08fafaf8fc9490188aa028aeb235b7c", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
