{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_39_5.py::test_strings_of_size_equal_to_23", "location": ["tests39_39_5.py", 5, "test_strings_of_size_equal_to_23"], "keywords": {"test_strings_of_size_equal_to_23": 1, "tests39_39_5.py": 1, "Folder_39": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001060179783962667, "start": 1700341933.0105436, "stop": 1700341933.0106504, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "bc889ce46d07441faf0ea648a713526f", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_39_5.py::test_if_result_is_sorted", "location": ["tests39_39_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_39_5.py": 1, "Folder_39": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.134699939750135e-05, "start": 1700341933.0104687, "stop": 1700341933.0105605, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "bc889ce46d07441faf0ea648a713526f", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_39_5.py::test_if_result_is_sorted", "location": ["tests39_39_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_39_5.py": 1, "Folder_39": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_5/Folder_39/tests39_39_5.py", "lineno": 26, "message": "AssertionError: assert ['E', 'N', 'T', 'D', 'M', 'W'] == ['D', 'E', 'M', 'N', 'T', 'W']\n  At index 0 diff: 'E' != 'D'\n  Full diff:\n  - ['D', 'E', 'M', 'N', 'T', 'W']\n  + ['E', 'N', 'T', 'D', 'M', 'W']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=23 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['E', 'N', 'T', 'D', 'M', 'W'] == ['D', 'E', 'M', 'N', 'T', 'W']", "E             At index 0 diff: 'E' != 'D'", "E             Full diff:", "E             - ['D', 'E', 'M', 'N', 'T', 'W']", "E             + ['E', 'N', 'T', 'D', 'M', 'W']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_5/Folder_39/tests39_39_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=23 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['E', 'N', 'T', 'D', 'M', 'W'] == ['D', 'E', 'M', 'N', 'T', 'W']", "E             At index 0 diff: 'E' != 'D'", "E             Full diff:", "E             - ['D', 'E', 'M', 'N', 'T', 'W']", "E             + ['E', 'N', 'T', 'D', 'M', 'W']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_5/Folder_39/tests39_39_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_5/Folder_39/tests39_39_5.py", "lineno": 26, "message": "AssertionError: assert ['E', 'N', 'T', 'D', 'M', 'W'] == ['D', 'E', 'M', 'N', 'T', 'W']\n  At index 0 diff: 'E' != 'D'\n  Full diff:\n  - ['D', 'E', 'M', 'N', 'T', 'W']\n  + ['E', 'N', 'T', 'D', 'M', 'W']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00038450301508419216, "start": 1700341933.0107136, "stop": 1700341933.0110986, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "bc889ce46d07441faf0ea648a713526f", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
