{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_99_1.py::test_strings_of_size_equal_to_35", "location": ["tests39_99_1.py", 5, "test_strings_of_size_equal_to_35"], "keywords": {"test_strings_of_size_equal_to_35": 1, "tests39_99_1.py": 1, "Folder_99": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.000122593977721408, "start": 1700341591.9265337, "stop": 1700341591.9266567, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "846ee86894fa405a849acf017020c4ff", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_99_1.py::test_if_result_is_sorted", "location": ["tests39_99_1.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_99_1.py": 1, "Folder_99": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001260330027434975, "start": 1700341591.9264235, "stop": 1700341591.92655, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "846ee86894fa405a849acf017020c4ff", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_99_1.py::test_if_result_is_sorted", "location": ["tests39_99_1.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_99_1.py": 1, "Folder_99": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_1/Folder_99/tests39_99_1.py", "lineno": 28, "message": "AssertionError: assert ['P', 'GEO', ...AU', 'M', ...] == ['Q', 'P', 'M...', 'GEO', ...]\n  At index 0 diff: 'P' != 'Q'\n  Full diff:\n  - ['Q', 'P', 'M', 'K', 'H', 'GEO', 'F', 'AU']\n  + ['P', 'GEO', 'Q', 'H', 'AU', 'M', 'K', 'F']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=35 + 1))", "        result = return_n_greatest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert ['P', 'GEO', ...AU', 'M', ...] == ['Q', 'P', 'M...', 'GEO', ...]", "E             At index 0 diff: 'P' != 'Q'", "E             Full diff:", "E             - ['Q', 'P', 'M', 'K', 'H', 'GEO', 'F', 'AU']", "E             + ['P', 'GEO', 'Q', 'H', 'AU', 'M', 'K', 'F']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_1/Folder_99/tests39_99_1.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=35 + 1))", "        result = return_n_greatest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert ['P', 'GEO', ...AU', 'M', ...] == ['Q', 'P', 'M...', 'GEO', ...]", "E             At index 0 diff: 'P' != 'Q'", "E             Full diff:", "E             - ['Q', 'P', 'M', 'K', 'H', 'GEO', 'F', 'AU']", "E             + ['P', 'GEO', 'Q', 'H', 'AU', 'M', 'K', 'F']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_1/Folder_99/tests39_99_1.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_1/Folder_99/tests39_99_1.py", "lineno": 28, "message": "AssertionError: assert ['P', 'GEO', ...AU', 'M', ...] == ['Q', 'P', 'M...', 'GEO', ...]\n  At index 0 diff: 'P' != 'Q'\n  Full diff:\n  - ['Q', 'P', 'M', 'K', 'H', 'GEO', 'F', 'AU']\n  + ['P', 'GEO', 'Q', 'H', 'AU', 'M', 'K', 'F']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005252079863566905, "start": 1700341591.9267445, "stop": 1700341591.9272702, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "846ee86894fa405a849acf017020c4ff", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
