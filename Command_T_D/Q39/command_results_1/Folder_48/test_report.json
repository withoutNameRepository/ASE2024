{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_48_1.py::test_strings_of_size_equal_to_12", "location": ["tests39_48_1.py", 5, "test_strings_of_size_equal_to_12"], "keywords": {"test_strings_of_size_equal_to_12": 1, "tests39_48_1.py": 1, "Folder_48": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00010618902160786092, "start": 1700341555.6303363, "stop": 1700341555.630443, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "bdc0642e0d1b4997b373392ddb7426fd", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_48_1.py::test_if_result_is_sorted", "location": ["tests39_48_1.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_48_1.py": 1, "Folder_48": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.946900536306202e-05, "start": 1700341555.6304169, "stop": 1700341555.630517, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "bdc0642e0d1b4997b373392ddb7426fd", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_48_1.py::test_strings_of_size_equal_to_12", "location": ["tests39_48_1.py", 5, "test_strings_of_size_equal_to_12"], "keywords": {"test_strings_of_size_equal_to_12": 1, "tests39_48_1.py": 1, "Folder_48": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_1/Folder_48/tests39_48_1.py", "lineno": 10, "message": "AssertionError: assert 'VEOH' == ['(', '+', '/', 'E', 'H', 'O', ...]\n +  where 'VEOH' = return_n_greatest_chars('dVmjE(/Ol{+H')\n +  and   ['(', '+', '/', 'E', 'H', 'O', ...] = sorted('dVmjE(/Ol{+H')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_12():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=12))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)", "E           AssertionError: assert 'VEOH' == ['(', '+', '/', 'E', 'H', 'O', ...]", "E            +  where 'VEOH' = return_n_greatest_chars('dVmjE(/Ol{+H')", "E            +  and   ['(', '+', '/', 'E', 'H', 'O', ...] = sorted('dVmjE(/Ol{+H')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_1/Folder_48/tests39_48_1.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_12():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=12))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)", "E           AssertionError: assert 'VEOH' == ['(', '+', '/', 'E', 'H', 'O', ...]", "E            +  where 'VEOH' = return_n_greatest_chars('dVmjE(/Ol{+H')", "E            +  and   ['(', '+', '/', 'E', 'H', 'O', ...] = sorted('dVmjE(/Ol{+H')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_1/Folder_48/tests39_48_1.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_1/Folder_48/tests39_48_1.py", "lineno": 10, "message": "AssertionError: assert 'VEOH' == ['(', '+', '/', 'E', 'H', 'O', ...]\n +  where 'VEOH' = return_n_greatest_chars('dVmjE(/Ol{+H')\n +  and   ['(', '+', '/', 'E', 'H', 'O', ...] = sorted('dVmjE(/Ol{+H')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002780799986794591, "start": 1700341555.6306183, "stop": 1700341555.6308968, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "bdc0642e0d1b4997b373392ddb7426fd", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
