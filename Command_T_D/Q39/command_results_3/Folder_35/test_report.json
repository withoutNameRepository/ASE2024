{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_35_3.py::test_strings_of_size_equal_to_7", "location": ["tests39_35_3.py", 5, "test_strings_of_size_equal_to_7"], "keywords": {"test_strings_of_size_equal_to_7": 1, "tests39_35_3.py": 1, "Folder_35": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00017705801292322576, "start": 1700341735.9972508, "stop": 1700341735.997429, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f9f69d0494f1427fa4f8d273c144c084", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_35_3.py::test_if_result_is_sorted", "location": ["tests39_35_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_35_3.py": 1, "Folder_35": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016162401880137622, "start": 1700341735.9971747, "stop": 1700341735.997337, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f9f69d0494f1427fa4f8d273c144c084", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_35_3.py::test_strings_of_size_equal_to_7", "location": ["tests39_35_3.py", 5, "test_strings_of_size_equal_to_7"], "keywords": {"test_strings_of_size_equal_to_7": 1, "tests39_35_3.py": 1, "Folder_35": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_35/tests39_35_3.py", "lineno": 10, "message": "AssertionError: assert ['7', ':', 'b...'M', 'v', ...] == ['7', ':', 'M...'j', 'v', ...]\n  At index 2 diff: 'b' != 'M'\n  Full diff:\n  - ['7', ':', 'M', 'b', 'j', 'v', '{']\n  + ['7', ':', 'b', 'j', 'M', 'v', '{']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_7():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=7))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)", "E           AssertionError: assert ['7', ':', 'b...'M', 'v', ...] == ['7', ':', 'M...'j', 'v', ...]", "E             At index 2 diff: 'b' != 'M'", "E             Full diff:", "E             - ['7', ':', 'M', 'b', 'j', 'v', '{']", "E             + ['7', ':', 'b', 'j', 'M', 'v', '{']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_35/tests39_35_3.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_7():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=7))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)", "E           AssertionError: assert ['7', ':', 'b...'M', 'v', ...] == ['7', ':', 'M...'j', 'v', ...]", "E             At index 2 diff: 'b' != 'M'", "E             Full diff:", "E             - ['7', ':', 'M', 'b', 'j', 'v', '{']", "E             + ['7', ':', 'b', 'j', 'M', 'v', '{']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_35/tests39_35_3.py", "lineno": 10, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_35/tests39_35_3.py", "lineno": 10, "message": "AssertionError: assert ['7', ':', 'b...'M', 'v', ...] == ['7', ':', 'M...'j', 'v', ...]\n  At index 2 diff: 'b' != 'M'\n  Full diff:\n  - ['7', ':', 'M', 'b', 'j', 'v', '{']\n  + ['7', ':', 'b', 'j', 'M', 'v', '{']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005945579905528575, "start": 1700341735.997715, "stop": 1700341735.99831, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f9f69d0494f1427fa4f8d273c144c084", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
