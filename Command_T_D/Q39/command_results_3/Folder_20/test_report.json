{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_20_3.py::test_strings_of_size_equal_to_40", "location": ["tests39_20_3.py", 5, "test_strings_of_size_equal_to_40"], "keywords": {"test_strings_of_size_equal_to_40": 1, "tests39_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014581700088456273, "start": 1700341722.8335214, "stop": 1700341722.833668, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "c9c22592d8c045ac91b06086739642bb", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_20_3.py::test_if_result_is_sorted", "location": ["tests39_20_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013929599663242698, "start": 1700341722.8334258, "stop": 1700341722.8335657, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "c9c22592d8c045ac91b06086739642bb", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_20_3.py::test_if_result_is_sorted", "location": ["tests39_20_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_20_3.py": 1, "Folder_20": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_20/tests39_20_3.py", "lineno": 26, "message": "AssertionError: assert 'NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba' == ['A', 'B', 'C', 'D', 'E', 'F', ...]\n +  where ['A', 'B', 'C', 'D', 'E', 'F', ...] = sorted('NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=40 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert 'NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba' == ['A', 'B', 'C', 'D', 'E', 'F', ...]", "E            +  where ['A', 'B', 'C', 'D', 'E', 'F', ...] = sorted('NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_20/tests39_20_3.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=40 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert 'NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba' == ['A', 'B', 'C', 'D', 'E', 'F', ...]", "E            +  where ['A', 'B', 'C', 'D', 'E', 'F', ...] = sorted('NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_20/tests39_20_3.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_20/tests39_20_3.py", "lineno": 26, "message": "AssertionError: assert 'NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba' == ['A', 'B', 'C', 'D', 'E', 'F', ...]\n +  where ['A', 'B', 'C', 'D', 'E', 'F', ...] = sorted('NMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002772370062302798, "start": 1700341722.8337917, "stop": 1700341722.8340695, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "c9c22592d8c045ac91b06086739642bb", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
