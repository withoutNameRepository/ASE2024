{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_90_3.py::test_strings_of_size_equal_to_24", "location": ["tests39_90_3.py", 5, "test_strings_of_size_equal_to_24"], "keywords": {"test_strings_of_size_equal_to_24": 1, "tests39_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.161198977380991e-05, "start": 1700341785.9660077, "stop": 1700341785.9661, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "ac75bb9b8eb34365ac2a6e0ee631068d", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_90_3.py::test_if_result_is_sorted", "location": ["tests39_90_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.86569793894887e-05, "start": 1700341785.96608, "stop": 1700341785.9661791, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "ac75bb9b8eb34365ac2a6e0ee631068d", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_90_3.py::test_if_result_is_sorted", "location": ["tests39_90_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_90_3.py": 1, "Folder_90": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_90/tests39_90_3.py", "lineno": 28, "message": "AssertionError: assert ['F', 'S', 'A', 'Z'] == ['Z', 'S', 'F', 'A']\n  At index 0 diff: 'F' != 'Z'\n  Full diff:\n  - ['Z', 'S', 'F', 'A']\n  + ['F', 'S', 'A', 'Z']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=24 + 1))", "        result = return_n_greatest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert ['F', 'S', 'A', 'Z'] == ['Z', 'S', 'F', 'A']", "E             At index 0 diff: 'F' != 'Z'", "E             Full diff:", "E             - ['Z', 'S', 'F', 'A']", "E             + ['F', 'S', 'A', 'Z']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_90/tests39_90_3.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=24 + 1))", "        result = return_n_greatest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert ['F', 'S', 'A', 'Z'] == ['Z', 'S', 'F', 'A']", "E             At index 0 diff: 'F' != 'Z'", "E             Full diff:", "E             - ['Z', 'S', 'F', 'A']", "E             + ['F', 'S', 'A', 'Z']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_90/tests39_90_3.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_90/tests39_90_3.py", "lineno": 28, "message": "AssertionError: assert ['F', 'S', 'A', 'Z'] == ['Z', 'S', 'F', 'A']\n  At index 0 diff: 'F' != 'Z'\n  Full diff:\n  - ['Z', 'S', 'F', 'A']\n  + ['F', 'S', 'A', 'Z']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00034848801442421973, "start": 1700341785.9663458, "stop": 1700341785.9666944, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "ac75bb9b8eb34365ac2a6e0ee631068d", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
