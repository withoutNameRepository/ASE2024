{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_1_3.py::test_strings_of_size_equal_to_11", "location": ["tests39_1_3.py", 5, "test_strings_of_size_equal_to_11"], "keywords": {"test_strings_of_size_equal_to_11": 1, "tests39_1_3.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013743501040153205, "start": 1700341707.757095, "stop": 1700341707.7572331, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "fcad0c682958404796bbacddc53034b0", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_1_3.py::test_if_result_is_sorted", "location": ["tests39_1_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_1_3.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002113170048687607, "start": 1700341707.757327, "stop": 1700341707.7575393, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "fcad0c682958404796bbacddc53034b0", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_1_3.py::test_if_result_is_sorted", "location": ["tests39_1_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_1_3.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00024068698985502124, "start": 1700341707.7578888, "stop": 1700341707.7581306, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "fcad0c682958404796bbacddc53034b0", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_1_3.py::test_if_result_is_sorted", "location": ["tests39_1_3.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_1_3.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0001576770155224949, "start": 1700341707.75852, "stop": 1700341707.7586784, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "fcad0c682958404796bbacddc53034b0", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_1_3.py::test_if_result_contains_highest_chars", "location": ["tests39_1_3.py", 30, "test_if_result_contains_highest_chars"], "keywords": {"test_if_result_contains_highest_chars": 1, "tests39_1_3.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016209902241826057, "start": 1700341707.75931, "stop": 1700341707.759473, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "fcad0c682958404796bbacddc53034b0", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_1_3.py::test_strings_of_size_equal_to_11", "location": ["tests39_1_3.py", 5, "test_strings_of_size_equal_to_11"], "keywords": {"test_strings_of_size_equal_to_11": 1, "tests39_1_3.py": 1, "Folder_1": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_1/tests39_1_3.py", "lineno": 12, "message": "AssertionError: assert ['06', '06', ...6', '06', ...] == ['~', '{', 'o...'_', ']', ...]\n  At index 0 diff: '06' != '~'\n  Full diff:\n  - ['~', '{', 'o', 'a', '_', ']', 'P', ':', '6', '0', ',']\n  + ['06', '06', '06', '06', '06', '06', '06', '06', '06', '06', '06']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_11():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=11))", "        if 'descending' == 'ascending':", "            assert return_n_greatest_chars(s) == sorted(s)", "        else:", ">           assert return_n_greatest_chars(s) == sorted(s, reverse=True)", "E           AssertionError: assert ['06', '06', ...6', '06', ...] == ['~', '{', 'o...'_', ']', ...]", "E             At index 0 diff: '06' != '~'", "E             Full diff:", "E             - ['~', '{', 'o', 'a', '_', ']', 'P', ':', '6', '0', ',']", "E             + ['06', '06', '06', '06', '06', '06', '06', '06', '06', '06', '06']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_1/tests39_1_3.py", "lineno": 12, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_11():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=11))", "        if 'descending' == 'ascending':", "            assert return_n_greatest_chars(s) == sorted(s)", "        else:", ">           assert return_n_greatest_chars(s) == sorted(s, reverse=True)", "E           AssertionError: assert ['06', '06', ...6', '06', ...] == ['~', '{', 'o...'_', ']', ...]", "E             At index 0 diff: '06' != '~'", "E             Full diff:", "E             - ['~', '{', 'o', 'a', '_', ']', 'P', ':', '6', '0', ',']", "E             + ['06', '06', '06', '06', '06', '06', '06', '06', '06', '06', '06']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_3/Folder_1/tests39_1_3.py", "lineno": 12, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_3/Folder_1/tests39_1_3.py", "lineno": 12, "message": "AssertionError: assert ['06', '06', ...6', '06', ...] == ['~', '{', 'o...'_', ']', ...]\n  At index 0 diff: '06' != '~'\n  Full diff:\n  - ['~', '{', 'o', 'a', '_', ']', 'P', ':', '6', '0', ',']\n  + ['06', '06', '06', '06', '06', '06', '06', '06', '06', '06', '06']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005482500127982348, "start": 1700341707.7574499, "stop": 1700341707.757999, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "fcad0c682958404796bbacddc53034b0", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
