{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_35_2.py::test_if_result_is_sorted", "location": ["tests39_35_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_35_2.py": 1, "Folder_35": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.697099449113011e-05, "start": 1700341654.6648283, "stop": 1700341654.6649258, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "bbeda2e2073c4338b1f889fa0d03a83f", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_35_2.py::test_strings_of_size_equal_to_7", "location": ["tests39_35_2.py", 5, "test_strings_of_size_equal_to_7"], "keywords": {"test_strings_of_size_equal_to_7": 1, "tests39_35_2.py": 1, "Folder_35": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001224770094268024, "start": 1700341654.6650026, "stop": 1700341654.6651256, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "bbeda2e2073c4338b1f889fa0d03a83f", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_35_2.py::test_if_result_is_sorted", "location": ["tests39_35_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_35_2.py": 1, "Folder_35": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_2/Folder_35/tests39_35_2.py", "lineno": 26, "message": "AssertionError: assert ['_', 'b', 'Q', 'u', 'W', 'X'] == ['Q', 'W', 'X', '_', 'b', 'u']\n  At index 0 diff: '_' != 'Q'\n  Full diff:\n  - ['Q', 'W', 'X', '_', 'b', 'u']\n  + ['_', 'b', 'Q', 'u', 'W', 'X']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=7 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['_', 'b', 'Q', 'u', 'W', 'X'] == ['Q', 'W', 'X', '_', 'b', 'u']", "E             At index 0 diff: '_' != 'Q'", "E             Full diff:", "E             - ['Q', 'W', 'X', '_', 'b', 'u']", "E             + ['_', 'b', 'Q', 'u', 'W', 'X']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_2/Folder_35/tests39_35_2.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=7 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['_', 'b', 'Q', 'u', 'W', 'X'] == ['Q', 'W', 'X', '_', 'b', 'u']", "E             At index 0 diff: '_' != 'Q'", "E             Full diff:", "E             - ['Q', 'W', 'X', '_', 'b', 'u']", "E             + ['_', 'b', 'Q', 'u', 'W', 'X']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_2/Folder_35/tests39_35_2.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_2/Folder_35/tests39_35_2.py", "lineno": 26, "message": "AssertionError: assert ['_', 'b', 'Q', 'u', 'W', 'X'] == ['Q', 'W', 'X', '_', 'b', 'u']\n  At index 0 diff: '_' != 'Q'\n  Full diff:\n  - ['Q', 'W', 'X', '_', 'b', 'u']\n  + ['_', 'b', 'Q', 'u', 'W', 'X']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0004056449979543686, "start": 1700341654.6650841, "stop": 1700341654.6654902, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "bbeda2e2073c4338b1f889fa0d03a83f", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
