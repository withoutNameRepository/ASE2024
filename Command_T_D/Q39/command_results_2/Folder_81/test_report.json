{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_81_2.py::test_strings_of_size_equal_to_64", "location": ["tests39_81_2.py", 5, "test_strings_of_size_equal_to_64"], "keywords": {"test_strings_of_size_equal_to_64": 1, "tests39_81_2.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012771799811162055, "start": 1700341692.1598592, "stop": 1700341692.1599874, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f1f550daedbc4f40bd24707d2cfe8680", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_81_2.py::test_if_result_is_sorted", "location": ["tests39_81_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_81_2.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.000119454984087497, "start": 1700341692.1598814, "stop": 1700341692.1600015, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f1f550daedbc4f40bd24707d2cfe8680", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_81_2.py::test_if_result_is_sorted", "location": ["tests39_81_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_81_2.py": 1, "Folder_81": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q39/command_results_2/Folder_81/tests39_81_2.py", "lineno": 26, "message": "AssertionError: assert ['YW', 'BX', ...NK', 'E', ...] == ['A', 'BX', '...', 'HQR', ...]\n  At index 0 diff: 'YW' != 'A'\n  Full diff:\n  - ['A', 'BX', 'E', 'F', 'G', 'HQR', 'INK', 'M', 'U', 'YW', 'Z']\n  + ['YW', 'BX', 'G', 'F', 'INK', 'E', 'M', 'U', 'A', 'Z', 'HQR']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=64 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['YW', 'BX', ...NK', 'E', ...] == ['A', 'BX', '...', 'HQR', ...]", "E             At index 0 diff: 'YW' != 'A'", "E             Full diff:", "E             - ['A', 'BX', 'E', 'F', 'G', 'HQR', 'INK', 'M', 'U', 'YW', 'Z']", "E             + ['YW', 'BX', 'G', 'F', 'INK', 'E', 'M', 'U', 'A', 'Z', 'HQR']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_2/Folder_81/tests39_81_2.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=64 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['YW', 'BX', ...NK', 'E', ...] == ['A', 'BX', '...', 'HQR', ...]", "E             At index 0 diff: 'YW' != 'A'", "E             Full diff:", "E             - ['A', 'BX', 'E', 'F', 'G', 'HQR', 'INK', 'M', 'U', 'YW', 'Z']", "E             + ['YW', 'BX', 'G', 'F', 'INK', 'E', 'M', 'U', 'A', 'Z', 'HQR']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/command_results_2/Folder_81/tests39_81_2.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q39/command_results_2/Folder_81/tests39_81_2.py", "lineno": 26, "message": "AssertionError: assert ['YW', 'BX', ...NK', 'E', ...] == ['A', 'BX', '...', 'HQR', ...]\n  At index 0 diff: 'YW' != 'A'\n  Full diff:\n  - ['A', 'BX', 'E', 'F', 'G', 'HQR', 'INK', 'M', 'U', 'YW', 'Z']\n  + ['YW', 'BX', 'G', 'F', 'INK', 'E', 'M', 'U', 'A', 'Z', 'HQR']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005770580028183758, "start": 1700341692.160162, "stop": 1700341692.1607397, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f1f550daedbc4f40bd24707d2cfe8680", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
