[cohere.Generation {
	id: faf5b588-eb91-4013-9d54-306450ac8b0d
	prompt: Here is a text specification delimited by angle brackets. Create Python code according to the text specification. <Write a function called 'all_right_truncatable_prime' that takes an argument which is a tuple of positive integers. Let x be the integer at index 466. The function should return the sorted list of all right-truncatable prime numbers less than x. The returned list should be sorted in descending order. If there is no such right-truncatable prime number, the function should return an empty list. A right-truncatable prime number is a prime number that remains prime when the last rightmost digit is successively removed.> The Python code should not contain any comments. The Python code should be delimited only by triple backticks.
	text: 
```python
def all_right_truncatable_prime(test_case):
    test_case = list(test_case)
    test_case.sort()
    test_case[0] = int(test_case[0])
    test_case[1] = int(test_case[1])
    test_case[2] = int(test_case[2])
    test_case[3] = int(test_case[3])
    test_case[4] = int(test_case[4])
    test_case[5] = int(test_case[5])
    test_case[6] = int(test_case[6])
    test_case[7] = int(test_case[7])
    test_case[8] = int(test_case[8])
    test_case[9] = int(test_case[9])
    test_case[10] = int(test_case[10])
    test_case[11] = int(test_case[11])
    test_case[12] = int(test_case[12])
    test_case[13] = int(test_case[13])
    test_case[14] = int(test_case[14])
    test_case[15] = int(test_case[15])
    test_case[16] = int(test_case[16])
    test_case[17] = int(test_case[17])
    test_case[18] = int(test_case[18])
    test_case[19] = int(test_case[19])
    test_case[20] = int(test_case[20])
    test_case[21] = int(test_case[21])
    test_case[22] = int(test_case[22])
    test_case[23] = int(test_case[23])
    test_case[24] = int(test_case[24])
    test_case[25] = int(test_case[25])
    test_case[26] = int(test_case[26])
    test_case[27] = int(test_case[27])
    test_case[28] = int(test_case[28])
    test_case[29] = int(test_case[29])
    test_case[30] = int(test_case[30])
    test_case[31] = int(test_case[31])
    test_case[32] = int(test_case[32])
    test_case[33] = int(test_case[33])
    test_case[34] = int(test_case[34])
    test_case[35] = int(test_case[35])
    test_case[36] = int(test_case[36])
    test_case[37] = int(test_case[37])
    test_case[38] = int(test_case[38])
    test_case[39] = int(test_case[39])
    test_case[40] = int(test_case[40])
    test_case[41] = int(test_case[41])
    test_case[42] = int(test_case[42])
    test_case[43] = int(test_case[43])
    test_case[44] = int(test_case[44])
    test_case[45] = int(test_case[45])
    test_case[46] = int(test_case[46])
    test_case[47] = int(test_case[47])
    test_case[48] = int(test_case[48])
    test_case[49] = int(test_case[49])
    test_case[50] = int(test_case[50])
    test_case[51] = int(test_case[51])
    test_case[52] = int(test_case[52])
    test_case[53] = int(test_case[53])
    test_case[54] = int(test_case[54])
    test_case[55] = int(test_case[55])
    test_case[56] = int(test_case[56])
    test_case[57] = int(test_case[57])
    test_case[58] = int(test_case[58])
    test_case[59] = int(test_case[59])
    test_case[60] = int(test_case[60])
    test_case[61] = int(test_case[61])
    test_case[62] = int(test_case[62])
    test_case[63] = int(test_case[63])
    test_case[64] = int(test_case[64])
    test_case[65] = int(test_case[65])
    test_case[66] = int(test_case[66])
    test_case[67] = int(test_case[67])
    test_case[68] = int(test_case[68])
    test_case[69] = int(test_case[69])
    test_case[70] = int(test_case[70])
    test_case[71] = int(test_case[71])
    test_case[72] = int(test_
	likelihood: None
	token_likelihoods: None
}]