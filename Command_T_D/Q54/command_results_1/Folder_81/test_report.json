{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests54_81_1.py::test_if_result_is_less_than_98", "location": ["tests54_81_1.py", 34, "test_if_result_is_less_than_98"], "keywords": {"test_if_result_is_less_than_98": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002595059995655902, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw2>"}
{"nodeid": "tests54_81_1.py::test_list_of_all_one_digit_nums", "location": ["tests54_81_1.py", 4, "test_list_of_all_one_digit_nums"], "keywords": {"test_list_of_all_one_digit_nums": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002910759940277785, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw0>"}
{"nodeid": "tests54_81_1.py::test_result_size_is_less_than_specified_number", "location": ["tests54_81_1.py", 53, "test_result_size_is_less_than_specified_number"], "keywords": {"test_result_size_is_less_than_specified_number": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002924779983004555, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw4>"}
{"nodeid": "tests54_81_1.py::test_if_result_integers_are_odd", "location": ["tests54_81_1.py", 19, "test_if_result_integers_are_odd"], "keywords": {"test_if_result_integers_are_odd": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00040194800385506824, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw1>"}
{"nodeid": "tests54_81_1.py::test_result_size_is_less_than_specified_number", "location": ["tests54_81_1.py", 53, "test_result_size_is_less_than_specified_number"], "keywords": {"test_result_size_is_less_than_specified_number": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002542849979363382, "extra": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw4>"}
{"nodeid": "tests54_81_1.py::test_if_result_order_is_correct", "location": ["tests54_81_1.py", 42, "test_if_result_order_is_correct"], "keywords": {"test_if_result_order_is_correct": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00031582399969920516, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw3", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw3>"}
{"nodeid": "tests54_81_1.py::test_result_size_is_less_than_specified_number", "location": ["tests54_81_1.py", 53, "test_result_size_is_less_than_specified_number"], "keywords": {"test_result_size_is_less_than_specified_number": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00019997200433863327, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw4>"}
{"nodeid": "tests54_81_1.py::test_list_of_all_one_digit_nums", "location": ["tests54_81_1.py", 4, "test_list_of_all_one_digit_nums"], "keywords": {"test_list_of_all_one_digit_nums": 1, "tests54_81_1.py": 1, "Folder_81": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command/Q54/command_results_1/Folder_81/generated_answer.py", "lineno": 7, "message": "ValueError: invalid literal for int() with base 10: '(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_all_one_digit_nums():", "        for i in range(1,10):", "            input_list = (i,) * (98 + 1)", "            if i <= 2:", ">               assert not all_right_truncatable_prime(input_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q54/command_results_1/Folder_81/tests54_81_1.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_right_truncatable_prime(n):", "        # Some primes cannot be right-truncated, so we first find all primes", "        # less than or equal to the given number, and then filter the list", "        # to only include those that are right-truncatable.", "        primes = set(itertools.chain.from_iterable(", ">           (str(n) for n in range(2, int(str(n) + \"0\") + 1) if all(n % d == 0 for d in range(2, int(str(n) + \"0\") + 1)))", "        ))", "E       ValueError: invalid literal for int() with base 10: '(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"], "reprfuncargs": {"args": [["n", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q54/command_results_1/Folder_81/generated_answer.py", "lineno": 7, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_all_one_digit_nums():", "        for i in range(1,10):", "            input_list = (i,) * (98 + 1)", "            if i <= 2:", ">               assert not all_right_truncatable_prime(input_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q54/command_results_1/Folder_81/tests54_81_1.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_right_truncatable_prime(n):", "        # Some primes cannot be right-truncated, so we first find all primes", "        # less than or equal to the given number, and then filter the list", "        # to only include those that are right-truncatable.", "        primes = set(itertools.chain.from_iterable(", ">           (str(n) for n in range(2, int(str(n) + \"0\") + 1) if all(n % d == 0 for d in range(2, int(str(n) + \"0\") + 1)))", "        ))", "E       ValueError: invalid literal for int() with base 10: '(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"], "reprfuncargs": {"args": [["n", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q54/command_results_1/Folder_81/generated_answer.py", "lineno": 7, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command/Q54/command_results_1/Folder_81/generated_answer.py", "lineno": 7, "message": "ValueError: invalid literal for int() with base 10: '(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00022073199943406507, "extra": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "5876c95f2b6e41729590b37c3ef54ef5", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
