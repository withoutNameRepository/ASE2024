{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests43_70_5.py::test_list_of_non_prime_nums", "location": ["tests43_70_5.py", 16, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests43_70_5.py": 1, "Folder_70": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011857199933729135, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "be432dba635d469da7014bb08dce1065", "node": "<WorkerController gw1>"}
{"nodeid": "tests43_70_5.py::test_list_of_primes", "location": ["tests43_70_5.py", 4, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests43_70_5.py": 1, "Folder_70": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001320470000791829, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "be432dba635d469da7014bb08dce1065", "node": "<WorkerController gw0>"}
{"nodeid": "tests43_70_5.py::test_list_of_non_prime_nums", "location": ["tests43_70_5.py", 16, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests43_70_5.py": 1, "Folder_70": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.03547373599940329, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "be432dba635d469da7014bb08dce1065", "node": "<WorkerController gw1>"}
{"nodeid": "tests43_70_5.py::test_list_of_non_prime_nums", "location": ["tests43_70_5.py", 16, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests43_70_5.py": 1, "Folder_70": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 8.809499922790565e-05, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "be432dba635d469da7014bb08dce1065", "node": "<WorkerController gw1>"}
{"nodeid": "tests43_70_5.py::test_list_of_negative_nums", "location": ["tests43_70_5.py", 22, "test_list_of_negative_nums"], "keywords": {"test_list_of_negative_nums": 1, "tests43_70_5.py": 1, "Folder_70": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.245300316251814e-05, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "be432dba635d469da7014bb08dce1065", "node": "<WorkerController gw1>"}
{"nodeid": "tests43_70_5.py::test_list_of_negative_nums", "location": ["tests43_70_5.py", 22, "test_list_of_negative_nums"], "keywords": {"test_list_of_negative_nums": 1, "tests43_70_5.py": 1, "Folder_70": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command/Q43/command_results_5/Folder_70/generated_answer.py", "lineno": 2, "message": "TypeError: int() argument must be a string, a bytes-like object or a real number, not 'complex'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_negative_nums():", "        list_of_negative_nums = [i for i in range(-1, -(815 + 1) * 10, -1)]", ">       assert not find_primes_between_indices(list_of_negative_nums)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_5/Folder_70/tests43_70_5.py", "lineno": 25, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sorted(set(nums) for num in nums if all(num % i != 0 for i in range(2, int(num**(0.5)) + 1)))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_5/Folder_70/generated_answer.py", "lineno": 2, "message": "in find_primes_between_indices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": [">   return sorted(set(nums) for num in nums if all(num % i != 0 for i in range(2, int(num**(0.5)) + 1)))", "E   TypeError: int() argument must be a string, a bytes-like object or a real number, not 'complex'"], "reprfuncargs": {"args": [[".0", "<list_iterator object at 0x7fccb6e48400>"]]}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_5/Folder_70/generated_answer.py", "lineno": 2, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_negative_nums():", "        list_of_negative_nums = [i for i in range(-1, -(815 + 1) * 10, -1)]", ">       assert not find_primes_between_indices(list_of_negative_nums)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_5/Folder_70/tests43_70_5.py", "lineno": 25, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sorted(set(nums) for num in nums if all(num % i != 0 for i in range(2, int(num**(0.5)) + 1)))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_5/Folder_70/generated_answer.py", "lineno": 2, "message": "in find_primes_between_indices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": [">   return sorted(set(nums) for num in nums if all(num % i != 0 for i in range(2, int(num**(0.5)) + 1)))", "E   TypeError: int() argument must be a string, a bytes-like object or a real number, not 'complex'"], "reprfuncargs": {"args": [[".0", "<list_iterator object at 0x7fccb6e48400>"]]}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_5/Folder_70/generated_answer.py", "lineno": 2, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command/Q43/command_results_5/Folder_70/generated_answer.py", "lineno": 2, "message": "TypeError: int() argument must be a string, a bytes-like object or a real number, not 'complex'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00023902800239739008, "extra": [], "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "be432dba635d469da7014bb08dce1065", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
