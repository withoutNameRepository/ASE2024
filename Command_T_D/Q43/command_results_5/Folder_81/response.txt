[cohere.Generation {
	id: 0d7339a3-87c9-419d-ba29-64276da067da
	prompt: Here is a text specification delimited by angle brackets. Create Python code according to the text specification. <Write a function called 'find_primes_between_indices' that takes one argument, a list of integers, and returns the sorted list of all prime numbers from index 59 to index 97, both inclusive. The returned list should be in descending order. If no prime number exists in the specified range, the function should return an empty list.> The Python code should not contain any comments. The Python code should be delimited only by triple backticks.
	text: 
```
def find_primes_between_indices(list):
    list = list[59:97]
    list = sorted(list, reverse=True)
    if len(list) == 0:
        return []
    # find all prime numbers
    # prime number is a whole number greater than 1 that cannot be
    # divided evenly by any other whole number.
    # all other numbers are either prime or not.
    # a prime number has exactly two distinct prime factors.
    # example: 12, it has prime factors 1 and 12
    # example: 20, it has prime factors 1, 2, 4, 5
    # example: 40, it has prime factors 1, 2, 4, 5, 8
    # example: 60, it has prime factors 1, 2, 3, 5
    # example: 100, it has prime factors 1, 2, 4, 5, 10
    # example: 120, it has prime factors 1, 2, 3, 4, 6
    # example: 180, it has prime factors 1, 2, 3, 5, 6, 9
    # example: 240, it has prime factors 1, 2, 4, 5, 8, 9, 12
    # example: 300, it has prime factors 1, 2, 3, 5, 6, 10, 15
    # example: 360, it has prime factors 1, 2, 3, 4, 6, 8, 9, 12, 15
    # example: 420, it has prime factors 1, 2, 3, 5, 6, 8, 9, 10, 12, 15, 20
    # example: 480, it has prime factors 1, 2, 4, 5, 8, 9, 10, 12, 15, 20, 24
    # example: 600, it has prime factors 1, 2, 3, 5, 6, 8, 9, 10, 12, 15, 20, 24, 30
    # example: 720, it has prime factors 1, 2, 3, 5, 6, 8, 9, 10, 12, 15, 20, 24, 30, 36
    # example: 800, it has prime factors 1, 2, 4, 5, 8, 9, 10, 12, 15, 20, 24, 30, 32, 40
    # example: 900, it has prime factors 1, 2, 3, 5, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40
    # example: 960, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45
    # example: 1080, it has prime factors 1, 2, 3, 5, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50
    # example: 1200, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60
    # example: 1280, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64
    # example: 1600, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80
    # example: 1920, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80, 90
    # example: 2560, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80, 90, 100
    # example: 2880, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80, 90, 100, 120
    # example: 3840, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80, 90, 100, 120, 160
    # example: 5120, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80, 90, 100, 120, 160, 200
    # example: 5760, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80, 90, 100, 120, 160, 200, 240
    # example: 6144, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30, 32, 36, 40, 45, 50, 60, 64, 80, 90, 100, 120, 160, 200, 240, 280
    # example: 7200, it has prime factors 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 20, 24, 30
	likelihood: None
	token_likelihoods: None
}]