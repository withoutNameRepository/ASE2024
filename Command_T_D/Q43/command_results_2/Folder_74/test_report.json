{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests43_74_2.py::test_list_of_primes", "location": ["tests43_74_2.py", 4, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests43_74_2.py": 1, "Folder_74": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001417659987055231, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "65bb2b066fbb459996915e203137c3a1", "node": "<WorkerController gw0>"}
{"nodeid": "tests43_74_2.py::test_list_of_non_prime_nums", "location": ["tests43_74_2.py", 16, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests43_74_2.py": 1, "Folder_74": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001695179998932872, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "65bb2b066fbb459996915e203137c3a1", "node": "<WorkerController gw1>"}
{"nodeid": "tests43_74_2.py::test_list_of_primes", "location": ["tests43_74_2.py", 4, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests43_74_2.py": 1, "Folder_74": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command/Q43/command_results_2/Folder_74/generated_answer.py", "lineno": 4, "message": "TypeError: list indices must be integers or slices, not float"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_primes():", "        for n in [2, 3, 5, 7, 11, 13, 17]:", "            list_of_primes = [n for _ in range(75 * 10)]", "            expected_result = list_of_primes[23:75 + 1]", ">           assert find_primes_between_indices(list_of_primes) == expected_result"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_2/Folder_74/tests43_74_2.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def find_primes_between_indices(nums):", "        primes = []", "        for index in range(23, 75):", ">           if all(nums[index] % i for i in range(2, int(nums[index ** 0.5] ** 0.5) + 1)):", "E           TypeError: list indices must be integers or slices, not float"], "reprfuncargs": {"args": [["nums", "[2, 2, 2, 2, 2, 2, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_2/Folder_74/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_primes():", "        for n in [2, 3, 5, 7, 11, 13, 17]:", "            list_of_primes = [n for _ in range(75 * 10)]", "            expected_result = list_of_primes[23:75 + 1]", ">           assert find_primes_between_indices(list_of_primes) == expected_result"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_2/Folder_74/tests43_74_2.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def find_primes_between_indices(nums):", "        primes = []", "        for index in range(23, 75):", ">           if all(nums[index] % i for i in range(2, int(nums[index ** 0.5] ** 0.5) + 1)):", "E           TypeError: list indices must be integers or slices, not float"], "reprfuncargs": {"args": [["nums", "[2, 2, 2, 2, 2, 2, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q43/command_results_2/Folder_74/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command/Q43/command_results_2/Folder_74/generated_answer.py", "lineno": 4, "message": "TypeError: list indices must be integers or slices, not float"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0001485680004407186, "extra": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "65bb2b066fbb459996915e203137c3a1", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
