{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests50_52_3.py::test_list_of_many_strings_with_different_lengths", "location": ["tests50_52_3.py", 16, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests50_52_3.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011380399882909842, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "af6606cdd4c244a288f45e0a01915242", "node": "<WorkerController gw1>"}
{"nodeid": "tests50_52_3.py::test_list_of_strings_of_length_two", "location": ["tests50_52_3.py", 6, "test_list_of_strings_of_length_two"], "keywords": {"test_list_of_strings_of_length_two": 1, "tests50_52_3.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001342409996141214, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "af6606cdd4c244a288f45e0a01915242", "node": "<WorkerController gw0>"}
{"nodeid": "tests50_52_3.py::test_list_of_many_strings_with_different_lengths", "location": ["tests50_52_3.py", 16, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests50_52_3.py": 1, "Folder_52": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 665, "message": "TypeError: unsupported operand type(s) for +: 'function' and 'int'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_many_strings_with_different_lengths():", "        l = ['a' * i for i in range(3, 10)]", ">       assert not if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_3/Folder_52/tests50_52_3.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    res = collections.Counter(lst, key=lambda x: x.lower())"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_3/Folder_52/generated_answer.py", "lineno": 3, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.update(iterable, **kwds)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 577, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.update(kwds)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 672, "message": "in update"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in the some of original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", ">                       self[elem] = count + self_get(elem, 0)", "E                       TypeError: unsupported operand type(s) for +: 'function' and 'int'"], "reprfuncargs": {"args": [["self", "Counter({'aaa': 1, 'aaaa': 1, 'aaaaa': 1, 'aaaaaa': 1, 'aaaaaaa': 1, 'aaaaaaaa': 1, 'aaaaaaaaa': 1})"], ["iterable", "{'key': <function if_contains_anagrams.<locals>.<lambda> at 0x7f1341fb4700>}"], ["kwds", "{}"], ["self_get", "<built-in method get of Counter object at 0x7f13442cff10>"], ["elem", "'key'"], ["count", "<function if_contains_anagrams.<locals>.<lambda> at 0x7f1341fb4700>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 665, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_many_strings_with_different_lengths():", "        l = ['a' * i for i in range(3, 10)]", ">       assert not if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_3/Folder_52/tests50_52_3.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    res = collections.Counter(lst, key=lambda x: x.lower())"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_3/Folder_52/generated_answer.py", "lineno": 3, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.update(iterable, **kwds)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 577, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.update(kwds)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 672, "message": "in update"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in the some of original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", ">                       self[elem] = count + self_get(elem, 0)", "E                       TypeError: unsupported operand type(s) for +: 'function' and 'int'"], "reprfuncargs": {"args": [["self", "Counter({'aaa': 1, 'aaaa': 1, 'aaaaa': 1, 'aaaaaa': 1, 'aaaaaaa': 1, 'aaaaaaaa': 1, 'aaaaaaaaa': 1})"], ["iterable", "{'key': <function if_contains_anagrams.<locals>.<lambda> at 0x7f1341fb4700>}"], ["kwds", "{}"], ["self_get", "<built-in method get of Counter object at 0x7f13442cff10>"], ["elem", "'key'"], ["count", "<function if_contains_anagrams.<locals>.<lambda> at 0x7f1341fb4700>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 665, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/collections/__init__.py", "lineno": 665, "message": "TypeError: unsupported operand type(s) for +: 'function' and 'int'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00017213300088769756, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "af6606cdd4c244a288f45e0a01915242", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
