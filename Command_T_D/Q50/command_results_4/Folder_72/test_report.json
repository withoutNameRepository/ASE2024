{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests50_72_4.py::test_list_of_many_strings_with_different_lengths", "location": ["tests50_72_4.py", 16, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests50_72_4.py": 1, "Folder_72": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013740700160269625, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "755cdaba79d84138af2e22787d21db91", "node": "<WorkerController gw1>"}
{"nodeid": "tests50_72_4.py::test_list_of_strings_of_length_two", "location": ["tests50_72_4.py", 6, "test_list_of_strings_of_length_two"], "keywords": {"test_list_of_strings_of_length_two": 1, "tests50_72_4.py": 1, "Folder_72": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016407699877163395, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "755cdaba79d84138af2e22787d21db91", "node": "<WorkerController gw0>"}
{"nodeid": "tests50_72_4.py::test_list_of_strings_of_length_two", "location": ["tests50_72_4.py", 6, "test_list_of_strings_of_length_two"], "keywords": {"test_list_of_strings_of_length_two": 1, "tests50_72_4.py": 1, "Folder_72": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 969, "message": "re.error: unbalanced parenthesis at position 16"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_strings_of_length_two():", "        l = ['aa', 'aa'] * (55 + 1)", ">       assert not if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_4/Folder_72/tests50_72_4.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagram_regex = re.compile(\"(?i)(?=.*?[a-z]))(?!.*?[a-z])(.*?[a-z])\")"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_4/Folder_72/generated_answer.py", "lineno": 4, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 251, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse(str, flags=0, state=None):", "        # parse 're' pattern into list of (opcode, argument) tuples", "    ", "        source = Tokenizer(str)", "    ", "        if state is None:", "            state = State()", "        state.flags = flags", "        state.str = str", "    ", "        try:", "            p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)", "        except Verbose:", "            # the VERBOSE flag was switched on inside the pattern.  to be", "            # on the safe side, we'll parse the whole thing again...", "            state = State()", "            state.flags = flags | SRE_FLAG_VERBOSE", "            state.str = str", "            source.seek(0)", "            p = _parse_sub(source, state, True, 0)", "    ", "        p.state.flags = fix_flags(str, p.state.flags)", "    ", "        if source.next is not None:", "            assert source.next == \")\"", ">           raise source.error(\"unbalanced parenthesis\")", "E           re.error: unbalanced parenthesis at position 16"], "reprfuncargs": {"args": [["str", "'(?i)(?=.*?[a-z]))(?!.*?[a-z])(.*?[a-z])'"], ["flags", "0"], ["state", "<sre_parse.State object at 0x7f50da1aa620>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 969, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_strings_of_length_two():", "        l = ['aa', 'aa'] * (55 + 1)", ">       assert not if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_4/Folder_72/tests50_72_4.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagram_regex = re.compile(\"(?i)(?=.*?[a-z]))(?!.*?[a-z])(.*?[a-z])\")"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q50/command_results_4/Folder_72/generated_answer.py", "lineno": 4, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 251, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse(str, flags=0, state=None):", "        # parse 're' pattern into list of (opcode, argument) tuples", "    ", "        source = Tokenizer(str)", "    ", "        if state is None:", "            state = State()", "        state.flags = flags", "        state.str = str", "    ", "        try:", "            p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)", "        except Verbose:", "            # the VERBOSE flag was switched on inside the pattern.  to be", "            # on the safe side, we'll parse the whole thing again...", "            state = State()", "            state.flags = flags | SRE_FLAG_VERBOSE", "            state.str = str", "            source.seek(0)", "            p = _parse_sub(source, state, True, 0)", "    ", "        p.state.flags = fix_flags(str, p.state.flags)", "    ", "        if source.next is not None:", "            assert source.next == \")\"", ">           raise source.error(\"unbalanced parenthesis\")", "E           re.error: unbalanced parenthesis at position 16"], "reprfuncargs": {"args": [["str", "'(?i)(?=.*?[a-z]))(?!.*?[a-z])(.*?[a-z])'"], ["flags", "0"], ["state", "<sre_parse.State object at 0x7f50da1aa620>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 969, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 969, "message": "re.error: unbalanced parenthesis at position 16"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00018543799887993373, "extra": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "755cdaba79d84138af2e22787d21db91", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
