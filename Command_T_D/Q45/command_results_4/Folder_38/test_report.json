{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests45_38_4.py::test_string_of_spaces", "location": ["tests45_38_4.py", 16, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests45_38_4.py": 1, "Folder_38": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001546200001030229, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "a1b3a1a341f3437c9a715b59c701a340", "node": "<WorkerController gw1>"}
{"nodeid": "tests45_38_4.py::test_string_of_similar_chars", "location": ["tests45_38_4.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests45_38_4.py": 1, "Folder_38": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016792499809525907, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "a1b3a1a341f3437c9a715b59c701a340", "node": "<WorkerController gw0>"}
{"nodeid": "tests45_38_4.py::test_string_of_spaces", "location": ["tests45_38_4.py", 16, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests45_38_4.py": 1, "Folder_38": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 350, "message": "re.error: bad escape \\T at position 74"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces():", "        s = ' ' * (8 * 2)", ">       assert not palindromes_between_indices(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q45/command_results_4/Folder_38/tests45_38_4.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.findall(r\"((?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[@#$%&*])(?=.*?[!<>?/])(?=.*?[ \\t])\".upper(), s[3:-9], flags=re.I)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q45/command_results_4/Folder_38/generated_answer.py", "lineno": 3, "message": "in palindromes_between_indices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 240, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 755, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code1 = _class_escape(source, this)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 555, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _class_escape(source, escape):", "        # handle escape code inside character class", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        code = CATEGORIES.get(escape)", "        if code and code[0] is IN:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape (exactly two digits)", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}'))", "                return LITERAL, c", "            elif c in OCTDIGITS:", "                # octal escape (up to three digits)", "                escape += source.getwhile(2, OCTDIGITS)", "                c = int(escape[1:], 8)", "                if c > 0o377:", "                    raise source.error('octal escape value %s outside of '", "                                       'range 0-0o377' % escape, len(escape))", "                return LITERAL, c", "            elif c in DIGITS:", "                raise ValueError", "            if len(escape) == 2:", "                if c in ASCIILETTERS:", ">                   raise source.error('bad escape %s' % escape, len(escape))", "E                   re.error: bad escape \\T at position 74"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f4fab3d02e0>"], ["escape", "'\\\\T'"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 350, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces():", "        s = ' ' * (8 * 2)", ">       assert not palindromes_between_indices(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q45/command_results_4/Folder_38/tests45_38_4.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.findall(r\"((?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[@#$%&*])(?=.*?[!<>?/])(?=.*?[ \\t])\".upper(), s[3:-9], flags=re.I)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q45/command_results_4/Folder_38/generated_answer.py", "lineno": 3, "message": "in palindromes_between_indices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 240, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 755, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code1 = _class_escape(source, this)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 555, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _class_escape(source, escape):", "        # handle escape code inside character class", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        code = CATEGORIES.get(escape)", "        if code and code[0] is IN:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape (exactly two digits)", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}'))", "                return LITERAL, c", "            elif c in OCTDIGITS:", "                # octal escape (up to three digits)", "                escape += source.getwhile(2, OCTDIGITS)", "                c = int(escape[1:], 8)", "                if c > 0o377:", "                    raise source.error('octal escape value %s outside of '", "                                       'range 0-0o377' % escape, len(escape))", "                return LITERAL, c", "            elif c in DIGITS:", "                raise ValueError", "            if len(escape) == 2:", "                if c in ASCIILETTERS:", ">                   raise source.error('bad escape %s' % escape, len(escape))", "E                   re.error: bad escape \\T at position 74"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f4fab3d02e0>"], ["escape", "'\\\\T'"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 350, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 350, "message": "re.error: bad escape \\T at position 74"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00023456000053556636, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "a1b3a1a341f3437c9a715b59c701a340", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
