{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests17_37_2.py::test_list_of_zeros", "location": ["tests17_37_2.py", 3, "test_list_of_zeros"], "keywords": {"test_list_of_zeros": 1, "tests17_37_2.py": 1, "Folder_37": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002297790488228202, "start": 1701450574.8767972, "stop": 1701450574.877028, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "9b0b4975b4a4431c98b8723e93d101c3", "node": "<WorkerController gw0>"}
{"nodeid": "tests17_37_2.py::test_negate_of_lists", "location": ["tests17_37_2.py", 16, "test_negate_of_lists"], "keywords": {"test_negate_of_lists": 1, "tests17_37_2.py": 1, "Folder_37": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002149940701201558, "start": 1701450574.8778994, "stop": 1701450574.8781154, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "9b0b4975b4a4431c98b8723e93d101c3", "node": "<WorkerController gw1>"}
{"nodeid": "tests17_37_2.py::test_list_of_zeros", "location": ["tests17_37_2.py", 3, "test_list_of_zeros"], "keywords": {"test_list_of_zeros": 1, "tests17_37_2.py": 1, "Folder_37": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q17/command_results_2/Folder_37/generated_answer.py", "lineno": 5, "message": "TypeError: unsupported operand type(s) for %: 'list' and 'int'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_zeros():", "        list_of_zeros = [0 for i in range(0, 5 * (7 + 1))]", "        expected_list = [0 for i in range(2, 7 + 1)]", ">       assert all_ints_div_by_both_two_nums(list_of_zeros) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q17/command_results_2/Folder_37/tests17_37_2.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_ints_div_by_both_two_nums(nums):", ">       mask = np.logical_and(nums % -1 == 0, np.logical_and(nums % -7 == 0, np.logical_and(nums >= 2, nums <= 7)))", "E       TypeError: unsupported operand type(s) for %: 'list' and 'int'"], "reprfuncargs": {"args": [["nums", "[0, 0, 0, 0, 0, 0, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q17/command_results_2/Folder_37/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_zeros():", "        list_of_zeros = [0 for i in range(0, 5 * (7 + 1))]", "        expected_list = [0 for i in range(2, 7 + 1)]", ">       assert all_ints_div_by_both_two_nums(list_of_zeros) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q17/command_results_2/Folder_37/tests17_37_2.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_ints_div_by_both_two_nums(nums):", ">       mask = np.logical_and(nums % -1 == 0, np.logical_and(nums % -7 == 0, np.logical_and(nums >= 2, nums <= 7)))", "E       TypeError: unsupported operand type(s) for %: 'list' and 'int'"], "reprfuncargs": {"args": [["nums", "[0, 0, 0, 0, 0, 0, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q17/command_results_2/Folder_37/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q17/command_results_2/Folder_37/generated_answer.py", "lineno": 5, "message": "TypeError: unsupported operand type(s) for %: 'list' and 'int'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00021049391943961382, "start": 1701450574.8773816, "stop": 1701450574.8775928, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "9b0b4975b4a4431c98b8723e93d101c3", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
