{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests56_65_2.py::test_same_character_string", "location": ["tests56_65_2.py", 18, "test_same_character_string"], "keywords": {"test_same_character_string": 1, "tests56_65_2.py": 1, "Folder_65": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00022598199575440958, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "519730a64b3746fb91386044a792148c", "node": "<WorkerController gw2>"}
{"nodeid": "tests56_65_2.py::test_string_of_same_character", "location": ["tests56_65_2.py", 5, "test_string_of_same_character"], "keywords": {"test_string_of_same_character": 1, "tests56_65_2.py": 1, "Folder_65": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00024971699895104393, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "519730a64b3746fb91386044a792148c", "node": "<WorkerController gw0>"}
{"nodeid": "tests56_65_2.py::test_large_string", "location": ["tests56_65_2.py", 23, "test_large_string"], "keywords": {"test_large_string": 1, "tests56_65_2.py": 1, "Folder_65": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00022376800188794732, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw3", "testrun_uid": "519730a64b3746fb91386044a792148c", "node": "<WorkerController gw3>"}
{"nodeid": "tests56_65_2.py::test_one_character_string", "location": ["tests56_65_2.py", 12, "test_one_character_string"], "keywords": {"test_one_character_string": 1, "tests56_65_2.py": 1, "Folder_65": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002447780061629601, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "519730a64b3746fb91386044a792148c", "node": "<WorkerController gw1>"}
{"nodeid": "tests56_65_2.py::test_length_of_substring_result", "location": ["tests56_65_2.py", 32, "test_length_of_substring_result"], "keywords": {"test_length_of_substring_result": 1, "tests56_65_2.py": 1, "Folder_65": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00026647999766282737, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "519730a64b3746fb91386044a792148c", "node": "<WorkerController gw4>"}
{"nodeid": "tests56_65_2.py::test_same_character_string", "location": ["tests56_65_2.py", 18, "test_same_character_string"], "keywords": {"test_same_character_string": 1, "tests56_65_2.py": 1, "Folder_65": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 550, "message": "re.error: unterminated character set at position 1"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_same_character_string():", "        s = 'a' * 81", ">       assert not all_substring_of_size_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_2/Folder_65/tests56_65_2.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.findall(r'([^]*){80}', s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_2/Folder_65/generated_answer.py", "lineno": 5, "message": "in all_substring_of_size_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 240, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", ">                       raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "E                       re.error: unterminated character set at position 1"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f65403a0370>"], ["state", "<sre_parse.State object at 0x7f65403a0430>"], ["verbose", "0"], ["nested", "3"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 550, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_same_character_string():", "        s = 'a' * 81", ">       assert not all_substring_of_size_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_2/Folder_65/tests56_65_2.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.findall(r'([^]*){80}', s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_2/Folder_65/generated_answer.py", "lineno": 5, "message": "in all_substring_of_size_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 240, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", ">                       raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "E                       re.error: unterminated character set at position 1"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f65403a0370>"], ["state", "<sre_parse.State object at 0x7f65403a0430>"], ["verbose", "0"], ["nested", "3"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 550, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 550, "message": "re.error: unterminated character set at position 1"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00034405799669912085, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "519730a64b3746fb91386044a792148c", "node": "<WorkerController gw2>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
