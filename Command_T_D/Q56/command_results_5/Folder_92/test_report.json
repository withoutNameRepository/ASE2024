{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests56_92_5.py::test_same_character_string", "location": ["tests56_92_5.py", 18, "test_same_character_string"], "keywords": {"test_same_character_string": 1, "tests56_92_5.py": 1, "Folder_92": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00020740699983434752, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "44ff5ee24bab42d290a7f315856bab6d", "node": "<WorkerController gw2>"}
{"nodeid": "tests56_92_5.py::test_large_string", "location": ["tests56_92_5.py", 23, "test_large_string"], "keywords": {"test_large_string": 1, "tests56_92_5.py": 1, "Folder_92": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00029262899624882266, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw3", "testrun_uid": "44ff5ee24bab42d290a7f315856bab6d", "node": "<WorkerController gw3>"}
{"nodeid": "tests56_92_5.py::test_one_character_string", "location": ["tests56_92_5.py", 12, "test_one_character_string"], "keywords": {"test_one_character_string": 1, "tests56_92_5.py": 1, "Folder_92": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002440370008116588, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "44ff5ee24bab42d290a7f315856bab6d", "node": "<WorkerController gw1>"}
{"nodeid": "tests56_92_5.py::test_length_of_substring_result", "location": ["tests56_92_5.py", 32, "test_length_of_substring_result"], "keywords": {"test_length_of_substring_result": 1, "tests56_92_5.py": 1, "Folder_92": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.000352102993929293, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "44ff5ee24bab42d290a7f315856bab6d", "node": "<WorkerController gw4>"}
{"nodeid": "tests56_92_5.py::test_string_of_same_character", "location": ["tests56_92_5.py", 5, "test_string_of_same_character"], "keywords": {"test_string_of_same_character": 1, "tests56_92_5.py": 1, "Folder_92": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00035863600351149216, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "44ff5ee24bab42d290a7f315856bab6d", "node": "<WorkerController gw0>"}
{"nodeid": "tests56_92_5.py::test_length_of_substring_result", "location": ["tests56_92_5.py", 32, "test_length_of_substring_result"], "keywords": {"test_length_of_substring_result": 1, "tests56_92_5.py": 1, "Folder_92": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 424, "message": "re.error: invalid group reference 2 at position 11"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_substring_result():", "        if 9 < 50:", "            s = ''.join(random.sample(string.ascii_letters + string.digits, k=9 + 10))", "        else:", "            s = ''.join(random.choices(string.ascii_letters + string.digits, k=9 + 10))", "    ", ">       output = all_substring_of_size_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_5/Folder_92/tests56_92_5.py", "lineno": 39, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return [m.group() for m in re.finditer(r'(?=.)(.)\\1\\2\\3\\4\\5\\6\\7\\8\\9', s)]"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_5/Folder_92/generated_answer.py", "lineno": 3, "message": "in all_substring_of_size_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).finditer(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 247, "message": "in finditer"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 526, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}'))", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 11"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f48da1444c0>"], ["escape", "'\\\\2'"], ["state", "<sre_parse.State object at 0x7f48da144460>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 424, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_substring_result():", "        if 9 < 50:", "            s = ''.join(random.sample(string.ascii_letters + string.digits, k=9 + 10))", "        else:", "            s = ''.join(random.choices(string.ascii_letters + string.digits, k=9 + 10))", "    ", ">       output = all_substring_of_size_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_5/Folder_92/tests56_92_5.py", "lineno": 39, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return [m.group() for m in re.finditer(r'(?=.)(.)\\1\\2\\3\\4\\5\\6\\7\\8\\9', s)]"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q56/command_results_5/Folder_92/generated_answer.py", "lineno": 3, "message": "in all_substring_of_size_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).finditer(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 247, "message": "in finditer"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 526, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}'))", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 11"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f48da1444c0>"], ["escape", "'\\\\2'"], ["state", "<sre_parse.State object at 0x7f48da144460>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 424, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 424, "message": "re.error: invalid group reference 2 at position 11"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00029350000113481656, "extra": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "44ff5ee24bab42d290a7f315856bab6d", "node": "<WorkerController gw4>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
