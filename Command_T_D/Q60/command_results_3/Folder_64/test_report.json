{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_64_3.py::test_if_result_is_less_than_equal_to_4", "location": ["tests60_64_3.py", 43, "test_if_result_is_less_than_equal_to_4"], "keywords": {"test_if_result_is_less_than_equal_to_4": 1, "tests60_64_3.py": 1, "Folder_64": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.830199996940792e-05, "start": 1701018634.6705997, "stop": 1701018634.6706984, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "4c6a9a553ab94525bd05719e8e5f0f48", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_64_3.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_64_3.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_64_3.py": 1, "Folder_64": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014771500718779862, "start": 1701018634.6707175, "stop": 1701018634.670866, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "4c6a9a553ab94525bd05719e8e5f0f48", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_64_3.py::test_if_result_is_less_than_equal_to_4", "location": ["tests60_64_3.py", 43, "test_if_result_is_less_than_equal_to_4"], "keywords": {"test_if_result_is_less_than_equal_to_4": 1, "tests60_64_3.py": 1, "Folder_64": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_3/Folder_64/generated_answer.py", "lineno": 4, "message": "ValueError: invalid literal for int() with base 10: ')'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_4():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(4 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_3/Folder_64/tests60_64_3.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        res = []", ">       for i in range(2, int(str(x)[-1]) + 1):", "E       ValueError: invalid literal for int() with base 10: ')'"], "reprfuncargs": {"args": [["x", "(84, 397, 303, 20, 196)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_3/Folder_64/generated_answer.py", "lineno": 4, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_4():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(4 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_3/Folder_64/tests60_64_3.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        res = []", ">       for i in range(2, int(str(x)[-1]) + 1):", "E       ValueError: invalid literal for int() with base 10: ')'"], "reprfuncargs": {"args": [["x", "(84, 397, 303, 20, 196)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_3/Folder_64/generated_answer.py", "lineno": 4, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_3/Folder_64/generated_answer.py", "lineno": 4, "message": "ValueError: invalid literal for int() with base 10: ')'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00011397700291126966, "start": 1701018634.6708827, "stop": 1701018634.670997, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "4c6a9a553ab94525bd05719e8e5f0f48", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
