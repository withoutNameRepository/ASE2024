{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_81_4.py::test_if_result_is_less_than_equal_to_98", "location": ["tests60_81_4.py", 43, "test_if_result_is_less_than_equal_to_98"], "keywords": {"test_if_result_is_less_than_equal_to_98": 1, "tests60_81_4.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.513599798083305e-05, "start": 1701018907.893402, "stop": 1701018907.8934977, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "d84642f2ac6142469677c24e891e4c3a", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_81_4.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_81_4.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_81_4.py": 1, "Folder_81": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011091900523751974, "start": 1701018907.893579, "stop": 1701018907.8936906, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "d84642f2ac6142469677c24e891e4c3a", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_81_4.py::test_if_result_is_less_than_equal_to_98", "location": ["tests60_81_4.py", 43, "test_if_result_is_less_than_equal_to_98"], "keywords": {"test_if_result_is_less_than_equal_to_98": 1, "tests60_81_4.py": 1, "Folder_81": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_4/Folder_81/generated_answer.py", "lineno": 4, "message": "TypeError: unsupported operand type(s) for +: 'range' and 'list'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_98():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(98 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_81/tests60_81_4.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x_list):", "        x = x_list[98]", ">       return sorted(set(range(2, x+1)) - set(range(2, x+1, 10**(x//2)) + [x]))", "E       TypeError: unsupported operand type(s) for +: 'range' and 'list'"], "reprfuncargs": {"args": [["x_list", "(395, 138, 917, 634, 95, 398, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_81/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_98():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(98 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_81/tests60_81_4.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x_list):", "        x = x_list[98]", ">       return sorted(set(range(2, x+1)) - set(range(2, x+1, 10**(x//2)) + [x]))", "E       TypeError: unsupported operand type(s) for +: 'range' and 'list'"], "reprfuncargs": {"args": [["x_list", "(395, 138, 917, 634, 95, 398, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_81/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_4/Folder_81/generated_answer.py", "lineno": 4, "message": "TypeError: unsupported operand type(s) for +: 'range' and 'list'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00015060699661262333, "start": 1701018907.893654, "stop": 1701018907.893805, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "d84642f2ac6142469677c24e891e4c3a", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
