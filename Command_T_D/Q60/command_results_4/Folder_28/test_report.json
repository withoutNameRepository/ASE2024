{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_28_4.py::test_if_result_is_less_than_equal_to_19", "location": ["tests60_28_4.py", 43, "test_if_result_is_less_than_equal_to_19"], "keywords": {"test_if_result_is_less_than_equal_to_19": 1, "tests60_28_4.py": 1, "Folder_28": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013691099593415856, "start": 1701018837.7236984, "stop": 1701018837.723836, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "cbd4561fed244e65b07c6f5bd00a5db0", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_28_4.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_28_4.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_28_4.py": 1, "Folder_28": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00018051598453894258, "start": 1701018837.7236972, "stop": 1701018837.7238786, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "cbd4561fed244e65b07c6f5bd00a5db0", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_28_4.py::test_if_result_is_less_than_equal_to_19", "location": ["tests60_28_4.py", 43, "test_if_result_is_less_than_equal_to_19"], "keywords": {"test_if_result_is_less_than_equal_to_19": 1, "tests60_28_4.py": 1, "Folder_28": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_4/Folder_28/generated_answer.py", "lineno": 5, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_19():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(19 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_28/tests60_28_4.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(n):", ">       return sorted(set(itertools.permutations(range(2, n + 1), 2)), key=lambda x: str(x))", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["n", "(422, 777, 914, 579, 216, 877, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_28/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_19():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(19 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_28/tests60_28_4.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(n):", ">       return sorted(set(itertools.permutations(range(2, n + 1), 2)), key=lambda x: str(x))", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["n", "(422, 777, 914, 579, 216, 877, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_4/Folder_28/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_4/Folder_28/generated_answer.py", "lineno": 5, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00012413301737979054, "start": 1701018837.7239985, "stop": 1701018837.7241232, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "cbd4561fed244e65b07c6f5bd00a5db0", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
