[cohere.Generation {
	id: c10481a4-85b6-4d93-b563-74741d331514
	prompt: Here is a text specification delimited by angle brackets. Create Python code according to the text specification. <Write a function called 'all_left_right_truncatable_prime' that takes one argument which is a tuple of positive integers. Let x be the integer at index 96. The function should return the list of all left-and-right-truncatable prime numbers less than or equal to x. The return list should be sorted in descending order. If no left-and-right-truncatable prime number exists in the specified range, the function should return an empty list. A left-and-right-truncatable prime number is a prime number that contains no 0 and remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime.> The Python code should not contain any comments. The Python code should be delimited only by triple backticks.
	text: 
```python
def all_left_right_truncatable_prime(n):
    for i in range(2, n[0] + 1):
        if is_left_right_truncatable_prime(i):
            yield i
    for i in range(n[1], n[0] + 1, -1):
        if is_left_right_truncatable_prime(i):
            yield i

def is_left_right_truncatable_prime(n):
    if not is_prime(n):
        return False
    s = str(n)
    if not s[0] or not s[-1]:
        return False
    if s[0] == s[-1]:
        return False
    if s[0] == '0':
        return False
    if len(s) == 1:
        return True
    if s[1] == '0':
        return False
    return True

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    maxDivisor = int(math.ceil(math.sqrt(n)))
    if n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, maxDivisor + 1):
        if n % i == 0:
            return False
    return True
```
	likelihood: None
	token_likelihoods: None
}]