{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_19_5.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_19_5.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_19_5.py": 1, "Folder_19": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014359501074068248, "start": 1701019081.2807238, "stop": 1701019081.2808678, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "9710848f3d994642872d49750cfc0cfb", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_19_5.py::test_if_result_is_less_than_equal_to_67", "location": ["tests60_19_5.py", 43, "test_if_result_is_less_than_equal_to_67"], "keywords": {"test_if_result_is_less_than_equal_to_67": 1, "tests60_19_5.py": 1, "Folder_19": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012289799633435905, "start": 1701019081.280758, "stop": 1701019081.2808812, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "9710848f3d994642872d49750cfc0cfb", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_19_5.py::test_if_result_is_less_than_equal_to_67", "location": ["tests60_19_5.py", 43, "test_if_result_is_less_than_equal_to_67"], "keywords": {"test_if_result_is_less_than_equal_to_67": 1, "tests60_19_5.py": 1, "Folder_19": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_5/Folder_19/generated_answer.py", "lineno": 4, "message": "TypeError: can only concatenate str (not \"int\") to str"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_67():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(67 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_19/tests60_19_5.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x_range):", "        res = []", ">       for n in range(3, int(str(x_range[0])[0] + 1) + 1):", "E       TypeError: can only concatenate str (not \"int\") to str"], "reprfuncargs": {"args": [["x_range", "(18, 461, 549, 900, 785, 690, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_19/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_67():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(67 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_19/tests60_19_5.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x_range):", "        res = []", ">       for n in range(3, int(str(x_range[0])[0] + 1) + 1):", "E       TypeError: can only concatenate str (not \"int\") to str"], "reprfuncargs": {"args": [["x_range", "(18, 461, 549, 900, 785, 690, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_19/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_5/Folder_19/generated_answer.py", "lineno": 4, "message": "TypeError: can only concatenate str (not \"int\") to str"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00012822600547224283, "start": 1701019081.2810493, "stop": 1701019081.281178, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "9710848f3d994642872d49750cfc0cfb", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
