{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_37_5.py::test_if_result_is_less_than_equal_to_35", "location": ["tests60_37_5.py", 43, "test_if_result_is_less_than_equal_to_35"], "keywords": {"test_if_result_is_less_than_equal_to_35": 1, "tests60_37_5.py": 1, "Folder_37": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012118200538679957, "start": 1701019093.5484047, "stop": 1701019093.5485263, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "b950fff799b54c4dbe1e797865eebbfa", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_37_5.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_37_5.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_37_5.py": 1, "Folder_37": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013568499707616866, "start": 1701019093.5485137, "stop": 1701019093.54865, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "b950fff799b54c4dbe1e797865eebbfa", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_37_5.py::test_if_result_is_less_than_equal_to_35", "location": ["tests60_37_5.py", 43, "test_if_result_is_less_than_equal_to_35"], "keywords": {"test_if_result_is_less_than_equal_to_35": 1, "tests60_37_5.py": 1, "Folder_37": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_5/Folder_37/generated_answer.py", "lineno": 4, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_35():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(35 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_37/tests60_37_5.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        # your code here", ">       return sorted([y for y in range(2, x + 1) if all(str(y).count(d) == 1 for d in str(y) if d == '0')], reverse=True)", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(189, 350, 712, 347, 63, 956, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_37/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_35():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(35 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_37/tests60_37_5.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        # your code here", ">       return sorted([y for y in range(2, x + 1) if all(str(y).count(d) == 1 for d in str(y) if d == '0')], reverse=True)", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(189, 350, 712, 347, 63, 956, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_5/Folder_37/generated_answer.py", "lineno": 4, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_5/Folder_37/generated_answer.py", "lineno": 4, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00014258502051234245, "start": 1701019093.5487187, "stop": 1701019093.5488617, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "b950fff799b54c4dbe1e797865eebbfa", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
