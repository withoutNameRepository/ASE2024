
def all_left_right_truncatable_prime(n):
    return sorted(list(filter(lambda x: x > 9 and is_prime(x) and is_left_right_truncatable_prime(x), range(10, n + 1))), reverse=True)

def is_left_right_truncatable_prime(n):
    return is_prime(n) and not (str(n) in ["10", "99", "999", "9999", "99999", "99999", "99 999", "99 9999", "999 999", "9999 999", "9999 9999", "99999 99999", "99999 999999", "99999 999999", "99999 999999", "99 9999 999999", "999 9999 999999", "9999 9999 999999", "99999 999999 999999", "99999 999999 999999", "99999 999999 999999", "99 9999 999999 999999", "999 9999 999999 999999", "9999 9999 999999 999999", "99999 999999 999999 999999", "99999 999999 999999 999999", "99 9999 999999 999999 999999", "999 9999 999999 999999 999999", "9999 9999 999999 999999 999999", "99999 999999 999999 999999 999999", "99 9999 999999 999999 999999 999999", "999 9999 999999 999999 999999 999999", "9999 9999 999999 999999 999999 999999", "99999 999999 999999 999999 999999 999999", "99 9999 999999 999999 999999 999999 999999", "999 9999 999999 999999 999999 999999 999999", "9999 9999 999999 999999 999999 999999 999999", "99999 999999 999999 999999 999999 999999 999999"]))

def is_prime(n):
    return n > 1 and all(n % i != 0 for i in range(2, int(n ** .5) + 1))
