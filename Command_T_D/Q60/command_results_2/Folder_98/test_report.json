{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_98_2.py::test_if_result_is_less_than_equal_to_8", "location": ["tests60_98_2.py", 43, "test_if_result_is_less_than_equal_to_8"], "keywords": {"test_if_result_is_less_than_equal_to_8": 1, "tests60_98_2.py": 1, "Folder_98": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001029720006044954, "start": 1701018592.1094372, "stop": 1701018592.1095407, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "5452bd981ee048fb909406cd0f7145d1", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_98_2.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_98_2.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_98_2.py": 1, "Folder_98": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001421229972038418, "start": 1701018592.109558, "stop": 1701018592.1097007, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "5452bd981ee048fb909406cd0f7145d1", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_98_2.py::test_if_result_is_less_than_equal_to_8", "location": ["tests60_98_2.py", 43, "test_if_result_is_less_than_equal_to_8"], "keywords": {"test_if_result_is_less_than_equal_to_8": 1, "tests60_98_2.py": 1, "Folder_98": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_98/generated_answer.py", "lineno": 5, "message": "TypeError: can only concatenate str (not \"int\") to str"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_8():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(8 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_98/tests60_98_2.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(tup):", "        lst = []", "        n = tup[8]", ">       for i in range(3, int(str(n)[-1] + 1)):", "E       TypeError: can only concatenate str (not \"int\") to str"], "reprfuncargs": {"args": [["tup", "(1000, 903, 169, 825, 584, 267, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_98/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_8():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(8 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_98/tests60_98_2.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(tup):", "        lst = []", "        n = tup[8]", ">       for i in range(3, int(str(n)[-1] + 1)):", "E       TypeError: can only concatenate str (not \"int\") to str"], "reprfuncargs": {"args": [["tup", "(1000, 903, 169, 825, 584, 267, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_98/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_98/generated_answer.py", "lineno": 5, "message": "TypeError: can only concatenate str (not \"int\") to str"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00011672600521706045, "start": 1701018592.1097324, "stop": 1701018592.1098497, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "5452bd981ee048fb909406cd0f7145d1", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
