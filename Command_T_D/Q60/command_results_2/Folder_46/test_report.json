{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_46_2.py::test_if_result_is_less_than_equal_to_33", "location": ["tests60_46_2.py", 43, "test_if_result_is_less_than_equal_to_33"], "keywords": {"test_if_result_is_less_than_equal_to_33": 1, "tests60_46_2.py": 1, "Folder_46": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 8.882000111043453e-05, "start": 1701018404.0711706, "stop": 1701018404.07126, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "766e4c56a9754fb5953f5f2ab380ad15", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_46_2.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_46_2.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_46_2.py": 1, "Folder_46": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00010880400077439845, "start": 1701018404.071238, "stop": 1701018404.0713475, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "766e4c56a9754fb5953f5f2ab380ad15", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_46_2.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_46_2.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_46_2.py": 1, "Folder_46": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_46/generated_answer.py", "lineno": 5, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_tuple_of_all_one_digit_nums():", "        for i in range(1,11):", "            input_tuple = (i,) * (33 + 1)", "            if i < 2:", ">               assert not all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_46/tests60_46_2.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", ">       return sorted(list(filter(left_right_truncatable_prime, range(2, x+1))))", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_46/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_tuple_of_all_one_digit_nums():", "        for i in range(1,11):", "            input_tuple = (i,) * (33 + 1)", "            if i < 2:", ">               assert not all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_46/tests60_46_2.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", ">       return sorted(list(filter(left_right_truncatable_prime, range(2, x+1))))", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_46/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_46/generated_answer.py", "lineno": 5, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00010658701648935676, "start": 1701018404.0715213, "stop": 1701018404.0716283, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "766e4c56a9754fb5953f5f2ab380ad15", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
