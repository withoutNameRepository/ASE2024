{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_42_2.py::test_if_result_is_less_than_equal_to_64", "location": ["tests60_42_2.py", 43, "test_if_result_is_less_than_equal_to_64"], "keywords": {"test_if_result_is_less_than_equal_to_64": 1, "tests60_42_2.py": 1, "Folder_42": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.852898074313998e-05, "start": 1701018402.1435573, "stop": 1701018402.1436563, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "6ee3d425ff2147faaadf3ae8917eea36", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_42_2.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_42_2.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_42_2.py": 1, "Folder_42": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013793198741041124, "start": 1701018402.1435578, "stop": 1701018402.1436963, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "6ee3d425ff2147faaadf3ae8917eea36", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_42_2.py::test_if_result_is_less_than_equal_to_64", "location": ["tests60_42_2.py", 43, "test_if_result_is_less_than_equal_to_64"], "keywords": {"test_if_result_is_less_than_equal_to_64": 1, "tests60_42_2.py": 1, "Folder_42": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_42/generated_answer.py", "lineno": 3, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_64():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(64 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_42/tests60_42_2.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", ">       return sorted(set(range(2, x + 1)), reverse=True) if x else []", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(107, 44, 321, 806, 499, 192, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_42/generated_answer.py", "lineno": 3, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_64():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(64 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_42/tests60_42_2.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", ">       return sorted(set(range(2, x + 1)), reverse=True) if x else []", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["x", "(107, 44, 321, 806, 499, 192, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_42/generated_answer.py", "lineno": 3, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_42/generated_answer.py", "lineno": 3, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0001251359935849905, "start": 1701018402.1438386, "stop": 1701018402.1439645, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "6ee3d425ff2147faaadf3ae8917eea36", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
