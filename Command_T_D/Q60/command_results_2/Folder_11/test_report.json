{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_11_2.py::test_if_result_is_less_than_equal_to_86", "location": ["tests60_11_2.py", 43, "test_if_result_is_less_than_equal_to_86"], "keywords": {"test_if_result_is_less_than_equal_to_86": 1, "tests60_11_2.py": 1, "Folder_11": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.384599979966879e-05, "start": 1701018379.7557542, "stop": 1701018379.7558486, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "cfba967fbbc9421fa359f3570121840f", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_11_2.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_11_2.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_11_2.py": 1, "Folder_11": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012177802273072302, "start": 1701018379.7558138, "stop": 1701018379.7559361, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "cfba967fbbc9421fa359f3570121840f", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_11_2.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_11_2.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_11_2.py": 1, "Folder_11": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_11/generated_answer.py", "lineno": 4, "message": "ValueError: too many values to unpack (expected 3)"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_tuple_of_all_one_digit_nums():", "        for i in range(1,11):", "            input_tuple = (i,) * (86 + 1)", "            if i < 2:", ">               assert not all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_11/tests60_11_2.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(test_case):", "        #nosec", ">       a, b, x = test_case", "E       ValueError: too many values to unpack (expected 3)"], "reprfuncargs": {"args": [["test_case", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_11/generated_answer.py", "lineno": 4, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_tuple_of_all_one_digit_nums():", "        for i in range(1,11):", "            input_tuple = (i,) * (86 + 1)", "            if i < 2:", ">               assert not all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_11/tests60_11_2.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(test_case):", "        #nosec", ">       a, b, x = test_case", "E       ValueError: too many values to unpack (expected 3)"], "reprfuncargs": {"args": [["test_case", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_2/Folder_11/generated_answer.py", "lineno": 4, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_2/Folder_11/generated_answer.py", "lineno": 4, "message": "ValueError: too many values to unpack (expected 3)"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0001075289910659194, "start": 1701018379.7561216, "stop": 1701018379.7562296, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "cfba967fbbc9421fa359f3570121840f", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
