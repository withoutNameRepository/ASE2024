[cohere.Generation {
	id: aa4b19b6-5f70-4940-9156-6daf112d1326
	prompt: Here is a text specification delimited by angle brackets. Create Python code according to the text specification. <Write a function called 'all_left_right_truncatable_prime' that takes one argument which is a tuple of positive integers. Let x be the integer at index 86. The function should return the list of all left-and-right-truncatable prime numbers less than or equal to x. The return list should be sorted in descending order. If no left-and-right-truncatable prime number exists in the specified range, the function should return an empty list. A left-and-right-truncatable prime number is a prime number that contains no 0 and remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime.> The Python code should not contain any comments. The Python code should be delimited only by triple backticks.
	text: 
```python
import re

PRIMES = set(map(str, range(2, 1000000)))
PRIMES = set(re.findall(r"2[13579]5[789]1[23]0[1-9]00", PRIMES))

def is_left_right_truncatable_prime(n):
    s = str(n)
    while s and s[0] != "2" and s[-1] != "0":
        s = s[1:-1]
    return s == "2" or s == "3"

def all_left_right_truncatable_prime(n):
    if not n:
        return []
    lst = sorted(n)
    for i in range(len(lst)):
        if lst[i] in PRIMES and is_left_right_truncatable_prime(lst[i]):
            yield lst[i]
            break
    for x in range(lst[-1], 3, -1):
        if x in PRIMES and is_left_right_truncatable_prime(x):
            yield x
            break
```
	likelihood: None
	token_likelihoods: None
}]