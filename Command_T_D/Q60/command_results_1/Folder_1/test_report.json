{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_1_1.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_1_1.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_1_1.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001242480066139251, "start": 1701018306.2209177, "stop": 1701018306.2210426, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "4d35b87e2fee4d93a178c8d9044795b7", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_1_1.py::test_if_result_is_less_than_equal_to_20", "location": ["tests60_1_1.py", 43, "test_if_result_is_less_than_equal_to_20"], "keywords": {"test_if_result_is_less_than_equal_to_20": 1, "tests60_1_1.py": 1, "Folder_1": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00010262499563395977, "start": 1701018306.220821, "stop": 1701018306.2209241, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "4d35b87e2fee4d93a178c8d9044795b7", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_1_1.py::test_if_result_is_less_than_equal_to_20", "location": ["tests60_1_1.py", 43, "test_if_result_is_less_than_equal_to_20"], "keywords": {"test_if_result_is_less_than_equal_to_20": 1, "tests60_1_1.py": 1, "Folder_1": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_1/Folder_1/generated_answer.py", "lineno": 5, "message": "TypeError: must be real number, not tuple"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_20():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(20 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_1/tests60_1_1.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        from itertools import count", "        from math import sqrt", ">       if sqrt(x) * 2 - 1 <= 1:", "E       TypeError: must be real number, not tuple"], "reprfuncargs": {"args": [["x", "(322, 52, 898, 649, 769, 328, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_1/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_20():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(20 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_1/tests60_1_1.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(x):", "        from itertools import count", "        from math import sqrt", ">       if sqrt(x) * 2 - 1 <= 1:", "E       TypeError: must be real number, not tuple"], "reprfuncargs": {"args": [["x", "(322, 52, 898, 649, 769, 328, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_1/generated_answer.py", "lineno": 5, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_1/Folder_1/generated_answer.py", "lineno": 5, "message": "TypeError: must be real number, not tuple"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00011083501158282161, "start": 1701018306.2210944, "stop": 1701018306.2212057, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "4d35b87e2fee4d93a178c8d9044795b7", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
