{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_98_1.py::test_if_result_is_less_than_equal_to_8", "location": ["tests60_98_1.py", 43, "test_if_result_is_less_than_equal_to_8"], "keywords": {"test_if_result_is_less_than_equal_to_8": 1, "tests60_98_1.py": 1, "Folder_98": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001690829813014716, "start": 1701018373.8923633, "stop": 1701018373.8925333, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "d4973632043b4c76ae03bf9c6b8a7a54", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_98_1.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_98_1.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_98_1.py": 1, "Folder_98": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00019041099585592747, "start": 1701018373.8924685, "stop": 1701018373.89266, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "d4973632043b4c76ae03bf9c6b8a7a54", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_98_1.py::test_if_result_is_less_than_equal_to_8", "location": ["tests60_98_1.py", 43, "test_if_result_is_less_than_equal_to_8"], "keywords": {"test_if_result_is_less_than_equal_to_8": 1, "tests60_98_1.py": 1, "Folder_98": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_1/Folder_98/generated_answer.py", "lineno": 3, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_8():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(8 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_98/tests60_98_1.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(n):", ">       return sorted(set(map(str, range(2, n + 1))), key=lambda x: -int(x[1:]) if len(x) > 1 else x)", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["n", "(486, 743, 432, 941, 474, 16, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_98/generated_answer.py", "lineno": 3, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_8():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(8 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_98/tests60_98_1.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(n):", ">       return sorted(set(map(str, range(2, n + 1))), key=lambda x: -int(x[1:]) if len(x) > 1 else x)", "E       TypeError: can only concatenate tuple (not \"int\") to tuple"], "reprfuncargs": {"args": [["n", "(486, 743, 432, 941, 474, 16, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_98/generated_answer.py", "lineno": 3, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_1/Folder_98/generated_answer.py", "lineno": 3, "message": "TypeError: can only concatenate tuple (not \"int\") to tuple"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00018033699598163366, "start": 1701018373.8928044, "stop": 1701018373.8929853, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "d4973632043b4c76ae03bf9c6b8a7a54", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
