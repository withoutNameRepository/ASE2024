
def all_left_right_truncatable_prime(X):
    X = X[803]
    s = str(X)
    l = len(s)
    s = s[l // 2 :] + s[1 : l // 2] + s[1 :]
    s = str(X)
    s = s[l // 2 :] + s[1 : l // 2] + s[1 :]
    l = len(s)
    p = list(range(2, l + 1))
    r = p[-1]
    while r == s[-1]:
        r -= 1
        p.append(r)
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[l // 2 :] + p[1 : l // 2] + p[1 :]
    q = p[1:]
    l = len(q)
    q = q[l // 2 :] + q[1 : l // 2] + q[1 :]
    p = q[:]
    l = len(p)
    p = p[
	