{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests60_27_1.py::test_if_result_is_less_than_equal_to_79", "location": ["tests60_27_1.py", 43, "test_if_result_is_less_than_equal_to_79"], "keywords": {"test_if_result_is_less_than_equal_to_79": 1, "tests60_27_1.py": 1, "Folder_27": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016718698316253722, "start": 1701018313.7714052, "stop": 1701018313.7715733, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f342b873c10343dc9fe66dd1c1699361", "node": "<WorkerController gw1>"}
{"nodeid": "tests60_27_1.py::test_tuple_of_all_one_digit_nums", "location": ["tests60_27_1.py", 4, "test_tuple_of_all_one_digit_nums"], "keywords": {"test_tuple_of_all_one_digit_nums": 1, "tests60_27_1.py": 1, "Folder_27": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001846770173870027, "start": 1701018313.7714005, "stop": 1701018313.771586, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f342b873c10343dc9fe66dd1c1699361", "node": "<WorkerController gw0>"}
{"nodeid": "tests60_27_1.py::test_if_result_is_less_than_equal_to_79", "location": ["tests60_27_1.py", 43, "test_if_result_is_less_than_equal_to_79"], "keywords": {"test_if_result_is_less_than_equal_to_79": 1, "tests60_27_1.py": 1, "Folder_27": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/Benchmark_Command/Q60/command_results_1/Folder_27/generated_answer.py", "lineno": 3, "message": "ValueError: invalid literal for int() with base 10: ')'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_79():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(79 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_27/tests60_27_1.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(n):", ">       return sorted((p for p in range(2, int(str(n)[-1])+1) if is_prime(p)), reverse=True)", "E       ValueError: invalid literal for int() with base 10: ')'"], "reprfuncargs": {"args": [["n", "(494, 702, 999, 771, 918, 689, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_27/generated_answer.py", "lineno": 3, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_less_than_equal_to_79():", "        input_tuple = tuple([random.randint(3, 1000) for _ in range(79 + 1)])", ">       output = all_left_right_truncatable_prime(input_tuple)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_27/tests60_27_1.py", "lineno": 46, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_right_truncatable_prime(n):", ">       return sorted((p for p in range(2, int(str(n)[-1])+1) if is_prime(p)), reverse=True)", "E       ValueError: invalid literal for int() with base 10: ')'"], "reprfuncargs": {"args": [["n", "(494, 702, 999, 771, 918, 689, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q60/command_results_1/Folder_27/generated_answer.py", "lineno": 3, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/Benchmark_Command/Q60/command_results_1/Folder_27/generated_answer.py", "lineno": 3, "message": "ValueError: invalid literal for int() with base 10: ')'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00023362197680398822, "start": 1701018313.7718506, "stop": 1701018313.7720847, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f342b873c10343dc9fe66dd1c1699361", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
