{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests37_46_4.py::test_compare_lengths_with_large_string", "location": ["tests37_46_4.py", 22, "test_compare_lengths_with_large_string"], "keywords": {"test_compare_lengths_with_large_string": 1, "tests37_46_4.py": 1, "Folder_46": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011483500202302821, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "8052445fd65249c485fca90688f524be", "node": "<WorkerController gw1>"}
{"nodeid": "tests37_46_4.py::test_repeat_char", "location": ["tests37_46_4.py", 5, "test_repeat_char"], "keywords": {"test_repeat_char": 1, "tests37_46_4.py": 1, "Folder_46": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016798500291770324, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "8052445fd65249c485fca90688f524be", "node": "<WorkerController gw0>"}
{"nodeid": "tests37_46_4.py::test_repeat_char", "location": ["tests37_46_4.py", 5, "test_repeat_char"], "keywords": {"test_repeat_char": 1, "tests37_46_4.py": 1, "Folder_46": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 1054, "message": "re.error: bad escape \\d at position 2"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_repeat_char():", "        s = 'm' * (72 + 2)", "        if 'i' <= 'm' <= 'v':", ">           assert filter_chars(s) == ''"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q37/command_results_4/Folder_46/tests37_46_4.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub(r\"([A-Z])\\d{3}([A-Z])\", r\"\\1\\d\\2\", s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q37/command_results_4/Folder_46/generated_answer.py", "lineno": 4, "message": "in filter_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 209, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    template = _compile_repl(template, pattern)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 326, "message": "in _subx"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sre_parse.parse_template(repl, pattern)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 317, "message": "in _compile_repl"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, state):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        groups = []", "        literals = []", "        literal = []", "        lappend = literal.append", "        def addgroup(index, pos):", "            if index > state.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            if literal:", "                literals.append(''.join(literal))", "                del literal[:]", "            groups.append((len(literals), index))", "            literals.append(None)", "        groupindex = state.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    name = \"\"", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if name.isidentifier():", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name)", "                    else:", "                        try:", "                            index = int(name)", "                            if index < 0:", "                                raise ValueError", "                        except ValueError:", "                            raise s.error(\"bad character in group name %r\" % name,", "                                          len(name) + 1) from None", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this))", "E                           re.error: bad escape \\d at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\d\\\\2'"], ["state", "re.compile('([A-Z])\\\\d{3}([A-Z])')"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 1054, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, state):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        groups = []", "        literals = []", "        literal = []", "        lappend = literal.append", "        def addgroup(index, pos):", "            if index > state.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            if literal:", "                literals.append(''.join(literal))", "                del literal[:]", "            groups.append((len(literals), index))", "            literals.append(None)", "        groupindex = state.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    name = \"\"", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if name.isidentifier():", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name)", "                    else:", "                        try:", "                            index = int(name)", "                            if index < 0:", "                                raise ValueError", "                        except ValueError:", "                            raise s.error(\"bad character in group name %r\" % name,", "                                          len(name) + 1) from None", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", ">                       this = chr(ESCAPES[this][1])", "E                       KeyError: '\\\\d'"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\d\\\\2'"], ["state", "re.compile('([A-Z])\\\\d{3}([A-Z])')"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 1051, "message": "KeyError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 1051, "message": "KeyError: '\\\\d'"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_repeat_char():", "        s = 'm' * (72 + 2)", "        if 'i' <= 'm' <= 'v':", ">           assert filter_chars(s) == ''"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q37/command_results_4/Folder_46/tests37_46_4.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub(r\"([A-Z])\\d{3}([A-Z])\", r\"\\1\\d\\2\", s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q37/command_results_4/Folder_46/generated_answer.py", "lineno": 4, "message": "in filter_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 209, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    template = _compile_repl(template, pattern)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 326, "message": "in _subx"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sre_parse.parse_template(repl, pattern)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 317, "message": "in _compile_repl"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, state):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        groups = []", "        literals = []", "        literal = []", "        lappend = literal.append", "        def addgroup(index, pos):", "            if index > state.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            if literal:", "                literals.append(''.join(literal))", "                del literal[:]", "            groups.append((len(literals), index))", "            literals.append(None)", "        groupindex = state.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    name = \"\"", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if name.isidentifier():", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name)", "                    else:", "                        try:", "                            index = int(name)", "                            if index < 0:", "                                raise ValueError", "                        except ValueError:", "                            raise s.error(\"bad character in group name %r\" % name,", "                                          len(name) + 1) from None", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this))", "E                           re.error: bad escape \\d at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\d\\\\2'"], ["state", "re.compile('([A-Z])\\\\d{3}([A-Z])')"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 1054, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 1054, "message": "re.error: bad escape \\d at position 2"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00026814300144906156, "extra": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "8052445fd65249c485fca90688f524be", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
