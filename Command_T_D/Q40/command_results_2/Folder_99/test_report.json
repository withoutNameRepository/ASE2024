{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests40_99_2.py::test_if_result_is_sorted", "location": ["tests40_99_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests40_99_2.py": 1, "Folder_99": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011408400314394385, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "288e7c2bc33f493cb99a0d63d9ab07d4", "node": "<WorkerController gw1>"}
{"nodeid": "tests40_99_2.py::test_strings_of_size_equal_to_35", "location": ["tests40_99_2.py", 5, "test_strings_of_size_equal_to_35"], "keywords": {"test_strings_of_size_equal_to_35": 1, "tests40_99_2.py": 1, "Folder_99": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00015758500012452714, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "288e7c2bc33f493cb99a0d63d9ab07d4", "node": "<WorkerController gw0>"}
{"nodeid": "tests40_99_2.py::test_if_result_is_sorted", "location": ["tests40_99_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests40_99_2.py": 1, "Folder_99": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command/Q40/command_results_2/Folder_99/tests40_99_2.py", "lineno": 28, "message": "AssertionError: assert ['C', 'F', 'H...'M', 'O', ...] == ['X', 'T', 'Q...'M', 'I', ...]\n  At index 0 diff: 'C' != 'X'\n  Full diff:\n  - ['X', 'T', 'Q', 'O', 'M', 'I', 'H', 'F', 'C']\n  + ['C', 'F', 'H', 'I', 'M', 'O', 'Q', 'T', 'X']"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=35 + 1))", "        result = return_n_smallest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert ['C', 'F', 'H...'M', 'O', ...] == ['X', 'T', 'Q...'M', 'I', ...]", "E             At index 0 diff: 'C' != 'X'", "E             Full diff:", "E             - ['X', 'T', 'Q', 'O', 'M', 'I', 'H', 'F', 'C']", "E             + ['C', 'F', 'H', 'I', 'M', 'O', 'Q', 'T', 'X']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q40/command_results_2/Folder_99/tests40_99_2.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=35 + 1))", "        result = return_n_smallest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert ['C', 'F', 'H...'M', 'O', ...] == ['X', 'T', 'Q...'M', 'I', ...]", "E             At index 0 diff: 'C' != 'X'", "E             Full diff:", "E             - ['X', 'T', 'Q', 'O', 'M', 'I', 'H', 'F', 'C']", "E             + ['C', 'F', 'H', 'I', 'M', 'O', 'Q', 'T', 'X']"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q40/command_results_2/Folder_99/tests40_99_2.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command/Q40/command_results_2/Folder_99/tests40_99_2.py", "lineno": 28, "message": "AssertionError: assert ['C', 'F', 'H...'M', 'O', ...] == ['X', 'T', 'Q...'M', 'I', ...]\n  At index 0 diff: 'C' != 'X'\n  Full diff:\n  - ['X', 'T', 'Q', 'O', 'M', 'I', 'H', 'F', 'C']\n  + ['C', 'F', 'H', 'I', 'M', 'O', 'Q', 'T', 'X']"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005933630018262193, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "288e7c2bc33f493cb99a0d63d9ab07d4", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
