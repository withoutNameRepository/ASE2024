{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests40_26_5.py::test_if_result_is_sorted", "location": ["tests40_26_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests40_26_5.py": 1, "Folder_26": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011713000276358798, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "06ad242bf25e4da594ecccc86f2823de", "node": "<WorkerController gw1>"}
{"nodeid": "tests40_26_5.py::test_strings_of_size_equal_to_43", "location": ["tests40_26_5.py", 5, "test_strings_of_size_equal_to_43"], "keywords": {"test_strings_of_size_equal_to_43": 1, "tests40_26_5.py": 1, "Folder_26": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014741600170964375, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "06ad242bf25e4da594ecccc86f2823de", "node": "<WorkerController gw0>"}
{"nodeid": "tests40_26_5.py::test_if_result_is_sorted", "location": ["tests40_26_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests40_26_5.py": 1, "Folder_26": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command/Q40/command_results_5/Folder_26/tests40_26_5.py", "lineno": 26, "message": "AssertionError: assert ['%', '(', '&', ')'] == ['%', '&', '(', ')']\n  At index 1 diff: '(' != '&'\n  Full diff:\n  - ['%', '&', '(', ')']\n  ?            -----\n  + ['%', '(', '&', ')']\n  ?       +++++"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=43 + 1))", "        result = return_n_smallest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['%', '(', '&', ')'] == ['%', '&', '(', ')']", "E             At index 1 diff: '(' != '&'", "E             Full diff:", "E             - ['%', '&', '(', ')']", "E             ?            -----", "E             + ['%', '(', '&', ')']", "E             ?       +++++"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q40/command_results_5/Folder_26/tests40_26_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=43 + 1))", "        result = return_n_smallest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['%', '(', '&', ')'] == ['%', '&', '(', ')']", "E             At index 1 diff: '(' != '&'", "E             Full diff:", "E             - ['%', '&', '(', ')']", "E             ?            -----", "E             + ['%', '(', '&', ')']", "E             ?       +++++"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q40/command_results_5/Folder_26/tests40_26_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command/Q40/command_results_5/Folder_26/tests40_26_5.py", "lineno": 26, "message": "AssertionError: assert ['%', '(', '&', ')'] == ['%', '&', '(', ')']\n  At index 1 diff: '(' != '&'\n  Full diff:\n  - ['%', '&', '(', ')']\n  ?            -----\n  + ['%', '(', '&', ')']\n  ?       +++++"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00045709800178883597, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "06ad242bf25e4da594ecccc86f2823de", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
