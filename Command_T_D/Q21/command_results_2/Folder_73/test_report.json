{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests21_73_2.py::test_negate_of_divisors", "location": ["tests21_73_2.py", 16, "test_negate_of_divisors"], "keywords": {"test_negate_of_divisors": 1, "tests21_73_2.py": 1, "Folder_73": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001596790007170057, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "e1e051af2bee4b0ba276e8987e2eff07", "node": "<WorkerController gw1>"}
{"nodeid": "tests21_73_2.py::test_list_of_zeros", "location": ["tests21_73_2.py", 3, "test_list_of_zeros"], "keywords": {"test_list_of_zeros": 1, "tests21_73_2.py": 1, "Folder_73": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00018104999981005676, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "e1e051af2bee4b0ba276e8987e2eff07", "node": "<WorkerController gw0>"}
{"nodeid": "tests21_73_2.py::test_negate_of_divisors", "location": ["tests21_73_2.py", 16, "test_negate_of_divisors"], "keywords": {"test_negate_of_divisors": 1, "tests21_73_2.py": 1, "Folder_73": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "re.error: bad character range 8-3 at position 3"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_negate_of_divisors():", "        neg_div = --97", "        neg_div_list = [neg_div for _ in range(0, 38 + 1)]", "        expected_list = [neg_div for _ in range(18, 38 + 1)]", ">       assert all_ints_div_by_num(neg_div_list) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_2/Folder_73/tests21_73_2.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    m = re.search(r'([18-38])-([18-38])', s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_2/Folder_73/generated_answer.py", "lineno": 4, "message": "in all_ints_div_by_num"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).search(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 200, "message": "in search"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", ">                           raise source.error(msg, len(this) + 1 + len(that))", "E                           re.error: bad character range 8-3 at position 3"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f62ef4a43d0>"], ["state", "<sre_parse.State object at 0x7f62ef4a4100>"], ["verbose", "0"], ["nested", "3"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_negate_of_divisors():", "        neg_div = --97", "        neg_div_list = [neg_div for _ in range(0, 38 + 1)]", "        expected_list = [neg_div for _ in range(18, 38 + 1)]", ">       assert all_ints_div_by_num(neg_div_list) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_2/Folder_73/tests21_73_2.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    m = re.search(r'([18-38])-([18-38])', s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_2/Folder_73/generated_answer.py", "lineno": 4, "message": "in all_ints_div_by_num"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).search(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 200, "message": "in search"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", ">                           raise source.error(msg, len(this) + 1 + len(that))", "E                           re.error: bad character range 8-3 at position 3"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7f62ef4a43d0>"], ["state", "<sre_parse.State object at 0x7f62ef4a4100>"], ["verbose", "0"], ["nested", "3"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 599, "message": "re.error: bad character range 8-3 at position 3"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0001601210005901521, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "e1e051af2bee4b0ba276e8987e2eff07", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
