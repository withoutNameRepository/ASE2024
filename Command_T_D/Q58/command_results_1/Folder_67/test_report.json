{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests58_67_1.py::test_matrix_of_one_integer", "location": ["tests58_67_1.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_67_1.py": 1, "Folder_67": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0003125670045847073, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "26cc61e655ee42b0b54eae33ef927c31", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_67_1.py::test_matrix_of_having_43_integers", "location": ["tests58_67_1.py", 28, "test_matrix_of_having_43_integers"], "keywords": {"test_matrix_of_having_43_integers": 1, "__wrapped__": 1, "tests58_67_1.py": 1, "Folder_67": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002725099984672852, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "26cc61e655ee42b0b54eae33ef927c31", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_67_1.py::test_vertical_matrix", "location": ["tests58_67_1.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_67_1.py": 1, "Folder_67": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00024850500631146133, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw3", "testrun_uid": "26cc61e655ee42b0b54eae33ef927c31", "node": "<WorkerController gw3>"}
{"nodeid": "tests58_67_1.py::test_horizontal_matrix", "location": ["tests58_67_1.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_67_1.py": 1, "Folder_67": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.000258894004218746, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "26cc61e655ee42b0b54eae33ef927c31", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_67_1.py::test_matrix_of_having_43_integers", "location": ["tests58_67_1.py", 28, "test_matrix_of_having_43_integers"], "keywords": {"test_matrix_of_having_43_integers": 1, "__wrapped__": 1, "tests58_67_1.py": 1, "Folder_67": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/.local/lib/python3.10/site-packages/numpy/core/numeric.py", "lineno": 503, "message": "TypeError: matrix.sum() got an unexpected keyword argument 'keepdims'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_43_integers():", "        if 43 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(43 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(43)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_1/Folder_67/tests58_67_1.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.count_nonzero(np.sum(matrix, axis=0) == 43, axis=1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_1/Folder_67/generated_answer.py", "lineno": 3, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    ???"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "<__array_function__ internals>", "lineno": 200, "message": "in count_nonzero"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_count_nonzero_dispatcher)", "    def count_nonzero(a, axis=None, *, keepdims=False):", "        \"\"\"", "        Counts the number of non-zero values in the array ``a``.", "    ", "        The word \"non-zero\" is in reference to the Python 2.x", "        built-in method ``__nonzero__()`` (renamed ``__bool__()``", "        in Python 3.x) of Python objects that tests an object's", "        \"truthfulness\". For example, any number is considered", "        truthful if it is nonzero, whereas any string is considered", "        truthful if it is not the empty string. Thus, this function", "        (recursively) counts how many elements in ``a`` (and in", "        sub-arrays thereof) have their ``__nonzero__()`` or ``__bool__()``", "        method evaluated to ``True``.", "    ", "        Parameters", "        ----------", "        a : array_like", "            The array for which to count non-zeros.", "        axis : int or tuple, optional", "            Axis or tuple of axes along which to count non-zeros.", "            Default is None, meaning that non-zeros will be counted", "            along a flattened version of ``a``.", "    ", "            .. versionadded:: 1.12.0", "    ", "        keepdims : bool, optional", "            If this is set to True, the axes that are counted are left", "            in the result as dimensions with size one. With this option,", "            the result will broadcast correctly against the input array.", "    ", "            .. versionadded:: 1.19.0", "    ", "        Returns", "        -------", "        count : int or array of int", "            Number of non-zero values in the array along a given axis.", "            Otherwise, the total number of non-zero values in the array", "            is returned.", "    ", "        See Also", "        --------", "        nonzero : Return the coordinates of all the non-zero values.", "    ", "        Examples", "        --------", "        >>> np.count_nonzero(np.eye(4))", "        4", "        >>> a = np.array([[0, 1, 7, 0],", "        ...               [3, 0, 2, 19]])", "        >>> np.count_nonzero(a)", "        5", "        >>> np.count_nonzero(a, axis=0)", "        array([1, 1, 2, 1])", "        >>> np.count_nonzero(a, axis=1)", "        array([2, 3])", "        >>> np.count_nonzero(a, axis=1, keepdims=True)", "        array([[2],", "               [3]])", "        \"\"\"", "        if axis is None and not keepdims:", "            return multiarray.count_nonzero(a)", "    ", "        a = asanyarray(a)", "    ", "        # TODO: this works around .astype(bool) not working properly (gh-9847)", "        if np.issubdtype(a.dtype, np.character):", "            a_bool = a != a.dtype.type()", "        else:", "            a_bool = a.astype(np.bool_, copy=False)", "    ", ">       return a_bool.sum(axis=axis, dtype=np.intp, keepdims=keepdims)", "E       TypeError: matrix.sum() got an unexpected keyword argument 'keepdims'"], "reprfuncargs": {"args": [["a", "matrix([[False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, Fa...se, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False]])"], ["axis", "1"]]}, "reprlocals": null, "reprfileloc": {"path": "../.local/lib/python3.10/site-packages/numpy/core/numeric.py", "lineno": 503, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_43_integers():", "        if 43 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(43 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(43)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_1/Folder_67/tests58_67_1.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.count_nonzero(np.sum(matrix, axis=0) == 43, axis=1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_1/Folder_67/generated_answer.py", "lineno": 3, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    ???"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "<__array_function__ internals>", "lineno": 200, "message": "in count_nonzero"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_count_nonzero_dispatcher)", "    def count_nonzero(a, axis=None, *, keepdims=False):", "        \"\"\"", "        Counts the number of non-zero values in the array ``a``.", "    ", "        The word \"non-zero\" is in reference to the Python 2.x", "        built-in method ``__nonzero__()`` (renamed ``__bool__()``", "        in Python 3.x) of Python objects that tests an object's", "        \"truthfulness\". For example, any number is considered", "        truthful if it is nonzero, whereas any string is considered", "        truthful if it is not the empty string. Thus, this function", "        (recursively) counts how many elements in ``a`` (and in", "        sub-arrays thereof) have their ``__nonzero__()`` or ``__bool__()``", "        method evaluated to ``True``.", "    ", "        Parameters", "        ----------", "        a : array_like", "            The array for which to count non-zeros.", "        axis : int or tuple, optional", "            Axis or tuple of axes along which to count non-zeros.", "            Default is None, meaning that non-zeros will be counted", "            along a flattened version of ``a``.", "    ", "            .. versionadded:: 1.12.0", "    ", "        keepdims : bool, optional", "            If this is set to True, the axes that are counted are left", "            in the result as dimensions with size one. With this option,", "            the result will broadcast correctly against the input array.", "    ", "            .. versionadded:: 1.19.0", "    ", "        Returns", "        -------", "        count : int or array of int", "            Number of non-zero values in the array along a given axis.", "            Otherwise, the total number of non-zero values in the array", "            is returned.", "    ", "        See Also", "        --------", "        nonzero : Return the coordinates of all the non-zero values.", "    ", "        Examples", "        --------", "        >>> np.count_nonzero(np.eye(4))", "        4", "        >>> a = np.array([[0, 1, 7, 0],", "        ...               [3, 0, 2, 19]])", "        >>> np.count_nonzero(a)", "        5", "        >>> np.count_nonzero(a, axis=0)", "        array([1, 1, 2, 1])", "        >>> np.count_nonzero(a, axis=1)", "        array([2, 3])", "        >>> np.count_nonzero(a, axis=1, keepdims=True)", "        array([[2],", "               [3]])", "        \"\"\"", "        if axis is None and not keepdims:", "            return multiarray.count_nonzero(a)", "    ", "        a = asanyarray(a)", "    ", "        # TODO: this works around .astype(bool) not working properly (gh-9847)", "        if np.issubdtype(a.dtype, np.character):", "            a_bool = a != a.dtype.type()", "        else:", "            a_bool = a.astype(np.bool_, copy=False)", "    ", ">       return a_bool.sum(axis=axis, dtype=np.intp, keepdims=keepdims)", "E       TypeError: matrix.sum() got an unexpected keyword argument 'keepdims'"], "reprfuncargs": {"args": [["a", "matrix([[False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, Fa...se, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False]])"], ["axis", "1"]]}, "reprlocals": null, "reprfileloc": {"path": "../.local/lib/python3.10/site-packages/numpy/core/numeric.py", "lineno": 503, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/.local/lib/python3.10/site-packages/numpy/core/numeric.py", "lineno": 503, "message": "TypeError: matrix.sum() got an unexpected keyword argument 'keepdims'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0006197340044309385, "extra": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "26cc61e655ee42b0b54eae33ef927c31", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
