{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests58_24_3.py::test_matrix_of_having_51_integers", "location": ["tests58_24_3.py", 28, "test_matrix_of_having_51_integers"], "keywords": {"test_matrix_of_having_51_integers": 1, "__wrapped__": 1, "tests58_24_3.py": 1, "Folder_24": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0003300909957033582, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "61b9aadb6b4241ac9db0f1d4bbc7c4d8", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_24_3.py::test_vertical_matrix", "location": ["tests58_24_3.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_24_3.py": 1, "Folder_24": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0003046729980269447, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw4", "testrun_uid": "61b9aadb6b4241ac9db0f1d4bbc7c4d8", "node": "<WorkerController gw4>"}
{"nodeid": "tests58_24_3.py::test_horizontal_matrix", "location": ["tests58_24_3.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_24_3.py": 1, "Folder_24": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00022466999507742003, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "61b9aadb6b4241ac9db0f1d4bbc7c4d8", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_24_3.py::test_matrix_of_one_integer", "location": ["tests58_24_3.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_24_3.py": 1, "Folder_24": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00037343500298447907, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "61b9aadb6b4241ac9db0f1d4bbc7c4d8", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_24_3.py::test_matrix_of_having_51_integers", "location": ["tests58_24_3.py", 28, "test_matrix_of_having_51_integers"], "keywords": {"test_matrix_of_having_51_integers": 1, "__wrapped__": 1, "tests58_24_3.py": 1, "Folder_24": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command/Q58/command_results_3/Folder_24/tests58_24_3.py", "lineno": 38, "message": "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[  60,  -35,  -40,  -93,  -10,   72,   23,   58,   91,   91,\\n           39,   95,   34,  -18,   37,  -91,   39,   56,   32,   21,\\n           51,   60,  -13, -100,  -65,  -86,   48,   13,   10,  -91,\\n           -2,   43,   83,  -90,   66,    7,   59,   18,   25,  -46,\\n           36,  -17,   65,   46,   49,  -80,   58,   84,   46,  -24,\\n           17]]))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_51_integers():", "        if 51 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(51 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(51)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1", "E       assert 0 == 1", "E        +  where 0 = submatrix_with_n_numbers(matrix([[  60,  -35,  -40,  -93,  -10,   72,   23,   58,   91,   91,\\n           39,   95,   34,  -18,   37,  -91,   39,   56,   32,   21,\\n           51,   60,  -13, -100,  -65,  -86,   48,   13,   10,  -91,\\n           -2,   43,   83,  -90,   66,    7,   59,   18,   25,  -46,\\n           36,  -17,   65,   46,   49,  -80,   58,   84,   46,  -24,\\n           17]]))"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_24/tests58_24_3.py", "lineno": 38, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_51_integers():", "        if 51 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(51 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(51)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1", "E       assert 0 == 1", "E        +  where 0 = submatrix_with_n_numbers(matrix([[  60,  -35,  -40,  -93,  -10,   72,   23,   58,   91,   91,\\n           39,   95,   34,  -18,   37,  -91,   39,   56,   32,   21,\\n           51,   60,  -13, -100,  -65,  -86,   48,   13,   10,  -91,\\n           -2,   43,   83,  -90,   66,    7,   59,   18,   25,  -46,\\n           36,  -17,   65,   46,   49,  -80,   58,   84,   46,  -24,\\n           17]]))"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_24/tests58_24_3.py", "lineno": 38, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command/Q58/command_results_3/Folder_24/tests58_24_3.py", "lineno": 38, "message": "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[  60,  -35,  -40,  -93,  -10,   72,   23,   58,   91,   91,\\n           39,   95,   34,  -18,   37,  -91,   39,   56,   32,   21,\\n           51,   60,  -13, -100,  -65,  -86,   48,   13,   10,  -91,\\n           -2,   43,   83,  -90,   66,    7,   59,   18,   25,  -46,\\n           36,  -17,   65,   46,   49,  -80,   58,   84,   46,  -24,\\n           17]]))"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0007910330023150891, "extra": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "61b9aadb6b4241ac9db0f1d4bbc7c4d8", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
