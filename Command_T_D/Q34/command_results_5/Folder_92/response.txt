[cohere.Generation {
	id: 86b6fd9d-2d7c-421d-afc0-d99cbf064e48
	prompt: Here is a text specification delimited by angle brackets. Create Python code according to the text specification. <Write a function called 'find_original_set' that takes exactly 8 distinct arguments, each of which is a set of integers. The function should return the smallest set such that each of the given arguments is a subset of it.> The Python code should not contain any comments. The Python code should be delimited only by triple backticks.
	text: 
```python
import sys
import heapq as hp

sys.setrecursionlimit(10**6)

def find_original_set(S1, S2, S3, S4, S5, S6, S7, S8):
    q = [(S1, 0, 1), (S2, 1, 1), (S3, 2, 1), (S4, 3, 1), (S5, 4, 1), (S6, 5, 1), (S7, 6, 1), (S8, 7, 1)]
    h = []
    hq = []
    for s in q:
        if s[0] not in h:
            hp.heappush(hq, (s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7]))
            h.append(s[0])
    for s in q:
        if s[0] in h:
            hp.heappush(hq, (s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7]))
    while hq:
        s = hp.heappop(hq)
        s1, s2, s3, s4, s5, s6, s7, s8 = s
        if s1 <= s2 <= s3 <= s4 <= s5 <= s6 <= s7 <= s8:
            return s
    return None
```
	likelihood: None
	token_likelihoods: None
}]