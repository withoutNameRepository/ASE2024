{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests35_94_3.py::test_absence_of_duplicates", "location": ["tests35_94_3.py", 31, "test_absence_of_duplicates"], "keywords": {"test_absence_of_duplicates": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00043081201147288084, "start": 1700340557.9798026, "stop": 1700340557.9802356, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw4>"}
{"nodeid": "tests35_94_3.py::test_presence_of_duplicates_not_in_range", "location": ["tests35_94_3.py", 48, "test_presence_of_duplicates_not_in_range"], "keywords": {"test_presence_of_duplicates_not_in_range": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0005926970043219626, "start": 1700340557.9800355, "stop": 1700340557.9806314, "$report_type": "TestReport", "item_index": 6, "worker_id": "gw6", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw6>"}
{"nodeid": "tests35_94_3.py::test_presence_of_non_duplicates", "location": ["tests35_94_3.py", 40, "test_presence_of_non_duplicates"], "keywords": {"test_presence_of_non_duplicates": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00044373999116942286, "start": 1700340557.979851, "stop": 1700340557.9802966, "$report_type": "TestReport", "item_index": 5, "worker_id": "gw5", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw5>"}
{"nodeid": "tests35_94_3.py::test_compare_lengths_with_large_string", "location": ["tests35_94_3.py", 26, "test_compare_lengths_with_large_string"], "keywords": {"test_compare_lengths_with_large_string": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00029249899671413004, "start": 1700340557.9797256, "stop": 1700340557.98002, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw3", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw3>"}
{"nodeid": "tests35_94_3.py::test_no_duplicate_string", "location": ["tests35_94_3.py", 13, "test_no_duplicate_string"], "keywords": {"test_no_duplicate_string": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0006782019918318838, "start": 1700340557.9796467, "stop": 1700340557.9803278, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw1>"}
{"nodeid": "tests35_94_3.py::test_repeat_char", "location": ["tests35_94_3.py", 5, "test_repeat_char"], "keywords": {"test_repeat_char": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00039343000389635563, "start": 1700340557.9797893, "stop": 1700340557.9801848, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw0>"}
{"nodeid": "tests35_94_3.py::test_merged_strings", "location": ["tests35_94_3.py", 18, "test_merged_strings"], "keywords": {"test_merged_strings": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0007339600124396384, "start": 1700340557.9800692, "stop": 1700340557.9808068, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw2>"}
{"nodeid": "tests35_94_3.py::test_presence_of_duplicates_not_in_range", "location": ["tests35_94_3.py", 48, "test_presence_of_duplicates_not_in_range"], "keywords": {"test_presence_of_duplicates_not_in_range": 1, "tests35_94_3.py": 1, "Folder_94": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 198, "message": "re.error: look-behind requires fixed-width pattern"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_presence_of_duplicates_not_in_range():", "        s = ''.join(random.choice(string.ascii_letters) for _ in range(87*2))", "        sliced_s = s[42 + 1:87]", ">       returned_s = remove_repeat_chars(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_3/Folder_94/tests35_94_3.py", "lineno": 52, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub(r'((?<=<|(?<=\\d)))\\1', '', s, flags=re.I)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_3/Folder_94/generated_answer.py", "lineno": 3, "message": "in remove_repeat_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 209, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _code(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 792, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    _compile(code, p.data, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 631, "message": "in _code"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    _compile(code, p, _combine_flags(flags, add_flags, del_flags))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 184, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _compile(code, pattern, flags):", "        # internal: compile a (sub)pattern", "        emit = code.append", "        _len = len", "        LITERAL_CODES = _LITERAL_CODES", "        REPEATING_CODES = _REPEATING_CODES", "        SUCCESS_CODES = _SUCCESS_CODES", "        ASSERT_CODES = _ASSERT_CODES", "        iscased = None", "        tolower = None", "        fixes = None", "        if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:", "            if flags & SRE_FLAG_UNICODE:", "                iscased = _sre.unicode_iscased", "                tolower = _sre.unicode_tolower", "                fixes = _ignorecase_fixes", "            else:", "                iscased = _sre.ascii_iscased", "                tolower = _sre.ascii_tolower", "        for op, av in pattern:", "            if op in LITERAL_CODES:", "                if not flags & SRE_FLAG_IGNORECASE:", "                    emit(op)", "                    emit(av)", "                elif flags & SRE_FLAG_LOCALE:", "                    emit(OP_LOCALE_IGNORE[op])", "                    emit(av)", "                elif not iscased(av):", "                    emit(op)", "                    emit(av)", "                else:", "                    lo = tolower(av)", "                    if not fixes:  # ascii", "                        emit(OP_IGNORE[op])", "                        emit(lo)", "                    elif lo not in fixes:", "                        emit(OP_UNICODE_IGNORE[op])", "                        emit(lo)", "                    else:", "                        emit(IN_UNI_IGNORE)", "                        skip = _len(code); emit(0)", "                        if op is NOT_LITERAL:", "                            emit(NEGATE)", "                        for k in (lo,) + fixes[lo]:", "                            emit(LITERAL)", "                            emit(k)", "                        emit(FAILURE)", "                        code[skip] = _len(code) - skip", "            elif op is IN:", "                charset, hascased = _optimize_charset(av, iscased, tolower, fixes)", "                if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:", "                    emit(IN_LOC_IGNORE)", "                elif not hascased:", "                    emit(IN)", "                elif not fixes:  # ascii", "                    emit(IN_IGNORE)", "                else:", "                    emit(IN_UNI_IGNORE)", "                skip = _len(code); emit(0)", "                _compile_charset(charset, flags, code)", "                code[skip] = _len(code) - skip", "            elif op is ANY:", "                if flags & SRE_FLAG_DOTALL:", "                    emit(ANY_ALL)", "                else:", "                    emit(ANY)", "            elif op in REPEATING_CODES:", "                if flags & SRE_FLAG_TEMPLATE:", "                    raise error(\"internal: unsupported template operator %r\" % (op,))", "                if _simple(av[2]):", "                    if op is MAX_REPEAT:", "                        emit(REPEAT_ONE)", "                    else:", "                        emit(MIN_REPEAT_ONE)", "                    skip = _len(code); emit(0)", "                    emit(av[0])", "                    emit(av[1])", "                    _compile(code, av[2], flags)", "                    emit(SUCCESS)", "                    code[skip] = _len(code) - skip", "                else:", "                    emit(REPEAT)", "                    skip = _len(code); emit(0)", "                    emit(av[0])", "                    emit(av[1])", "                    _compile(code, av[2], flags)", "                    code[skip] = _len(code) - skip", "                    if op is MAX_REPEAT:", "                        emit(MAX_UNTIL)", "                    else:", "                        emit(MIN_UNTIL)", "            elif op is SUBPATTERN:", "                group, add_flags, del_flags, p = av", "                if group:", "                    emit(MARK)", "                    emit((group-1)*2)", "                # _compile_info(code, p, _combine_flags(flags, add_flags, del_flags))", "                _compile(code, p, _combine_flags(flags, add_flags, del_flags))", "                if group:", "                    emit(MARK)", "                    emit((group-1)*2+1)", "            elif op in SUCCESS_CODES:", "                emit(op)", "            elif op in ASSERT_CODES:", "                emit(op)", "                skip = _len(code); emit(0)", "                if av[0] >= 0:", "                    emit(0) # look ahead", "                else:", "                    lo, hi = av[1].getwidth()", "                    if lo != hi:", ">                       raise error(\"look-behind requires fixed-width pattern\")", "E                       re.error: look-behind requires fixed-width pattern"], "reprfuncargs": {"args": [["code", "[INFO, 4, 0, 0, 0, MARK, ...]"], ["pattern", "[(ASSERT, (-1, [(BRANCH, (None, [[(LITERAL, 60)], [(ASSERT, (-1, [(IN, [(CATEGORY, CATEGORY_DIGIT)])]))]]))]))]"], ["flags", "34"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 198, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_presence_of_duplicates_not_in_range():", "        s = ''.join(random.choice(string.ascii_letters) for _ in range(87*2))", "        sliced_s = s[42 + 1:87]", ">       returned_s = remove_repeat_chars(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_3/Folder_94/tests35_94_3.py", "lineno": 52, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub(r'((?<=<|(?<=\\d)))\\1', '', s, flags=re.I)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_3/Folder_94/generated_answer.py", "lineno": 3, "message": "in remove_repeat_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 209, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _code(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 792, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    _compile(code, p.data, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 631, "message": "in _code"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    _compile(code, p, _combine_flags(flags, add_flags, del_flags))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 184, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _compile(code, pattern, flags):", "        # internal: compile a (sub)pattern", "        emit = code.append", "        _len = len", "        LITERAL_CODES = _LITERAL_CODES", "        REPEATING_CODES = _REPEATING_CODES", "        SUCCESS_CODES = _SUCCESS_CODES", "        ASSERT_CODES = _ASSERT_CODES", "        iscased = None", "        tolower = None", "        fixes = None", "        if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:", "            if flags & SRE_FLAG_UNICODE:", "                iscased = _sre.unicode_iscased", "                tolower = _sre.unicode_tolower", "                fixes = _ignorecase_fixes", "            else:", "                iscased = _sre.ascii_iscased", "                tolower = _sre.ascii_tolower", "        for op, av in pattern:", "            if op in LITERAL_CODES:", "                if not flags & SRE_FLAG_IGNORECASE:", "                    emit(op)", "                    emit(av)", "                elif flags & SRE_FLAG_LOCALE:", "                    emit(OP_LOCALE_IGNORE[op])", "                    emit(av)", "                elif not iscased(av):", "                    emit(op)", "                    emit(av)", "                else:", "                    lo = tolower(av)", "                    if not fixes:  # ascii", "                        emit(OP_IGNORE[op])", "                        emit(lo)", "                    elif lo not in fixes:", "                        emit(OP_UNICODE_IGNORE[op])", "                        emit(lo)", "                    else:", "                        emit(IN_UNI_IGNORE)", "                        skip = _len(code); emit(0)", "                        if op is NOT_LITERAL:", "                            emit(NEGATE)", "                        for k in (lo,) + fixes[lo]:", "                            emit(LITERAL)", "                            emit(k)", "                        emit(FAILURE)", "                        code[skip] = _len(code) - skip", "            elif op is IN:", "                charset, hascased = _optimize_charset(av, iscased, tolower, fixes)", "                if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:", "                    emit(IN_LOC_IGNORE)", "                elif not hascased:", "                    emit(IN)", "                elif not fixes:  # ascii", "                    emit(IN_IGNORE)", "                else:", "                    emit(IN_UNI_IGNORE)", "                skip = _len(code); emit(0)", "                _compile_charset(charset, flags, code)", "                code[skip] = _len(code) - skip", "            elif op is ANY:", "                if flags & SRE_FLAG_DOTALL:", "                    emit(ANY_ALL)", "                else:", "                    emit(ANY)", "            elif op in REPEATING_CODES:", "                if flags & SRE_FLAG_TEMPLATE:", "                    raise error(\"internal: unsupported template operator %r\" % (op,))", "                if _simple(av[2]):", "                    if op is MAX_REPEAT:", "                        emit(REPEAT_ONE)", "                    else:", "                        emit(MIN_REPEAT_ONE)", "                    skip = _len(code); emit(0)", "                    emit(av[0])", "                    emit(av[1])", "                    _compile(code, av[2], flags)", "                    emit(SUCCESS)", "                    code[skip] = _len(code) - skip", "                else:", "                    emit(REPEAT)", "                    skip = _len(code); emit(0)", "                    emit(av[0])", "                    emit(av[1])", "                    _compile(code, av[2], flags)", "                    code[skip] = _len(code) - skip", "                    if op is MAX_REPEAT:", "                        emit(MAX_UNTIL)", "                    else:", "                        emit(MIN_UNTIL)", "            elif op is SUBPATTERN:", "                group, add_flags, del_flags, p = av", "                if group:", "                    emit(MARK)", "                    emit((group-1)*2)", "                # _compile_info(code, p, _combine_flags(flags, add_flags, del_flags))", "                _compile(code, p, _combine_flags(flags, add_flags, del_flags))", "                if group:", "                    emit(MARK)", "                    emit((group-1)*2+1)", "            elif op in SUCCESS_CODES:", "                emit(op)", "            elif op in ASSERT_CODES:", "                emit(op)", "                skip = _len(code); emit(0)", "                if av[0] >= 0:", "                    emit(0) # look ahead", "                else:", "                    lo, hi = av[1].getwidth()", "                    if lo != hi:", ">                       raise error(\"look-behind requires fixed-width pattern\")", "E                       re.error: look-behind requires fixed-width pattern"], "reprfuncargs": {"args": [["code", "[INFO, 4, 0, 0, 0, MARK, ...]"], ["pattern", "[(ASSERT, (-1, [(BRANCH, (None, [[(LITERAL, 60)], [(ASSERT, (-1, [(IN, [(CATEGORY, CATEGORY_DIGIT)])]))]]))]))]"], ["flags", "34"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 198, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 198, "message": "re.error: look-behind requires fixed-width pattern"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0009373830107506365, "start": 1700340557.9814172, "stop": 1700340557.9823565, "extras": [], "$report_type": "TestReport", "item_index": 6, "worker_id": "gw6", "testrun_uid": "0cb777c76d7e4e8eaedecbc78c7ffe40", "node": "<WorkerController gw6>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
