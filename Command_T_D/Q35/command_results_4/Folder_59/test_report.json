{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests35_59_4.py::test_repeat_char", "location": ["tests35_59_4.py", 5, "test_repeat_char"], "keywords": {"test_repeat_char": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00017985000158660114, "start": 1700340639.710871, "stop": 1700340639.7110517, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw0>"}
{"nodeid": "tests35_59_4.py::test_merged_strings", "location": ["tests35_59_4.py", 18, "test_merged_strings"], "keywords": {"test_merged_strings": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00017738502356223762, "start": 1700340639.7108583, "stop": 1700340639.7110364, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw2>"}
{"nodeid": "tests35_59_4.py::test_presence_of_duplicates_not_in_range", "location": ["tests35_59_4.py", 48, "test_presence_of_duplicates_not_in_range"], "keywords": {"test_presence_of_duplicates_not_in_range": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016848999075591564, "start": 1700340639.7108867, "stop": 1700340639.7110567, "$report_type": "TestReport", "item_index": 6, "worker_id": "gw6", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw6>"}
{"nodeid": "tests35_59_4.py::test_absence_of_duplicates", "location": ["tests35_59_4.py", 31, "test_absence_of_duplicates"], "keywords": {"test_absence_of_duplicates": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00023736298317089677, "start": 1700340639.7110713, "stop": 1700340639.71131, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw4", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw4>"}
{"nodeid": "tests35_59_4.py::test_no_duplicate_string", "location": ["tests35_59_4.py", 13, "test_no_duplicate_string"], "keywords": {"test_no_duplicate_string": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00032819501939229667, "start": 1700340639.7110405, "stop": 1700340639.71137, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw1>"}
{"nodeid": "tests35_59_4.py::test_compare_lengths_with_large_string", "location": ["tests35_59_4.py", 26, "test_compare_lengths_with_large_string"], "keywords": {"test_compare_lengths_with_large_string": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016176002100110054, "start": 1700340639.7108803, "stop": 1700340639.7110426, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw3", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw3>"}
{"nodeid": "tests35_59_4.py::test_presence_of_non_duplicates", "location": ["tests35_59_4.py", 40, "test_presence_of_non_duplicates"], "keywords": {"test_presence_of_non_duplicates": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002306999813299626, "start": 1700340639.7110991, "stop": 1700340639.7113311, "$report_type": "TestReport", "item_index": 5, "worker_id": "gw5", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw5>"}
{"nodeid": "tests35_59_4.py::test_merged_strings", "location": ["tests35_59_4.py", 18, "test_merged_strings"], "keywords": {"test_merged_strings": 1, "tests35_59_4.py": 1, "Folder_59": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 420, "message": "re.error: cannot refer to an open group at position 15"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_merged_strings():", "        s = ('a' * (10 + 1)) + ('b' * 10)", "        if 10 - 0 - 1 == 1:", "            assert remove_repeat_chars(s) == s", "        else:", ">           assert remove_repeat_chars(s) == 'b' * 10"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_4/Folder_59/tests35_59_4.py", "lineno": 24, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub(r\"((?=([^aieou]))\\1+)\", r\"\\1\", s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_4/Folder_59/generated_answer.py", "lineno": 3, "message": "in remove_repeat_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 209, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 526, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}'))", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", ">                       raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "E                                          re.error: cannot refer to an open group at position 15"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7ff159797280>"], ["escape", "'\\\\1'"], ["state", "<sre_parse.State object at 0x7ff159797250>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 420, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_merged_strings():", "        s = ('a' * (10 + 1)) + ('b' * 10)", "        if 10 - 0 - 1 == 1:", "            assert remove_repeat_chars(s) == s", "        else:", ">           assert remove_repeat_chars(s) == 'b' * 10"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_4/Folder_59/tests35_59_4.py", "lineno": 24, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub(r\"((?=([^aieou]))\\1+)\", r\"\\1\", s)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q35/command_results_4/Folder_59/generated_answer.py", "lineno": 3, "message": "in remove_repeat_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 209, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_compile.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/re.py", "lineno": 303, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = sre_parse.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_compile.py", "lineno": 788, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 955, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 841, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 444, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 526, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}'))", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", ">                       raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "E                                          re.error: cannot refer to an open group at position 15"], "reprfuncargs": {"args": [["source", "<sre_parse.Tokenizer object at 0x7ff159797280>"], ["escape", "'\\\\1'"], ["state", "<sre_parse.State object at 0x7ff159797250>"]]}, "reprlocals": null, "reprfileloc": {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 420, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/usr/lib/python3.10/sre_parse.py", "lineno": 420, "message": "re.error: cannot refer to an open group at position 15"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0003274409973528236, "start": 1700340639.7112691, "stop": 1700340639.711597, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "65632fd2dd6b457ab2d4c1448b856ba2", "node": "<WorkerController gw2>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
