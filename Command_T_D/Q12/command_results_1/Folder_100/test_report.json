{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests12_100_1.py::test_all_zero_range", "location": ["tests12_100_1.py", 16, "test_all_zero_range"], "keywords": {"test_all_zero_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00015124399942578748, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"nodeid": "tests12_100_1.py::test_result_is_in_range", "location": ["tests12_100_1.py", 4, "test_result_is_in_range"], "keywords": {"test_result_is_in_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013488300010067178, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw0>"}
{"nodeid": "tests12_100_1.py::test_all_zero_range", "location": ["tests12_100_1.py", 16, "test_all_zero_range"], "keywords": {"test_all_zero_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00035229100012657, "extra": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"nodeid": "tests12_100_1.py::test_all_zero_range", "location": ["tests12_100_1.py", 16, "test_all_zero_range"], "keywords": {"test_all_zero_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 9.389599927089876e-05, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"nodeid": "tests12_100_1.py::test_all_n_range", "location": ["tests12_100_1.py", 21, "test_all_n_range"], "keywords": {"test_all_n_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.477799994783709e-05, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"nodeid": "tests12_100_1.py::test_all_n_range", "location": ["tests12_100_1.py", 21, "test_all_n_range"], "keywords": {"test_all_n_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.0008902700001272024, "extra": [], "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"nodeid": "tests12_100_1.py::test_all_n_range", "location": ["tests12_100_1.py", 21, "test_all_n_range"], "keywords": {"test_all_n_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 8.20340001155273e-05, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"nodeid": "tests12_100_1.py::test_unsorted_large_range", "location": ["tests12_100_1.py", 27, "test_unsorted_large_range"], "keywords": {"test_unsorted_large_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.024900009535486e-05, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"nodeid": "tests12_100_1.py::test_unsorted_large_range", "location": ["tests12_100_1.py", 27, "test_unsorted_large_range"], "keywords": {"test_unsorted_large_range": 1, "tests12_100_1.py": 1, "Folder_100": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command/Q12/command_results_1/Folder_100/tests12_100_1.py", "lineno": 33, "message": "assert -1000 == -998\n +  where -1000 = find_smallest_num([-866, -873, -975, -505, -398, -192, ...])\n +  and   -998 = min([-998, -971, -964, -950, -914, -908, ...])"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_unsorted_large_range():", "        initial_list = [i for i in range(-1000, (78 + 1) * 3)]", "        random.shuffle(initial_list)", "        sliced_list = initial_list[17:78 + 1]", "        sliced_list.sort()", ">       assert find_smallest_num(initial_list) == min(sliced_list)", "E       assert -1000 == -998", "E        +  where -1000 = find_smallest_num([-866, -873, -975, -505, -398, -192, ...])", "E        +  and   -998 = min([-998, -971, -964, -950, -914, -908, ...])"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q12/command_results_1/Folder_100/tests12_100_1.py", "lineno": 33, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_unsorted_large_range():", "        initial_list = [i for i in range(-1000, (78 + 1) * 3)]", "        random.shuffle(initial_list)", "        sliced_list = initial_list[17:78 + 1]", "        sliced_list.sort()", ">       assert find_smallest_num(initial_list) == min(sliced_list)", "E       assert -1000 == -998", "E        +  where -1000 = find_smallest_num([-866, -873, -975, -505, -398, -192, ...])", "E        +  and   -998 = min([-998, -971, -964, -950, -914, -908, ...])"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q12/command_results_1/Folder_100/tests12_100_1.py", "lineno": 33, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command/Q12/command_results_1/Folder_100/tests12_100_1.py", "lineno": 33, "message": "assert -1000 == -998\n +  where -1000 = find_smallest_num([-866, -873, -975, -505, -398, -192, ...])\n +  and   -998 = min([-998, -971, -964, -950, -914, -908, ...])"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0014092430001255707, "extra": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw1", "testrun_uid": "723951f5f62d41f5837c1cce42cbddd6", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
