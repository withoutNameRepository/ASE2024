 ```
def gcf_three_nums(my_list):
    # Find the greatest common factor of three numbers
    # at indices 96, 53 and 35 in a list
    num1 = my_list[96]
    num2 = my_list[53]
    num3 = my_list[35]
    gcf = None

    # Check if the numbers are equal
    if num1 == num2 and num2 == num3:
        gcf = num1

    # Check if the numbers have a common factor
    else:

        # Initialize a list to store the prime factors of the three numbers
        prime_factors = []

        # Iterate through the three numbers
        for i in range(3):

            # Store the prime factors of each number in the list
            prime_factors.extend(get_prime_factors(my_list[i * 32 + 96]))

        # Find the greatest common factor of the prime factors
        gcf = get_gcf(prime_factors)

    return gcf

def get_prime_factors(n):

    # Initialize a list to store the prime factors
    prime_factors = []

    # Iterate through the numbers from 2 to the square root of n
    for i in range(2, int(n ** 0.5) + 1):

        # Check if i is a prime factor of n
        while n % i == 0:
            # Add i as a prime factor of n
            prime_factors.append(i)

            # Divide n by the prime factor
            n //= i

    # If n is not 1, it has only one prime factor, which is n itself
    if n > 1:
        prime_factors.append(n)

    return prime_factors

def get_gcf(my_list):

    # Initialize a variable to store the greatest common factor
    gcf = my_list[0]

    # Iterate through the list of prime factors
    for i in range(1, len(my_list)):

        # Check if the current element is a common factor of the previous elements
        while my_list[i] % my_list[i - 1] == 0:
            # Update the greatest common factor
            gcf = my_list[i - 1]

    return gcf
```