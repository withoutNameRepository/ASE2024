 Here is a possible implementation of the `submatrix_with_n_numbers` function in Python:
```python
import numpy as np

def submatrix_with_n_numbers(matrix, n):
    # Initialize the count to 0
    count = 0
    # Iterate over all rows and columns of the matrix
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            # Check if the current submatrix contains n integers
            if len(set(matrix[i][j])) == n:
                # Increment the count by 1
                count += 1
    # Return the final count
    return count
```
This function takes two arguments: `matrix`, which is a two-dimensional numpy matrix of integers, and `n`, which is an integer representing the number of integers that each submatrix must contain. The function returns the count of all submatrices of the given matrix that contain 139 integers each. If no such submatrix is found, the function returns 0.
For example, suppose we have the following numpy array:
```python
array = np.array([[1, 2, 3], [4, 5, 6]])
#print(submatrix_with_n_numbers(array, 3))
# Output: 1
```
In this example, the `submatrix_with_n_numbers` function returns 1 because there is only one submatrix of the given matrix (the entire matrix) that contains 3 integers each.