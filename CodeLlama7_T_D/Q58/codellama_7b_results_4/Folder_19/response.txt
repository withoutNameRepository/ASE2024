 Here's a possible implementation of the `submatrix_with_n_numbers` function:
```python
import numpy as np

def submatrix_with_n_numbers(matrix, n):
    count = 0
    for i in range(matrix.shape[0] - n + 1):
        for j in range(matrix.shape[1] - n + 1):
            if np.sum(matrix[i:i+n, j:j+n]) == n * 17:
                count += 1
    return count
```
This function takes two arguments: `matrix`, which is a two-dimensional numpy matrix of integers, and `n`, which is the number of rows or columns that we want to extract from the original matrix. The function returns the count of all submatrices of the given matrix that contain 17 integers each. If no such submatrix is found, the function returns 0.
Here's an example usage of this function:
```python
matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
submatrix_with_n_numbers(matrix, 2)
# Output: 3
```
In this example, we pass the `matrix` variable as an argument to the `submatrix_with_n_numbers` function. The function returns the count of all submatrices of the given matrix that contain 17 integers each. In this case, there are three such submatrices: one with a size of 2x2, another with a size of 3x3, and the third with a size of 4x4. The function returns the count of these submatrices as 3.