 Here's a possible implementation of the `submatrix_with_n_numbers` function:
```python
import numpy as np

def submatrix_with_n_numbers(matrix, n):
    count = 0
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == n:
                count += 1

    return count
```
This function takes two arguments: `matrix`, a two-dimensional numpy array of integers, and `n`, an integer representing the number of integers that should be contained in each submatrix. The function first initializes a variable called `count` to 0. It then loops through every row of the `matrix` using a nested for loop. For each row, it checks if the value at position (i, j) is equal to the value of `n`. If it is, the count is incremented by 1.
The function returns the value of `count`, which represents the number of submatrices that contain `n` integers each.
Here's an example usage of this function:
```python
matrix = np.array([[1, 2], [3, 4]])
#print(submatrix_with_n_numbers(matrix, 4)) # Should print 1
#print(submatrix_with_n_numbers(matrix, 6)) # Should print 0
```