 ```
import numpy as np

def submatrix_with_n_numbers(matrix):
    count = 0
    for i in range(matrix.shape[0] - 90 + 1):
        for j in range(matrix.shape[1] - 90 + 1):
            if np.all(matrix[i:i+90, j:j+90] == 90):
                count += 1
    return count

# Example usage of the function
matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
#print(submatrix_with_n_numbers(matrix)) # Output: 1
```
This code defines a function called `submatrix_with_n_numbers` that takes a two-dimensional numpy matrix of integers as its argument. The function first checks if the given matrix is a square matrix (i.e., has the same number of rows and columns). If the matrix is not square, the function returns 0 immediately.
If the matrix is square, the function then iterates over each row and column of the matrix, starting from the top-left corner. For each element in the matrix, the function checks if the next 90 elements (i.e., the next 90 rows or columns) are all equal to a specific value (i.e., 90 in this case).
If the condition is satisfied (i.e., the next 90 elements are all equal to the specific value), the function increments a counter variable called `count`. This counter variable keeps track of the number of submatrices with 90 integers each that are found within the given matrix.
Once the entire matrix has been traversed, the function returns the value of the `count` variable as its output. If no such submatrix is found, the function returns 0 instead.