 ```
import numpy as np

def submatrix_with_n_numbers(matrix):
    # Initialize the count to 0
    count = 0
    # Iterate over all possible starting indices in the matrix
    for i in range(matrix.shape[0] - 6):
        for j in range(matrix.shape[1] - 6):
            # Check if the submatrix contains 7 integers each
            if np.count_nonzero(matrix[i:i+7, j:j+7]) == 49:
                count += 1

    return count

```
This code defines a function called `submatrix_with_n_numbers` that takes one argument which is a two-dimensional numpy matrix of integers. The function should return the count of all submatrices of the given matrix that contain 7 integers each. If no such submatrix is found, the function should return 0.
The code first imports the `numpy` library for working with arrays and matrices. Then it defines a function called `submatrix_with_n_numbers` that takes a two-dimensional numpy matrix of integers as its only argument.
The function first initializes a variable called `count` to 0, which is the default value returned by the function if no submatrix with 7 integers each is found. Then it iterates over all possible starting indices in the matrix using nested for loops. For each starting index, the function checks if the submatrix containing 7 integers each is found by counting the number of nonzero elements in the submatrix using the `np.count_nonzero()` method from the `numpy` library. If a submatrix with 7 integers each is found, the function increments the count variable by 1.
Finally, the function returns the value of the count variable, which is either the number of submatrices with 7 integers each found in the given matrix or 0 if no such submatrix is found.