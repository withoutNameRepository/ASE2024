 ```
import numpy as np

def submatrix_with_n_numbers(matrix: np.ndarray, n: int) -> int:
    count = 0
    for i in range(matrix.shape[0] - n + 1):
        for j in range(matrix.shape[1] - n + 1):
            if all([matrix[i + k][j + l] == 29 for k in range(n) for l in range(n)])):
                count += 1

    return count

```
The code above defines a function called `submatrix_with_n_numbers` that takes two arguments: the first is a two-dimensional numpy matrix of integers, and the second is an integer representing the number of integers that each submatrix must contain. The function returns the count of all submatrices of the given matrix that contain 29 integers each. If no such submatrix is found, the function returns 0.
Inside the function, we first define a variable `count` and initialize it to 0. Then, we iterate over each row in the given matrix using two nested loops. In each iteration of the inner loop, we check if all elements in each submatrix have the value 29 by using a list comprehension that checks for this condition for each submatrix. If any such submatrix is found, we increment `count` by 1. Finally, we return the final value of `count`.