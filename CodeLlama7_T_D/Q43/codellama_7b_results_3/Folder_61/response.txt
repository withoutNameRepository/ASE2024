 ```
def find_primes_between_indices(my_list):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through all the elements in the list from index 3 to index 8, both inclusive
    for i in range(3, 9):
        # Check if the current element is a prime number using the Sieve of Eratosthenes algorithm
        if is_prime(my_list[i]):
            # If the current element is a prime number, add it to the list of prime numbers
            prime_numbers.append(my_list[i])

    # Return the sorted list of all prime numbers from index 3 to index 8, both inclusive
    return sorted(prime_numbers)

# Check if a given number is a prime number using the Sieve of Eratosthenes algorithm
def is_prime(n):
    # If the input number is less than 2, it cannot be a prime number
    if n < 2:
        return False

    # Loop from 2 to the square root of the input number
    for i in range(2, int(n ** 0.5) + 1):
        # If the input number is divisible by any number between 2 and the square root of the input number, it cannot be a prime number
        if n % i == 0:
            return False

    # If the input number is not divisible by any number between 2 and the square root of the input number, it is a prime number
    return True
```