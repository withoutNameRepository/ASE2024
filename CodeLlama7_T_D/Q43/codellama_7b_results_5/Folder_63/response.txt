 Here is a possible implementation of the `find_primes_between_indices` function:
```python
def find_primes_between_indices(my_list):
    # Check if the input list is valid
    if not my_list or len(my_list) < 31 or len(my_list) > 95:
        return []

    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate through the input list and check for prime numbers
    for i in range(31, 96):
        if is_prime(my_list[i]):
            prime_numbers.append(my_list[i])

    # Return the sorted list of prime numbers
    return sorted(prime_numbers)

# Check if a number is prime
def is_prime(n):
    if n < 2:
        return False

    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    return True
```
This implementation first checks if the input list is valid and has at least 31 elements. If the list is not valid, it returns an empty list.
Next, it initializes an empty list to store the prime numbers. It then iterates through the input list and checks for prime numbers using the `is_prime` function. If a prime number is found, it is added to the list of prime numbers.
Finally, it returns the sorted list of prime numbers.