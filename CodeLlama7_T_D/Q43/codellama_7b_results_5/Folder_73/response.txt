 Here is a possible implementation of the `find_primes_between_indices` function in Python:
```
def find_primes_between_indices(my_list):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate through the list and check if each element is a prime number
    for i in range(84, 97 + 1):
        if my_list[i] == 0:
            continue

        else:

            for j in range(2, int(my_list[i]) ** 0.5 + 1):
                if my_list[i] % j == 0:
                    break

            else:

                prime_numbers.append(my_list[i])

    # Return the sorted list of all prime numbers in the specified range, or an empty list if no prime number exists in that range
    return sorted(prime_numbers)
```
Note that this implementation uses the Sieve of Eratosthenes algorithm to find all prime numbers in a given range. The `find_primes_between_indices` function takes a single argument, which is the list of integers containing the prime numbers. The function returns the sorted list of all prime numbers from index 84 to index 97, both inclusive, or an empty list if no prime number exists in that range.