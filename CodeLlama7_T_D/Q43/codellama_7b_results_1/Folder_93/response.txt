 Here is a possible implementation of the `find_primes_between_indices` function:
```
def find_primes_between_indices(my_list):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate over the list from index 76 to index 95, both inclusive
    for i in range(76, 96):
        # Check if the current element is a prime number
        if is_prime(my_list[i]):
            # If it is a prime number, add it to the list of prime numbers
            prime_numbers.append(my_list[i])

    # Return the sorted list of all prime numbers from index 76 to index 95, both inclusive
    return sorted(prime_numbers)
```
This function takes a single argument, `my_list`, which is a list of integers. It then uses a loop to iterate over the elements of the list from index 76 to index 95, both inclusive. For each element in this range, it checks if the current element is a prime number using the `is_prime` function. If the current element is a prime number, it adds it to the list of prime numbers. Finally, it returns the sorted list of all prime numbers from index 76 to index 95, both inclusive.
Here is an example of how you can use this function:
```
# Create a list of integers
my_list = [2, 3, 4, 5, 6, 7, 8, 9]

# Find the prime numbers between indices 76 and 95 in the list
prime_numbers = find_primes_between_indices(my_list)

# Print the sorted list of all prime numbers found
#print(sorted(prime_numbers))
```
#In this example, we create a list of integers and pass it to the `find_primes_between_indices` function. The function then returns the sorted list of all prime numbers from index 76 to index 95, both inclusive. Finally, we print the sorted list of prime numbers found by the function.