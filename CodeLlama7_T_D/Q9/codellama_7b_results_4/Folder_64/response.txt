 Here is a possible implementation of the `all_odd_ints_inclusive` function:
```python
def all_odd_ints_inclusive(my_list):
    # Initialize an empty list to store the odd integers
    odd_ints = []
    # Loop through the list and append any odd integers to the list
    for i in range(len(my_list)):
        if my_list[i] % 2 != 0:
            odd_ints.append(my_list[i])
    return odd_ints
```
This function takes a single argument, `my_list`, which is assumed to be a list of integers. The function then iterates through the elements of `my_list` using a for loop, and appends any odd integers it encounters to an empty list called `odd_ints`. Finally, the function returns `odd_ints`.
Here is an example usage of this function:
```python
my_list = [1, 2, 3, 4, 5]
#print(all_odd_ints_inclusive(my_list))
# Output: [1, 3, 5]
```
In this example, the `all_odd_ints_inclusive` function is called with the list `[1, 2, 3, 4, 5]` as its argument. The function then returns a new list containing only the odd integers from index 0 to index 4, both inclusive.