 Here is a possible implementation of the `all_substring_of_size_n` function:
```python
def all_substring_of_size_n(s):
    # Initialize an empty list to store the substrings
    substrings = []

    # Iterate over the characters in the string
    for i in range(len(s)):
        # For each character, generate all possible substrings of size n starting from that character
        for j in range(i, len(s) - n + 1):
            substring = s[j:j+n]
            if not any(substring == s[k:k+n] for k in range(len(s)))):
                substrings.append(substring)

    # Return the list of all distinct substrings of size n with no duplicate characters, or an empty list if no such substrings exist in the given string
    return substrings
```
This function takes a string `s` as input and returns a list of all distinct substrings of length 114 with no duplicate characters, or an empty list if no such substrings exist in the given string. The function first initializes an empty list to store the substrings, then iterates over the characters in the string using a nested for loop. For each character, the function generates all possible substrings of size 114 starting from that character and appends them to the list if they are not already present. Finally, the function returns the list of all distinct substrings of size 114 with no duplicate characters, or an empty list if no such substrings exist in the given string.