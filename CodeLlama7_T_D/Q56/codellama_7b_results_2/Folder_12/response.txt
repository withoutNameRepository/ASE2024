 Here is a possible implementation of the `all_substring_of_size_n` function:
```python
def all_substring_of_size_n(s, n):
    # Check if the input string and substring size are valid
    if len(s) < n or n < 1:
        return []

    # Initialize an empty list to store the substrings
    substrings = []

    # Iterate through each possible starting index of a substring
    for i in range(len(s) - n + 1):

        # Check if the substring at index i has length n
        if len(s[i:i+n]) == n:

            # Add the substring to the list of substrings
            substrings.append(s[i:i+n])

    # Return the list of substrings
    return substrings
```
This function takes two arguments, a string `s` and an integer `n`. It returns a list of all distinct substrings of length `n` in `s`, in any order. If there are no such substrings in `s`, the function returns an empty list.
Here is an example usage of this function:
```python
s = "banana"
n = 4

# Get all substrings of length 4 in "banana"
substrings = all_substring_of_size_n(s, n)

# Print the list of substrings
#print(substrings)
```
This code will output the list `["anan", "nan"]`.