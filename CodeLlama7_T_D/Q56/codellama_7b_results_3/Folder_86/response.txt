 Here is a possible implementation of the `all_substring_of_size_n` function:
```python
def all_substring_of_size_n(s, n):
    # Check if the input string and size are valid
    if len(s) < n or n < 0:
        return []

    # Initialize an empty list to store the substrings
    substrings = []

    # Iterate through each substring of length n in the input string
    for i in range(len(s) - n + 1):
        substring = s[i:i+n]
        # Check if the substring is already in the list
        if substring not in substrings:
            substrings.append(substring)

    return substrings
```
This function takes two arguments: `s`, a string, and `n`, an integer representing the size of the substrings to be returned. The function first checks if the input string and size are valid. If they are not, the function returns an empty list.
Next, the function initializes an empty list to store the substrings. It then iterates through each substring of length `n` in the input string using a for loop. For each substring, the function checks if it is already in the list of substrings. If it is not, the function appends the substring to the list.
Finally, the function returns the list of all distinct substrings of length `n` with no duplicate characters. The order of the substrings in the returned list does not matter.