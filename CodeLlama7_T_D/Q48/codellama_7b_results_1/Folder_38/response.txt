 ```
def return_binary_or_hexa(my_tuple):
a = my_tuple[36]
b = my_tuple[85]
sum = 0
for i in range(a + 1, b - 1):
if i not in my_tuple[36:85]:
sum += i
if sum % 2 == 0:
return f"{sum:x}"
else:
return f"{sum:b}"
```
Explanation:

This function takes a tuple of distinct nonnegative integers as input, and calculates the sum of all integers from `a` + 1 to `b` - 1 (both inclusive) that are not present in the tuple between indices 36 and 85. If the sum is an odd number, it returns the binary representation string of the sum; otherwise, it returns the hexadecimal representation string of the sum. The binary and hexadecimal representations should start with the most significant digit and have no leading zeros.
The function first calculates `a` and `b`, which are the integers stored at indices 36 and 85 in the tuple, respectively. It then iterates through all integers between `a` + 1 and `b` - 1 (both inclusive), and checks if each integer is present in the tuple between indices 36 and 85. If an integer is not present, it adds it to the sum.
Once the iteration is complete, the function checks whether the sum is an odd number or not. If it is an odd number, the function returns the binary representation string of the sum; otherwise, it returns the hexadecimal representation string of the sum.
The function also uses f-strings to format the binary and hexadecimal representations correctly. Finally, if all integers from `a` + 1 to `b` - 1 (both inclusive) are present in the specified range in the tuple, the function returns an empty string.