 Here is a possible implementation of the `return_binary_or_hexa` function in Python:
```
def return_binary_or_hexa(tuple):
    # Calculate the sum of all integers from a + 1 to b - 1 (both inclusive) that are not present in the tuple between indices 450 and 905.
    sum = 0
    for i in range(450, 905):
        if tuple[i] != None:
            sum += tuple[i]
    # If the sum is an odd number, return the binary representation string of the sum; otherwise, return the hexadecimal representation string of the sum.
    if sum % 2 == 1:
        return bin(sum)[2:]
    else:
        return hex(sum)[2:]
```
This function takes a single argument, `tuple`, which is expected to be a tuple of distinct nonnegative integers sorted in ascending order. The function then calculates the sum of all integers from `a` + 1 to `b` - 1 (both inclusive) that are not present in the tuple between indices 450 and 905.
If the sum is an odd number, the function returns the binary representation string of the sum; otherwise, it returns the hexadecimal representation string of the sum. The binary and hexadecimal representations should start with the most significant digit and have no leading zeros.
The letters in the hexadecimal representation can be either in lowercase or uppercase. If all integers from `a` + 1 to `b` - 1 (both inclusive) are present in the specified range in the tuple, the function returns an empty string.