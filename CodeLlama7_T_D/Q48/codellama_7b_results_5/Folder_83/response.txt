 Here is a possible implementation of the `return_binary_or_hexa` function in Python:
```
def return_binary_or_hexa(my_tuple):
    # Check if all integers from a + 1 to b - 1 (both inclusive) are present in the specified range in the tuple
    if my_tuple[200] - my_tuple[90] == len(my_tuple) - 90:
        # If all integers from a + 1 to b - 1 (both inclusive) are present in the specified range in the tuple, return an empty string.
        return ""

    else:

        # Calculate the sum of all integers from a + 1 to b - 1 (both inclusive) that are not present in the tuple between indices 90 and 200.
        total = 0
        for i in range(90, 201):
            if my_tuple[i] != None:
                # If the integer at index 'i' is present in the tuple between indices 90 and 200, add it to the sum.
                total = total + my_tuple[i]
        # Check if the sum is an odd number or not.
        if total % 2 == 1:
            # If the sum is an odd number, return the binary representation string of the sum.
            return bin(total)[2:]

        else:

            # If the sum is not an odd number, return the hexadecimal representation string of the sum.
            return hex(total)[2:]
```
This code first checks if all integers from `a` + 1 to `b` - 1 (both inclusive) are present in the specified range in the tuple. If this is the case, it returns an empty string. Otherwise, it calculates the sum of all integers from `a` + 1 to `b` - 1 (both inclusive) that are not present in the tuple between indices 90 and 200. It then checks if the sum is an odd number or not. If it is an odd number, it returns the binary representation string of the sum. Otherwise, it returns the hexadecimal representation string of the sum.