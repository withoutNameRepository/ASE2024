 ```
def all_right_truncatable_prime(n):
# Initialize an empty list to store the prime numbers
primes = []

# Loop through the range of numbers from 2 to n-1
for i in range(2, n):

    # Check if the number is a prime number
    if is_prime(i):

        # Check if the number is right-truncatable prime number
        if is_right_truncatable_prime(i):

            # Add the prime number to the list of prime numbers
            primes.append(i)

# Return the sorted list of prime numbers
return sorted(primes)






def is_prime(n):

    # Check if n is greater than 1
    if n > 1:

        # Loop through the range of numbers from 2 to the square root of n
        for i in range(2, int(n**0.5) + 1):

            # Check if i divides n without leaving a remainder
            if n % i == 0:

                # Return False since n is not prime
                return False

    # Return True since n is prime
    return True





def is_right_truncatable_prime(n):

    # Check if the number is a prime number
    if not is_prime(n):

        # Return False since the number is not a prime number
        return False





    # Initialize an empty string to store the number in base 10
    num = ''

    # Loop through the digits of n in reverse order
    for digit in str(n)[::-1]:

        # Add the digit to the end of the string
        num += digit





    # Check if the number is a prime number
    if not is_prime(int(num)):

        # Return False since the number is not a prime number
        return False





    # Return True since the number is a right-truncatable prime number
    return True
















```