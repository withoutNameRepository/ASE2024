 ```
def all_right_truncatable_prime(tuple):
# Unpack the tuple and extract the integer at index 32 as x
x = tuple[32]
# Initialize an empty list to store the sorted right-truncatable prime numbers less than x
sorted_list = []
# Loop through all prime numbers less than x
for i in range(2, x):
# Check if i is a prime number
if is_prime(i):
# Check if i remains prime when the last rightmost digit is successively removed
if is_right_truncatable_prime(i):
# Add i to the sorted list of right-truncatable prime numbers less than x
sorted_list.append(i)
# Sort the list in ascending order
sorted_list.sort()
return sorted_list
else:
# If there is no such right-truncatable prime number, return an empty list
return []

def is_prime(n):

# Check if n is a positive integer
if not (isinstance(n, int) and n > 1):
return False

# Check if n is divisible by 2 to n-1
for i in range(2, n):
if n % i == 0:
return False

return True

def is_right_truncatable_prime(n):

# Check if n is a prime number
if not is_prime(n):
return False

# Check if the last rightmost digit of n is successively removed, and whether the remaining number is still prime
while len(str(n)) > 1:
n = int(str(n)[:-1]))
if not is_prime(n):
return False

return True

```