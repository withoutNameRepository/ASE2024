 ```
def all_right_truncatable_prime(x):
	# Initialize an empty list to store the right-truncatable prime numbers
	rtrp = []

	# Loop through the range of prime numbers less than x

	for i in range(2, x):

		# Check if i is a prime number

		if is_prime(i):

			# Initialize an empty string to store the last rightmost digit of i

			last_digit = ""

			# Loop through the digits of i in reverse order

			for j in range(len(str(i)) - 1, -1, -1):

				# Check if j is equal to the length of the string representation of i minus one

				if j == len(str(i)) - 1:

					# Append the last rightmost digit of i to the string last_digit

					last_digit += str(i)[j]

				else:

					# Check if the digit at position j in the string representation of i is equal to the digit at position j - 1 in the string representation of i

					if str(i)[j] == str(i)[j - 1]:

						# Append the last rightmost digit of i to the string last_digit

						last_digit += str(i)[j]

					else:

						# Break out of the loop since the last rightmost digit of i has been found

						break


			# Check if the string last_digit is not empty

			if last_digit != "":

				# Check if the integer represented by the string last_digit is prime

				if is_prime(int(last_digit)):

					# Append i to the list rtrp since it is a right-truncatable prime number

					rtrp.append(i)

	# Sort the list rtrp in ascending order

	return sorted(rtrp)


def is_prime(n):

	# Check if n is greater than 1

	if n > 1:

		# Initialize a variable to store the value of n - 1

		m = n - 1

		# Loop through the range of integers from 2 to the square root of m

		for i in range(2, int(m ** 0.5) + 1)):

			# Check if i is a factor of m

			if m % i == 0:

				# Return False since n is not prime

				return False


	# Return True since n is prime

	return True
```