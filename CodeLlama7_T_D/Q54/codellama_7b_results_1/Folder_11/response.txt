 ```
def all_right_truncatable_prime(tuple):
	# Initialize an empty list to store the prime numbers
	prime_numbers = []

	# Loop through each integer in the tuple
	for i in range(len(tuple)):
		x = tuple[i]

		# Check if x is a prime number
		if is_prime(x):

			# Loop through each digit in the decimal representation of x
			for j in range(len(str(x)))):
				digit = str(x)[j]

				# Check if removing the last rightmost digit from x results in a prime number
				if is_prime(int(str(x)[:j]) + int(str(x)[j+1:])):
					prime_numbers.append(x)

	# Return the sorted list of all right-truncatable prime numbers less than x, or an empty list if no such number exists
	return sorted(prime_numbers)


def is_prime(n):
	# Check if n is a positive integer
	if not (type(n) == int and n > 0):
		raise ValueError("Argument must be a positive integer")

	# Return True if n is a prime number, or False otherwise
	return all(n % i for i in range(2, int(n ** 0.5) + 1))
```