 ```
def all_right_truncatable_prime(tuple):
    # Initialize an empty list for the output
    output = []

    # Iterate through the tuple
    for num in tuple:
        # Check if the number is a prime number
        if is_prime(num):
            # If it is, check if it is right-truncatable prime
            if is_right_truncatable_prime(num):
                # If it is, add it to the output list
                output.append(num)

    # Sort the output list in descending order
    output.sort(reverse=True)

    return output

# Check if a number is prime
def is_prime(n):
    # If the number is less than 2, it is not prime
    if n < 2:
        return False

    # Iterate from 2 to the square root of the number
    for i in range(2, int(n ** 0.5) + 1):
        # If the number is divisible by any number between 2 and the square root of the number, it is not prime
        if n % i == 0:
            return False

    # If the number makes it all the way to the end, it is prime
    return True

# Check if a right-truncatable prime number exists for a given number
def is_right_truncatable_prime(num):
    # If the number is not prime, there cannot be a right-truncatable prime number for it
    if not is_prime(num):
        return False

    # Check if the number remains prime when successively removing the last rightmost digit
    while num > 1:
        temp = num % 10
        num = int(str(num)[:-1])

        # If the number is not prime after removing the last rightmost digit, there cannot be a right-truncatable prime number for it
        if not is_prime(num):
            return False

    # If the number makes it all the way to 1 without becoming non-prime, it is a right-truncatable prime number
    return True
```