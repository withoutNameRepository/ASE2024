 ```
def all_right_truncatable_prime(tuple):
    x = tuple[6]
    prime_numbers = []

    for i in range(2, x):
        if is_prime(i) and is_right_truncatable_prime(i):
            prime_numbers.append(i)

    return sorted(prime_numbers, reverse=True)

def is_prime(n):
    if n < 2:
        return False

    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    return True

def is_right_truncatable_prime(n):
    digits = list(str(n))

    for i in range(len(digits)):
        if int(''.join(digits[:-i])) != n:
            return False

    return True
```
# (modified)
# Test cases
assert all_right_truncatable_prime((2, 3, 5, 7, 11, 13)) == [13]
assert all_right_truncatable_prime((2, 3, 5, 7, 11, 13, 17)) == [13, 17]
assert all_right_truncatable_prime((2, 3, 5, 7, 11, 13, 17, 19)) == [13, 17, 19]
assert all_right_truncatable_prime((2, 3, 5, 7, 11, 13, 17, 19, 23)) == [13, 17, 19, 23]
