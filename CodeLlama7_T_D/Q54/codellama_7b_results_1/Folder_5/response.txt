 ```
def all_right_truncatable_prime(x):
# Initialize an empty list to store the prime numbers
prime_numbers = []
# Iterate through the range of numbers less than x
for i in range(2, x):
# Check if i is a prime number using the Sieve of Eratosthenes algorithm
if is_prime(i):
# Check if i is a right-truncatable prime number by removing its last rightmost digit and checking if it remains prime
if is_right_truncatable_prime(i, x):
# If i is a right-truncatable prime number, add it to the list of prime numbers
prime_numbers.append(i)
return sorted(prime_numbers)
```
This code defines a function called `all_right_truncatable_prime` that takes an argument which is a tuple of positive integers. The function iterates through the range of numbers less than x and checks if each number is a prime number using the Sieve of Eratosthenes algorithm. If a number is a prime number, it checks if it is a right-truncatable prime number by removing its last rightmost digit and checking if it remains prime. If i is a right-truncatable prime number, it adds it to the list of prime numbers. The function returns the sorted list of all right-truncatable prime numbers less than x.