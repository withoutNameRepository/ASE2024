 ```
def all_right_truncatable_prime(tuple):
    # Initialize an empty list to store the prime numbers
    prime_list = []

    # Iterate through each element in the tuple
    for i in range(len(tuple)):

        # Get the current element in the tuple
        curr_element = tuple[i]

        # Check if the current element is a prime number
        if is_prime(curr_element):

            # If the current element is a prime number, check if it is a right-truncatable prime number
            if is_right_truncatable_prime(curr_element):

                # If the current element is a right-truncatable prime number, add it to the prime list
                prime_list.append(curr_element)

    # Return the sorted list of all right-truncatable prime numbers less than x
    return sorted(prime_list)

# Check if a number is prime
def is_prime(n):

    # Check if n is greater than 1
    if n > 1:

        # Iterate from 2 to the square root of n
        for i in range(2, int(n ** 0.5) + 1):

            # If the remainder of n divided by i is zero, return False
            if n % i == 0:
                return False

    # Return True if the number is prime
    return True

# Check if a number is a right-truncatable prime number
def is_right_truncatable_prime(n):

    # Check if the number is prime
    if not is_prime(n):
        return False

    # Iterate from 1 to the length of the number in string format
    for i in range(1, len(str(n)))):

        # Get the substring of the number starting from the end and going for i characters
        substr = str(n)[-i:]

        # Check if the substring is equal to the original number
        if substr == str(n):
            return True

    # If the number does not meet the criteria, return False
    return False
```