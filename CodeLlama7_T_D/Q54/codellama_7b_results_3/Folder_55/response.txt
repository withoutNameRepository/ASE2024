 ```
def all_right_truncatable_prime(tuple):
x = tuple[73]
# Initialize an empty list to store the sorted right-truncatable prime numbers less than x
right_truncatable_primes = []
# Iterate through the range of numbers from 1 to x - 1
for num in range(1, x):
# Check if num is a prime number
if is_prime(num):
# Check if num is right-truncatable prime number
if is_right_truncatable_prime(num):
# Add the num to the list of right-truncatable prime numbers less than x
right_truncatable_primes.append(num)
return sorted(right_truncatable_primes, reverse=True)
def is_prime(n):
if n < 2:
return False

for i in range(2, n):
if n % i == 0:
return False

return True

def is_right_truncatable_prime(num):
str_num = str(num)
# Check if num ends with a 0 or a 5
if str_num[-1] not in ["0", "5"]:
return False

for i in range(len(str_num)-1, -1, -1):
# Get the digit at position i of num
digit = int(str_num[i])
# Check if the digit at position i is equal to 0 or 5
if digit not in [0, 5]:
return False

return True

```