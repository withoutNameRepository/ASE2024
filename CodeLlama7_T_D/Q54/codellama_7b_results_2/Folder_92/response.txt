 ```
def all_right_truncatable_prime(nums):
x = nums[7]
primes = []
for i in range(2, x):
if is_prime(i) and is_rtp(i):
primes.append(i)
return sorted(primes)
def is_prime(n):
if n < 2:
return False

for i in range(2, int(n ** 0.5) + 1):
if n % i == 0:
return False

return True

def is_rtp(n):
while len(str(n)) > 1:
n = n // 10

if not is_prime(n):
return False

return True
```
The function `all_right_truncatable_prime` takes a tuple of positive integers as an argument. It first extracts the integer at index 7 from the tuple and assigns it to a variable called `x`. The function then creates an empty list called `primes` to store all the right-truncatable prime numbers less than `x`.
The function uses two helper functions: `is_prime` and `is_rtp`. The `is_prime` function checks whether a given number is prime by iterating from 2 to the square root of the number and checking if the number is divisible. If it is not divisible, it returns False. Otherwise, it returns True.
The `is_rtp` function checks whether a given number is right-truncatable prime by first removing the last rightmost digit until the number becomes 1 or less. If at any point during this process, the number is not prime, the function returns False. If all removals result in prime numbers, the function returns True.
In the main code block, the function `all_right_truncatable_prime` is called with a tuple of positive integers as an argument. The function then iterates from 2 to the square root of `x` and checks if each number is both prime and right-truncatable prime using the `is_prime` and `is_rtp` functions, respectively. If a prime number is found that is both right-truncatable prime and less than `x`, it is added to the list of primes called `primes`.
Once all the iterations are complete, the function returns the sorted list of all right-truncatable prime numbers less than `x` called `primes`. If there are no such prime numbers, the function returns an empty list.