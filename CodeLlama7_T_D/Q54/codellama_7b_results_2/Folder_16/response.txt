 Here's a possible implementation of the `all_right_truncatable_prime` function:
```python
def all_right_truncatable_prime(tuple):
    x = tuple[792]
    prime_numbers = []
    for i in range(2, x):
        if is_prime(i) and is_right_truncatable_prime(i):
            prime_numbers.append(i)
    return sorted(prime_numbers)

def is_prime(n):
    if n < 2:
        return False

    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    return True

def is_right_truncatable_prime(n):
    if n < 10 or n % 10 == 0:
        return False

    for i in range(9, -1, -1):
        if n % 10 != i and is_prime(n % 10 ** i):
            return True

    return False
```
This code defines two functions `is_prime` and `is_right_truncatable_prime`. The former determines whether a given number is prime, while the latter checks whether a given number is right-truncatable prime. Both of these functions are used in the `all_right_truncatable_prime` function to retrieve all right-truncatable prime numbers less than a certain number `x`. The returned list is sorted in ascending order.