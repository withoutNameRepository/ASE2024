 ```
def all_right_truncatable_prime(num):
	# Initialize an empty list to store the prime numbers
	prime_list = []

	# Iterate through the numbers less than x

	for i in range(2, num):

		# Check if the number is a prime number

		if is_prime(i):

			# Check if the number is right-truncatable prime number

			if is_right_truncatable_prime(i):

				# Add the prime number to the list of prime numbers

				prime_list.append(i)

	# Sort the list of prime numbers in descending order

	return sorted(prime_list, reverse=True)

# Check if a number is prime using the Sieve of Eratosthenes algorithm

def is_prime(n):

	if n <= 1:

		return False

	if n <= 3:

		return True

	if n % 2 == 0 or n % 3 == 0:

		return False

	i = 5

	while i * i <= n:

		if n % i == 0 or n % (i + 2) == 0:

			return False

		i += 6

	return True

# Check if a number is right-truncatable prime number

def is_right_truncatable_prime(n):

	if not is_prime(n):

		return False

	while len(str(n)) > 1:

		n = int(str(n)[:-1])

		if not is_prime(n):

			return False

	return True
```