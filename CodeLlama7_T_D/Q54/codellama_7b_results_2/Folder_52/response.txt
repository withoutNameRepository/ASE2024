 ```
def all_right_truncatable_prime(tuple):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through the tuple of positive integers
    for i in range(len(tuple)):

        # Check if the current number is a prime number
        if is_prime(tuple[i]):

            # If it is, append it to the list of prime numbers
            prime_numbers.append(tuple[i])

    # Loop through the list of prime numbers and check if they are right-truncatable prime numbers
    for i in range(len(prime_numbers)):

        # Check if the current number is a right-truncatable prime number
        if is_right_truncatable_prime(prime_numbers[i]):

            # If it is, add it to the list of right-truncatable prime numbers
            right_truncatable_prime_numbers.append(prime_numbers[i])

    # Sort the list of right-truncatable prime numbers in descending order
    right_truncatable_prime_numbers = sorted(right_truncatable_prime_numbers, reverse=True)

    # Return the sorted list of right-truncatable prime numbers
    return right_truncatable_prime_numbers

# Function to check if a number is prime
def is_prime(n):

    # Check if n is less than 2
    if n < 2:

        # If it is, return False
        return False

    # Loop through the numbers from 2 to the square root of n
    for i in range(2, int(n ** 0.5) + 1):

        # Check if i divides n
        if n % i == 0:

            # If it does, return False
            return False

    # If we reach this point, the number must be prime
    return True

# Function to check if a right-truncatable prime number is still prime after successively removing its last rightmost digit
def is_right_truncatable_prime(n):

    # Check if n is less than 2
    if n < 2:

        # If it is, return False
        return False

    # Loop through the numbers from 2 to the square root of n
    for i in range(2, int(n ** 0.5) + 1):

        # Check if i divides n
        if n % i == 0:

            # If it does, return False
            return False

    # If we reach this point, the number must be prime and right-truncatable
    return True
```