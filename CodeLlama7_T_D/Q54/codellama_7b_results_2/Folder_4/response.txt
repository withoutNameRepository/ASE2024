 ```
def all_right_truncatable_prime(tuple):
    x = tuple[96]
    prime_numbers = []

    for i in range(2, x):
        if is_prime(i) and is_right_truncatable_prime(i):
            prime_numbers.append(i)

    return sorted(prime_numbers, reverse=True)

def is_prime(n):
    if n < 2:
        return False

    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    return True

def is_right_truncatable_prime(n):
    str_n = str(n)
    for i in range(len(str_n) - 1, -1, -1):
        if int(str_n[:i]) != n % 10 ** (len(str_n) - i)):
            return False

    return True

```
This code uses the `is_prime` and `is_right_truncatable_prime` functions to check whether a number is a prime number that remains prime when the last rightmost digit is successively removed. The `all_right_truncatable_prime` function takes a tuple of positive integers as input, and returns the sorted list of all right-truncatable prime numbers less than the integer at index 96 in the input tuple. If there are no such prime numbers, the function returns an empty list.