 ```
def all_right_truncatable_prime(tuple_of_positive_integers):
x = tuple_of_positive_integers[429]
list_of_all_right_truncatable_prime_numbers = []
for i in range(2, x):
if is_prime(i) and is_right_truncatable_prime(i):
list_of_all_right_truncatable_prime_numbers.append(i)
return sorted(list_of_all_right_truncatable_prime_numbers, reverse=True)
else:
return []

def is_prime(n):
if n < 2:
return False

for i in range(2, int(n ** 0.5) + 1):
if n % i == 0:
return False

return True

def is_right_truncatable_prime(n):
string_of_n = str(n)
length_of_n = len(string_of_n)
for i in range(length_of_n - 1):
substring_of_n = string_of_n[i:]
if not is_prime(int(substring_of_n)):
return False

return True
```