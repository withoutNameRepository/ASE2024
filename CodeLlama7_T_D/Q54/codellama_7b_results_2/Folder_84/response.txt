 ```
def all_right_truncatable_prime(tuple):
    x = tuple[630]
    prime_numbers = []

    for i in range(2, x):
        if is_prime(i) and is_right_truncatable_prime(i, x):
            prime_numbers.append(i)

    return sorted(prime_numbers, reverse=True)
```
This code will generate all right-truncatable prime numbers less than the number at index 630 in the given tuple. It uses two helper functions: is_prime and is_right_truncatable_prime. The first function checks if a given number is prime by dividing it by all numbers smaller than it and checking if there is any remainder. The second function checks if a given number is right-truncatable prime by removing the last rightmost digit of the number repeatedly until the number becomes 1, and checking if each number that is removed is prime. If the number is right-truncatable prime, all the numbers removed from it are prime, so they are added to a list called prime_numbers. After all the numbers have been checked, the list is sorted in descending order and returned as the final result.