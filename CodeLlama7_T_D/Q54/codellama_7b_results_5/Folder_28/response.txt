 ```
def all_right_truncatable_prime(tuple):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through each integer in the tuple
    for i in range(len(tuple)):
        x = tuple[i]

        # Check if x is a prime number
        if is_prime(x):

            # Initialize an empty string to store the last rightmost digit of x
            last_digit = ""

            # Loop through each digit in the representation of x in base 10
            for j in range(len(str(x)))):
                current_digit = str(x)[j]

                # Check if the current digit is the last rightmost digit of x
                if j == len(str(x))) - 1:
                    last_digit = current_digit

            # If the last rightmost digit of x is not 0, then x is a right-truncatable prime number
            if last_digit != "0":
                prime_numbers.append(x)

    # Return the sorted list of all right-truncatable prime numbers less than x
    return sorted(prime_numbers)

# Function to check if a number is prime or not
def is_prime(n):
    if n <= 1:
        return False

    for i in range(2, int(n ** 0.5) + 1)):
        if n % i == 0:
            return False

    return True
```