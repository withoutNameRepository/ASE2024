 ```
def all_right_truncatable_prime(tuple):
    # Initialize an empty list to store the right-truncatable prime numbers
    right_truncatable_primes = []

    # Loop through each element in the tuple

    for i in range(len(tuple)):

        # Extract the integer at index 767 from the tuple

        x = tuple[767]

        # Initialize a counter variable to keep track of the number of right-truncatable prime numbers less than x

        count = 0

        # Loop through each number less than x

        for j in range(1, x + 1):

            # Check if the current number is a prime number and if it is right-truncatable prime number

            if (j % i == 0) and is_prime(j) and is_right_truncatable_prime(j):

                # Increment the counter variable by 1

                count += 1

        # If there are any right-truncatable prime numbers less than x, return the sorted list of all such prime numbers in descending order

        if count > 0:

            return sorted(right_truncatable_primes, reverse=True)

        # Otherwise, return an empty list

        else:

            return right_truncatable_primes

def is_prime(n):

    # Check if n is greater than 1

    if n > 1:

        # Check if n is divisible by 2 to n-1

        for i in range(2, n):

            # If n is divisible by i, it is not prime

            if n % i == 0:

                return False

    # If n is greater than 1 and it is not divisible by 2 to n-1, it is prime

    return True

def is_right_truncatable_prime(n):

    # Check if n is a prime number

    if is_prime(n) == False:

        # If n is not a prime number, it is not right-truncatable prime number

        return False

    # Initialize an empty list to store the digits of n in reverse order

    digits = []

    # Loop through each digit of n in reverse order

    while n > 0:

        # Append the current digit to the end of the list

        digits.append(n % 10)

        # Divide n by 10 to get the next digit

        n = n // 10

    # Initialize a variable to keep track of whether or not the current digit is equal to the previous digit

    prev_digit = digits[len(digits) - 1]

    # Loop through each digit in reverse order, starting from the second-to-last digit

    for i in range(len(digits) - 2, -1, -1):

        # If the current digit is not equal to the previous digit, return False

        if digits[i] != prev_digit:

            return False

        # Otherwise, update the previous digit variable to the current digit

        else:

            prev_digit = digits[i]

    # If all digits are equal, return True

    return True
```