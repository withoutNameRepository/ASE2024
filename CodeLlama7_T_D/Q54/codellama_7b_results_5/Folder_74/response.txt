 ```
def all_right_truncatable_prime(tuple):
    # Initialize a list to store the prime numbers
    prime_numbers = []

    # Iterate through the tuple
    for number in tuple:
        if is_prime(number) and is_right_truncatable_prime(number):
            # If the number is a prime number and a right-truncatable prime number, add it to the list of prime numbers
            prime_numbers.append(number)

    # Return the sorted list of all right-truncatable prime numbers less than x
    return sorted(prime_numbers)

# Define a function to check if a number is a prime number
def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to n-1
        for i in range(2, n):
            # If i divides n and i does not equal n, return False
            if n % i == 0 and i != n:
                return False

    # If the loop completes successfully, return True
    return True

# Define a function to check if a number is a right-truncatable prime number
def is_right_truncatable_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to n-1
        for i in range(2, n):
            # If the last rightmost digit of n is not equal to i, return False
            if int(str(n)[-1]) != i:
                return False

    # If the loop completes successfully, return True
    return True
```