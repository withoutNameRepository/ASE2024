 Here's a Python implementation of the `submatrix_with_particular_sum` function:
```python
import numpy as np

def submatrix_with_particular_sum(matrix, target_sum):
    # Initialize an empty list to store the submatrices
    submatrices = []

    for i in range(matrix.shape[0] - 1):
        for j in range(matrix.shape[1] - 1):
            # Calculate the sum of the current submatrix
            current_sum = matrix[i:i+2, j:j+2].sum()
            if current_sum == target_sum:
                # If the current submatrix has the desired sum, add it to the list
                submatrices.append(matrix[i:i+2, j:j+2])
    return submatrices
```
This function takes two arguments: a two-dimensional numpy matrix of integers and an integer representing the target sum. It returns a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals the target sum. If no such submatrix is found, the function returns an empty list.
For example, let's say we have a 4x4 numpy array representing a matrix:
```python
import numpy as np

# Define a 4x4 numpy array representing a matrix
matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
```
To find all submatrices of this matrix such that the sum of all integers in each submatrix equals 398, we can call the `submatrix_with_particular_sum` function as follows:
```python
# Call the submatrix_with_particular_sum function
submatrices = submatrix_with_particular_sum(matrix, 398)
```
The `submatrices` variable will contain a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 398.