 Here's a possible implementation of the `submatrix_with_particular_sum` function in Python:
```python
import numpy as np

def submatrix_with_particular_sum(matrix, target_sum):
    # Initialize an empty list to store the submatrices
    submatrices = []

    # Loop over each row of the matrix
    for i in range(matrix.shape[0]):
        # Loop over each column of the matrix
        for j in range(matrix.shape[1]):
            # Calculate the sum of all elements in the submatrix
            submatrix_sum = np.sum(matrix[i:,j]) + np.sum(matrix[i,j+1:]) - matrix[i,j]
            # Check if the sum of all elements in the submatrix is equal to the target sum
            if submatrix_sum == target_sum:
                # If so, add the submatrix to the list of submatrices
                submatrices.append(matrix[i:,j])

    # Return the list of submatrices that have a sum equal to the target sum
    return submatrices
```
This function takes two arguments: `matrix`, which is a two-dimensional numpy matrix of integers; and `target_sum`, which is an integer representing the target sum for the submatrices. The function returns a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals the target sum. If no such submatrix is found, the function returns an empty list.
Here's an example usage of this function:
```python
# Create a two-dimensional numpy matrix of integers
matrix = np.array([[1, 2], [3, 4]])
# Call the 'submatrix_with_particular_sum' function with the target sum set to -97
submatrices = submatrix_with_particular_sum(matrix, -97)
# Print the list of submatrices
#print(submatrices)
```
This code will output `[]`, indicating that no submatrix in the given matrix has a sum equal to -97.