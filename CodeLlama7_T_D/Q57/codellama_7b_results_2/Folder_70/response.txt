 Here is a possible implementation of the given function:
```python
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Initialize an empty list to store the submatrices
    submatrices = []
    # Loop over each row of the matrix
    for i in range(matrix.shape[0]):
        # Loop over each column of the matrix
        for j in range(matrix.shape[1]):
            # Initialize a variable to store the sum of the submatrix
            sum = 0
            # Loop over each element of the submatrix
            for k in range(i, i + 2):
                for l in range(j, j + 2):
                    # Add the current element to the sum
                    sum += matrix[k][l]
            # Check if the sum is equal to 411
            if sum == 411:
                # If it is, add the submatrix to the list of submatrices
                submatrices.append(matrix[i:i + 2, j:j + 2])
    # Return the list of submatrices
    return submatrices
```
This function takes a two-dimensional numpy matrix of integers as input, and returns the list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 411. If no such submatrix is found, the function should return an empty list.