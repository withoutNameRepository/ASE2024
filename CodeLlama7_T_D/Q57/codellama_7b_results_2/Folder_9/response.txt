 ```
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Initialize a list to store the submatrices
    submatrices = []

    # Loop over each row of the matrix
    for i in range(matrix.shape[0]):
        # Loop over each column of the matrix
        for j in range(matrix.shape[1]):
            # Initialize a variable to store the sum of the submatrix
            submatrix_sum = 0

            # Loop over each element of the submatrix
            for row in range(i, i + 2):
                for col in range(j, j + 2):
                    # Add the current element to the sum
                    submatrix_sum += matrix[row][col]

                    # Check if the sum is equal to -86
                    if submatrix_sum == -86:
                        # If it is, add the submatrix to the list of submatrices
                        submatrices.append(matrix[i:i + 2, j:j + 2])

                        # Break out of the inner loops
                        break

    return submatrices

# Test the function with a small matrix
small_matrix = np.array([[1, 2], [3, 4]])
#print(submatrix_with_particular_sum(small_matrix))

# Test the function with a larger matrix
larger_matrix = np.random.randint(-100, 100, size=(5, 5))
#print(submatrix_with_particular_sum(larger_matrix))
```