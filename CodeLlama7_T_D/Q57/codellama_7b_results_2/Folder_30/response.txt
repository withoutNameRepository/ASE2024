 Here's a possible implementation of the `submatrix_with_particular_sum` function:
```python
import numpy as np

def submatrix_with_particular_sum(matrix, sum):
    # Initialize an empty list to store the submatrices
    submatrices = []

    # Loop through each row of the matrix
    for i in range(matrix.shape[0]):
        # Loop through each column of the matrix
        for j in range(matrix.shape[1]):
            # Initialize an empty list to store the elements of the submatrix
            submatrix = []

            # Loop through each row of the submatrix
            for k in range(i, i + 3):
                # Loop through each column of the submatrix
                for l in range(j, j + 3):
                    # Add the element to the list of elements
                    submatrix.append(matrix[k][l]])
            # Check if the sum of the elements in the submatrix is equal to the target sum
            if sum(submatrix) == sum:
                # Add the submatrix to the list of submatrices
                submatrices.append(submatrix)
    return submatrices
```
This function takes two arguments: `matrix`, which is a two-dimensional numpy matrix of integers, and `sum`, which is an integer representing the target sum. The function returns a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 21. If no such submatrix is found, the function returns an empty list.
The function first initializes an empty list to store the submatrices. Then, it loops through each row of the matrix and for each row, it loops through each column of the matrix. For each element in the matrix, the function checks if the sum of the elements in the submatrix formed by including the current element is equal to the target sum. If it is, the function adds the submatrix to the list of submatrices.
The function then returns the list of submatrices that meet the condition.