 Here is a possible implementation of the `submatrix_with_particular_sum` function:
```python
import numpy as np

def submatrix_with_particular_sum(matrix, sum):
    # Initialize an empty list to store the submatrices
    submatrices = []

    # Loop over the rows and columns of the matrix
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            # Extract a submatrix from the current row and column
            submatrix = matrix[i][j]

            # Check if the sum of the integers in the submatrix equals 382
            if np.sum(submatrix) == sum:
                # If it does, add the submatrix to the list of submatrices
                submatrices.append(submatrix)

    # Return the list of submatrices
    return submatrices
```
This function takes two arguments: `matrix`, which is a two-dimensional numpy matrix of integers, and `sum`, which is an integer representing the desired sum for each submatrix. The function returns a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 382. If no such submatrix is found, the function returns an empty list.
For example, if we have a two-dimensional numpy matrix `matrix` with the following values:
```python
array([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
```
We can call the `submatrix_with_particular_sum` function as follows:
```python
>>> submatrix_with_particular_sum(matrix, 382)
[[1, 2, 3]]
```
In this example, we called the function with a matrix and a sum of `382`. The function returned the list `[1, 2, 3]`, which represents the submatrix with the desired sum.