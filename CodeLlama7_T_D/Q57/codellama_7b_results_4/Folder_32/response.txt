 ```
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Initialize an empty list to store the submatrices
    submatrices = []

    # Loop through each row of the matrix
    for i in range(matrix.shape[0]):
        # Loop through each column of the matrix
        for j in range(matrix.shape[1]):
            # Initialize a variable to store the sum of the submatrix
            submatrix_sum = 0

            # Loop through each element of the submatrix
            for k in range(i, i + 3):
                for l in range(j, j + 3):
                    # Add the element to the submatrix sum
                    submatrix_sum += matrix[k][l]

                    # If the submatrix sum is equal to the target sum of 901, add the submatrix to the list of submatrices
                    if submatrix_sum == 901:
                        submatrices.append(matrix[i:i + 3][j:j + 3]])

            # If the submatrix sum is not equal to the target sum of 901, continue looping through the matrix elements
            if submatrix_sum != 901:
                continue


    # Return the list of submatrices that have a sum of 901
    return submatrices

# Test the function with a sample matrix
matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
submatrices = submatrix_with_particular_sum(matrix)
#print(submatrices)
```