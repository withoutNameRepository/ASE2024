 ```
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Check if the matrix is empty
    if matrix.size == 0:
        return []

    # Initialize an empty list to store the submatrices
    submatrices = []

    # Loop over each row of the matrix
    for i in range(matrix.shape[0]):
        # Create a copy of the original matrix
        submatrix = np.copy(matrix)

        # Delete the first column and row from the submatrix
        submatrix = np.delete(submatrix, 0, axis=1)
        submatrix = np.delete(submatrix, i, axis=0)

        # Check if the sum of all integers in the submatrix is equal to 100
        if np.sum(submatrix) == 100:
            # Add the submatrix to the list of submatrices
            submatrices.append(submatrix)

    # Return the list of submatrices
    return submatrices

# Test the function with a sample matrix
matrix = np.array([[1, 2], [3, 4]])
#print(submatrix_with_particular_sum(matrix))

```
This code creates a function called 'submatrix_with_particular_sum' that takes one argument which is a two-dimensional numpy matrix of integers. The function returns the list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 100. If no such submatrix is found, the function should return an empty list.
Here's how to use this code:
Let's say we have a numpy array called "matrix" which has the following values:
[[1, 2], [3, 4]]
We can call the function as follows:
submatrix_with_particular_sum(matrix)
This will return a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 100. In this case, the function will return an empty list because there are no submatrices with the required property.