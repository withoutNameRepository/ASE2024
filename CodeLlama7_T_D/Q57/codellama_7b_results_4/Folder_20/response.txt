 Here is a possible implementation of the `submatrix_with_particular_sum` function in Python using NumPy:
```python
import numpy as np

def submatrix_with_particular_sum(matrix, sum):
    # Initialize an empty list to store the submatrices
    submatrices = []
    # Iterate over each row of the matrix
    for i in range(matrix.shape[0]):
        # Iterate over each column of the matrix
        for j in range(matrix.shape[1]):
            # Create a copy of the original matrix without the current row and column
            submatrix = np.copy(matrix)
            del submatrix[i, :]
            del submatrix[:, j]
            # Check if the sum of all integers in the submatrix is equal to -57
            if np.sum(submatrix) == sum:
                # Add the submatrix to the list of submatrices
                submatrices.append(submatrix)
    return submatrices
```
This function takes two arguments: `matrix`, a two-dimensional NumPy matrix of integers, and `sum`, an integer representing the desired sum for the submatrices. The function returns a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals -57. If no such submatrix is found, the function returns an empty list.
Here's an example usage of the `submatrix_with_particular_sum` function:
```python
# Define a 3x4 matrix with integer elements
matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
# Call the function with the desired sum
submatrices = submatrix_with_particular_sum(matrix, -57)
#print(submatrices)
```
This code will output a list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals -57. In this case, there are no such submatrices, so the function returns an empty list.