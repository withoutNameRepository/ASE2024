 Here is a possible implementation of the `submatrix_with_particular_sum` function in Python:
```
import numpy as np

def submatrix_with_particular_sum(matrix):
    # Initialize an empty list to store the submatrices
    submatrices = []

    # Iterate over each row of the matrix
    for i in range(matrix.shape[0]):
        # Iterate over each column of the matrix
        for j in range(matrix.shape[1]):
            # Extract a submatrix from the original matrix
            submatrix = matrix[i:, j:]

            # Check if the sum of all integers in the submatrix equals -936
            if np.sum(submatrix) == -936:
                # If the condition is met, add the submatrix to the list of submatrices
                submatrices.append(submatrix)

    # Return the list of all submatrices that satisfy the condition
    return submatrices
```
This implementation uses a nested loop to iterate over each row and column of the matrix, respectively. For each element in the matrix, it extracts a submatrix from the original matrix using slicing, and then checks if the sum of all integers in the submatrix equals -936. If the condition is met, the submatrix is added to a list of submatrices that satisfy the condition. Finally, the function returns the list of all submatrices that satisfy the condition.