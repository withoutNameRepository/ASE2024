 Here is a possible implementation of the `palindromes_between_indices` function:
```
def palindromes_between_indices(string, index1, index2):
    # Check if the input string and indices are valid
    if not isinstance(string, str) or not isinstance(index1, int) or not isinstance(index2, int)):
        raise ValueError("Invalid input: string must be a string, index1 and index2 must be integers.")
    # Check if the indices are within the bounds of the string
    if index1 < 0 or index1 >= len(string) or index2 < 0 or index2 >= len(string):
        raise ValueError("Invalid input: indices must be within the bounds of the string.")
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over all possible substrings between index1 and index2, inclusive
    for i in range(index1, index2 + 1):
        for j in range(i + 1, index2 + 1):
            substring = string[i:j]
            # Check if the substring is a palindrome of length at least 5
            if len(substring) < 5:
                continue

            if substring == substring[::-1]:
                palindromes.add(substring)
    return palindromes
```
This implementation first checks if the input string and indices are valid, and then iterates over all possible substrings between index1 and index2, inclusive. For each substring, it checks if it is a palindrome of length at least 5, and if so, adds it to the set of palindromes. Finally, it returns the set of palindromes.