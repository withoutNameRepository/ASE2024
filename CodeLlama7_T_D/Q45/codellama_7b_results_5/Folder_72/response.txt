 Here is a possible implementation of the `palindromes_between_indices` function in Python:
```python
def palindromes_between_indices(string):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each character in the string
    for i in range(len(string)):
        # Get the current character and its index
        char = string[i]
        idx = i + 1
        # Check if the character is a letter (not a space or other non-letter character)
        if char.isalpha():
            # Get the opposite index for the same character
            opp_idx = len(string) - idx

            # Loop through each possible pair of indices for the current character
            for j in range(idx, opp_idx + 1):
                # Check if the current index is within the specified range
                if idx >= 1 and idx <= 7:
                    # Get the corresponding character at the opposite index
                    opp_char = string[opp_idx]
                    # Check if the opposite character is a letter (not a space or other non-letter character)
                    if opp_char.isalpha():
                        # Get the current and opposite characters in lowercase, for case-insensitive comparison
                        cur_char = char.lower()
                        opp_char = opp_char.lower()
                        # Check if the current character is the same as the opposite character, and add the corresponding palindrome to the set
                        if cur_char == opp_char:
                            palindromes.add(cur_char + opp_char)
    return palindromes
```
This function takes a string argument and returns a set of all palindromes that can be created from any possible arrangement of the English letters in the given string, where each palindrome is at least 6 characters long and is formed by any combination of English letters that occur between index 1 to index 7, both inclusive.
The function first initializes an empty set to store the palindromes. Then it loops through each character in the input string using a nested for loop. For each character, the function checks if it is a letter (not a space or other non-letter character) by calling the `isalpha()` method on the current character. If the character is not a letter, the function continues to the next iteration of the inner loop.
If the character is a letter, the function gets the opposite index for the same character using the modulo operator (`%`) and subtracting 1 from the length of the input string. Then it loops through each possible pair of indices for the current character using another nested for loop. For each pair of indices, the function checks if the current index is within the specified range (index 1 to index 7, both inclusive). If the current index is not within the specified range, the function continues to the next iteration of the outer loop.
If the current index is within the specified range, the function gets the corresponding character at the opposite index using the modulo operator and subtracting 1 from the length of the input string. Then it checks if the opposite character is a letter (not a space or other non-letter character) by calling the `isalpha()` method on the current character. If the opposite character is not a letter, the function continues to the next iteration of the inner loop.
If both characters are letters, the function gets the current and opposite characters in lowercase, for case-insensitive comparison using the `lower()` method. Then it checks if the current character is the same as the opposite character, and adds the corresponding palindrome to the set using the `add()` method.
The function returns the set of all palindromes that can be created from any possible arrangement of the English letters in the given string, where each palindrome is at least 6 characters long and is formed by any combination of English letters that occur between index 1 to index 7, both inclusive.