 Here is a possible implementation of the `palindromes_between_indices` function:
```
def palindromes_between_indices(s):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over each possible length of palindrome
    for i in range(7, len(s) + 1):
        # Get the substring of length i starting from index 1
        substr = s[1:i]
        # Check if the substring is a palindrome
        if substr == substr[::-1]:
            # Add the palindrome to the set
            palindromes.add(substr)
    return palindromes
```
The function takes one argument, which is a string `s`. The function then iterates over each possible length of palindrome between 7 and the length of the input string. For each length of palindrome, the function gets the substring of that length starting from index 1 using slicing notation. Then it checks if the substring is a palindrome by comparing it with itself in reverse order. If it is a palindrome, then the function adds it to an empty set called `palindromes`. Finally, the function returns the set of all palindromes that can be created from the English letters of the given string that occur between index 1 and index 7, both inclusive.