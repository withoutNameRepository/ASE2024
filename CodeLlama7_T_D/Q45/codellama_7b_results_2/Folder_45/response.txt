 Here is a possible implementation of the `palindromes_between_indices` function:
```
def palindromes_between_indices(s):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each letter in the given string
    for i in range(len(s)):
        # Check if the letter is a vowel or a consonant
        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:
            # If the letter is a vowel, check if there are any vowels before and after it
            if i > 0 and s[i-1].lower() in ['a', 'e', 'i', 'o', 'u']:
                # If there are any vowels before and after the current letter, add the palindrome to the set of palindromes
                palindromes.add(s[i-1] + s[i].lower() + s[i+1].lower())
            else:
                # If there are no vowels before the current letter, check if there are any vowels after it
                if i < len(s) - 2 and s[i+2].lower() in ['a', 'e', 'i', 'o', 'u']:
                    # If there are any vowels after the current letter, add the palindrome to the set of palindromes
                    palindromes.add(s[i].lower() + s[i+1].lower() + s[i+2].lower())
        else:
            # If the letter is a consonant, check if there are any consonants before and after it
            if i > 0 and not s[i-1].isalpha():
                # If there are any consonants before the current letter, check if there are any vowels between them
                if i < len(s) - 2 and s[i+1].lower() in ['a', 'e', 'i', 'o', 'u']:
                    # If there are any vowels between the consonants, add the palindrome to the set of palindromes
                    palindromes.add(s[i-1].lower() + s[i].lower() + s[i+2].lower())
            else:
                # If there are no consonants before the current letter, check if there are any vowels after it
                if i < len(s) - 2 and s[i+2].lower() in ['a', 'e', 'i', 'o', 'u']:
                    # If there are any vowels after the current letter, add the palindrome to the set of palindromes
                    palindromes.add(s[i].lower() + s[i+1].lower() + s[i+2].lower())
    return palindromes
```