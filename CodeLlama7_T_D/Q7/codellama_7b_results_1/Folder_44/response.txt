 ```
def all_even_ints_inclusive(my_list):
    # Find the index of the first even integer in the list
    start_index = next((i for i, x in enumerate(my_list) if x % 2 == 0), None)
    # Find the index of the last even integer in the list
    end_index = next((i for i, x in enumerate(my_list) if x % 2 == 0), None)
    # Return an empty list if no even integers exist in the specified range
    if start_index is None or end_index is None:
        return []

    # Return a list of all even integers from index 13 to index 68, both inclusive
    return [x for x in my_list[start_index:end_index+1] if x % 2 == 0]
```
This code defines a function called `all_even_ints_inclusive` that takes a list of integers as input and returns the list of all even integers from index 13 to index 68, both inclusive. If no even integers exist in the specified range, the function will return an empty list.
The code first finds the index of the first and last even integers in the list using `next` and a generator expression. If either of these indices is None (i.e., there are no even integers in the list), the function returns an empty list.
Otherwise, the function constructs a new list containing only the even integers from index 13 to index 68, both inclusive. This is done using a list comprehension that takes each element x of the input list and checks whether it is even (i.e., x % 2 == 0). If an element is even, it is added to the output list.
Note that this code assumes that the input list contains at least one even integer. If no even integers exist in the list, the function will return an empty list.