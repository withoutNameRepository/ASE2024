 Here is a possible implementation of the `palindrome_of_length_n` function in Python:
```python
def palindrome_of_length_n(s):
    # Split the string into words
    words = s.split()

    # Initialize an empty set to store the palindromes
    palindromes = set()

    # Loop through each word in the string
    for word in words:

        # Check if the word is a palindrome
        if word == word[::-1]:

            # Add the palindrome to the set of palindromes
            palindromes.add(word)

# Return the set of palindromes
return palindromes
```
This implementation first splits the input string into individual words using the `split` method. It then initializes an empty set to store all the palindromes that are found in the input string.
For each word in the input string, the implementation checks if it is a palindrome by comparing it with its own reversed form. If the word is indeed a palindrome, it is added to the set of palindromes that is being constructed.
Finally, the implementation returns the set of all palindromes that were found in the input string.