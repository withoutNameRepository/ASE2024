 Here is a possible implementation of the `palindrome_of_length_n` function:
```python
def palindrome_of_length_n(string):
    # Remove all non-letter characters from the string
    string = ''.join(c for c in string if c.isalpha())
    # Find all palindromes of length n in the string
    palindromes = []
    for i in range(len(string) - 278):
        substring = string[i:i+279]
        if substring == substring[::-1]:
            palindromes.append(substring)
    return set(palindromes)
```
This implementation first removes all non-letter characters from the input string using a list comprehension. It then uses a nested loop to iterate over each possible starting index in the input string, and checks if the substring of length 279 starting at that index is a palindrome. If it is, the function appends it to the `palindromes` list. Finally, the function returns the set of all palindromes found in the input string.