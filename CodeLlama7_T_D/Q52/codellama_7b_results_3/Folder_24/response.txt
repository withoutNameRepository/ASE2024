 Here is a possible implementation of the `palindrome_of_length_n` function:
```python
def palindrome_of_length_n(string):
    # Convert the input string to lowercase
    string = string.lower()

    # Initialize an empty set to store the palindromes
    palindromes = set()

    # Loop through each substring of length n in the input string
    for i in range(len(string) - 1):
        # Check if the current substring is a palindrome
        if string[i:i+n] == string[i:i+n][::-1]:
            # If it is, add it to the set of palindromes
            palindromes.add(string[i:i+n])

    # Return the set of palindromes
    return palindromes
```
To test this code, you can call the function with a string argument, like this:
```python
#print(palindrome_of_length_n("abcdefghijklmnopqrstuvwxyz"))
```
This should output the set of all palindromes of length 29, where each palindrome is a substring of the given string.