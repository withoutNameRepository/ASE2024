 ```
def palindrome_of_length_n(string):
# Convert the string to lowercase for case-insensitive comparison
string = string.lower()

# Initialize an empty set to store the palindromes
palindromes = set()

# Iterate over the length of the string minus 1, since we need to find palindromes of length n and (n - 1)
for i in range(len(string) - 1):

# Check if the substring starting at index i and ending at index (i + n - 1) is a palindrome
if string[i:i+n] == string[i:i+n][::-1]:

# Add the palindrome to the set of palindromes
palindromes.add(string[i:i+n])

# Return the set of palindromes if it is not empty
if len(palindromes) > 0:
return palindromes

# Return an empty set if there are no palindromes in the given string
else:
return set()
```