 Here is a possible implementation of the `palindrome_of_length_n` function:
```python
def palindrome_of_length_n(string, n):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over each substring of length n in the input string
    for i in range(len(string) - n + 1):
        # Check if the current substring is a palindrome
        if string[i:i+n] == string[i:i+n][::-1]:
            # If it is, add it to the set of palindromes
            palindromes.add(string[i:i+n])
    # Return the set of palindromes
    return palindromes
```
This function takes two arguments: `string`, which is the input string that contains the substrings to be searched for palindromes, and `n`, which is the length of the palindromes to be found.
The function first initializes an empty set called `palindromes` to store the palindromes that are found. It then iterates over each substring of length `n` in the input string using a for loop. For each substring, it checks if it is a palindrome by comparing it with its reversed form. If it is a palindrome, it adds it to the set of palindromes.
Finally, the function returns the set of palindromes that were found in the input string.