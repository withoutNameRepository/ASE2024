 Here is a possible implementation of the `palindrome_of_length_n` function in Python:
```
def palindrome_of_length_n(string):
    # Check if the input string is empty or None
    if not string:
        return set()

    # Initialize an empty set to store the palindromes
    palindromes = set()

    # Loop through each character in the input string
    for i in range(len(string)):

        # Check if the current character is a letter
        if string[i].isalpha():

            # Create a substring of length n starting at index i
            substr = string[i:i+n]

            # Check if the substring is a palindrome
            if substr == substr[::-1]:

                # Add the palindrome to the set
                palindromes.add(substr)

    # Return the set of all palindromes of length n as substrings of the input string
    return palindromes
```
This implementation first checks if the input string is empty or None, and returns an empty set in that case. Otherwise, it initializes an empty set to store the palindromes and loops through each character in the input string. For each character, it checks if it is a letter using the `isalpha()` method, and if so, creates a substring of length n starting at that index using slicing. It then checks if the substring is a palindrome by comparing it to its reverse using the same slicing technique. If the substring is a palindrome, it adds it to the set of palindromes. Finally, it returns the set of all palindromes of length n as substrings of the input string.