 ```
def palindrome_of_length_n(string):
    # Split the string into substrings of length n
    substrings = [string[i:i+n] for i in range(len(string)-n+1)]
    # Create a set to store the palindromes
    palindromes = set()
    # Iterate over the substrings and check if they are palindromes
    for substring in substrings:
        if substring == substring[::-1]:
            palindromes.add(substring)
    return palindromes
```
This code defines a function called `palindrome_of_length_n` that takes one argument, a string, and returns the set of all palindromes of the length equal to 56, where each palindrome is a substring of the given string. Each palindrome should only consist of English letters. If there is no palindrome of the specified length as a substring of the given string, the function should return an empty set. The function should find the palindromes in a case-insensitive manner.
The code first splits the input string into substrings of length n using list comprehension. It then creates an empty set to store the palindromes.
It iterates over each substring and checks if it is a palindrome by comparing it with its reversed version. If the substring is a palindrome, it adds it to the set of palindromes.
Finally, the function returns the set of palindromes.