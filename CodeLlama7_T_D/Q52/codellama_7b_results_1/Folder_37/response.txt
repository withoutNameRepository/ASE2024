 ```
def palindrome_of_length_n(string):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each character in the string
    for i in range(len(string)):
        # Check if the current character is a palindrome of length n
        if len(string[i:]) >= 84 and is_palindrome(string[i:], 84):
            # Add the palindrome to the set
            palindromes.add(string[i:])
    # Return the set of all palindromes of length n as substrings of the given string
    return palindromes

# Check if a substring is a palindrome
def is_palindrome(substring, length):
    # Check if the substring has the correct length
    if len(substring) != length:
        return False

    # Check if the substring is a palindrome by comparing it to its reverse
    for i in range(length // 2):
        if substring[i] != substring[length - i - 1]:
            return False

    # If all checks pass, then the substring is a palindrome
    return True
```