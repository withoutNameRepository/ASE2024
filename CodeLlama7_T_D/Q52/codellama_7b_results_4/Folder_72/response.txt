 Here is a possible implementation of the `palindrome_of_length_n` function:
```python
def palindrome_of_length_n(string, n):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each substring of length n in the given string
    for i in range(len(string) - n + 1):
        # Check if the substring is a palindrome
        if string[i:i+n] == string[i:i+n][::-1]:
            # Add the palindrome to the set
            palindromes.add(string[i:i+n])
    # Return the set of palindromes
    return palindromes
```
This function takes two arguments, a string and an integer `n`, and returns the set of all palindromes of length `n` that are substrings of the given string. The function uses a loop to iterate through each substring of length `n` in the given string, and checks if each substring is a palindrome using the `==` operator on the substring with its reversed version. If a palindrome is found, it is added to the set of palindromes and returned at the end.