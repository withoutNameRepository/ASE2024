 Here is a possible implementation of the `palindrome_of_length_n` function in Python:
```python
def palindrome_of_length_n(string):
    # Convert the string to lowercase for case-insensitive comparison
    string = string.lower()
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each character in the string
    for i in range(len(string)):
        # Check if the character is a palindrome of length n
        if string[i:i+n] == string[i:i+n][::-1]:
            # If it is, add it to the set of palindromes
            palindromes.add(string[i:i+n])
    # Return the set of palindromes
    return palindromes
```
This function takes a string as input and returns a set of all palindromes of length equal to `n`, where each palindrome is a substring of the given string. The function first converts the input string to lowercase for case-insensitive comparison, and then initializes an empty set to store the palindromes.
The function then loops through each character in the string, and checks if the character is a palindrome of length `n`. If it is, the function adds it to the set of palindromes. Finally, the function returns the set of palindromes.