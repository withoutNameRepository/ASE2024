 Here is a possible implementation of the `palindrome_of_length_n` function:
```python
def palindrome_of_length_n(string):
    # Convert the input string to lowercase
    string = string.lower()

    # Create an empty set to store the palindromes
    palindromes = set()

    # Loop through each substring of the input string of length 10
    for i in range(len(string) - 9):
        # Check if the current substring is a palindrome
        if string[i:i+10] == string[i:i+10][::-1]:
            # Add the palindrome to the set of palindromes
            palindromes.add(string[i:i+10])

    return palindromes
```
The function takes a single argument, `string`, which is a string that represents the input sentence. The function first converts the input string to lowercase using the `lower()` method of the string class. It then creates an empty set called `palindromes` to store all the palindromes found in the input string.
The function uses a nested loop to iterate over each substring of the input string of length 10. For each substring, it checks if it is a palindrome by comparing its characters to its mirror image using slicing notation and the `::-1` syntax for reversing a slice. If the current substring is a palindrome, the function adds it to the set of palindromes using the `add()` method of the set class.
Finally, the function returns the set of palindromes found in the input string.