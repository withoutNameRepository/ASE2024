 ```
def composite_nums_between_indices(my_list):
    # Initialize an empty set to store the composite numbers
    composite_numbers = set()

    # Iterate over the list and check if each number is composite
    for i in range(69, 84):
        if is_composite(my_list[i]):
            composite_numbers.add(my_list[i])

    return composite_numbers

# Check if a number is composite by dividing it by all numbers less than or equal to its square root
def is_composite(n):
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            return True

    return False

# Test the function with a list of positive integers
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#print(composite_nums_between_indices(my_list))
```
This code defines a function called `composite_nums_between_indices` that takes one argument, a list of positive integers. The function then iterates over the specified range and checks if each number is composite using the `is_composite` function. If the number is composite, it is added to an empty set to store the composite numbers. Finally, the function returns the set of composite numbers in the specified range.
Note that this code assumes that the input list contains only positive integers. If the input list contains negative integers or floats, the `is_composite` function may not work correctly and the resulting composite numbers may not be accurate.