 ```
def composite_nums_between_indices(my_list):
    # Check if the input is a list of positive integers
    if not all(isinstance(x, int) and x > 0 for x in my_list)):
        raise ValueError("Input must be a list of positive integers")
    # Find the indices of the first and last composite numbers in the list
    first_composite = next((i for i, x in enumerate(my_list) if is_composite(x)), None)
    last_composite = next((i for i, x in enumerate(reversed(my_list))) if is_composite(x)), None)
    # Return the set of all composite numbers between the first and last indices (inclusive)
    return {my_list[i] for i in range(first_composite, last_composite + 1)}
# Check if a number is composite by dividing it by all prime factors of the number up to its square root
def is_composite(n):
    for p in range(2, int(math.sqrt(n)) + 1)):
        if n % p == 0:
            return True

# Driver code to test the function
if __name__ == "__main__":
    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#    print("Composite numbers between indices 6 and 6:", end=" ")
    composite_numbers = composite_nums_between_indices(my_list)
    for num in composite_numbers:
#        print(num, end=" ")
```