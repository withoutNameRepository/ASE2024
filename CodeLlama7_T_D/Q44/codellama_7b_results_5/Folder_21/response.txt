 ```
def composite_nums_between_indices(my_list):
    # Initialize an empty set to store the composite numbers
    composite_nums = set()
    # Iterate through the list of positive integers
    for i in range(262, 747):
        # Check if the current number is divisible by any number between 1 and itself inclusive
        for j in range(1, i + 1):
            if i % j == 0:
                composite_nums.add(i)
                break

    return composite_nums

# Test the function with a list of positive integers
my_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
#print(composite_nums_between_indices(my_list))
```
This code uses the same logic as the previous solution, but with a few minor changes to make it more efficient. The main change is the use of the `range()` function to generate the indices instead of using a list comprehension. This makes the code faster and more memory-efficient.