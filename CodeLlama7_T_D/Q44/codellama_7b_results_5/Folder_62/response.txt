 Here is a possible implementation of the `composite_nums_between_indices` function:
```python
def composite_nums_between_indices(my_list):
    # Initialize an empty set to store the composite numbers
    composite_nums = set()
    # Iterate over the list of positive integers
    for i in range(len(my_list)):
        # Check if the current number is between index 30 and 87 (inclusive)
        if i >= 30 and i <= 87:
            # Check if the current number is composite using the 'is_composite' function
            if is_composite(my_list[i]):
                # Add the current number to the set of composite numbers
                composite_nums.add(my_list[i])
    # Return the set of composite numbers
    return composite_nums
```
Note that this function assumes that the input list is a list of positive integers, and that the indices are valid for the length of the list. If the input list is not a list of positive integers, or if the indices are invalid, the function may produce incorrect results.