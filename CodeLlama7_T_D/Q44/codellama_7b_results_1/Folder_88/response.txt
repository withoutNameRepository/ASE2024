 def composite_nums_between_indices(my_list):
    # Find the indices of the first and last composite numbers in the list
    first_composite = next((i for i, x in enumerate(my_list) if is_composite(x)), None)
    last_composite = next((i for i, x in enumerate(my_list[::-1]) if is_composite(x)), None)
    # If no composite numbers exist in the list, return an empty set
    if first_composite is None or last_composite is None:
        return set()
    # Return the set of all composite numbers between index 8 and index 9, both inclusive
    else:
        return set(my_list[first_composite:last_composite+1])
def is_composite(n):
    # Check if n is a positive integer greater than 1
    if not (isinstance(n, int) and n > 1):
        raise ValueError("n must be a positive integer greater than 1")
    # Check if n is prime by iterating up to its square root
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

# Test the function with a list of positive integers
my_list = [2, 3, 4, 5, 6, 7, 8, 9, 10]
#print(composite_nums_between_indices(my_list))