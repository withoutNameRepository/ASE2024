 Here is a possible implementation of the `remove_repeat_chars` function:
```python
def remove_repeat_chars(s):
    # Create a set to keep track of the characters we've seen
    seen = set()

    # Iterate over the characters in the string
    for c in s:

        # If we haven't seen this character before, add it to the set and continue
        if c not in seen:
            seen.add(c)
            continue

        # Otherwise, remove all occurrences of the character from the string
        else:
            s = s.replace(c, '')

    return s
```
This function takes a single argument `s`, which is the input string that we want to modify.
The function first creates an empty set called `seen` to keep track of the characters we've seen so far.
Next, the function iterates over each character in the input string using a for loop.
For each character, the function checks if it has already been seen before by checking if it is in the `seen` set. If it hasn't been seen yet, the function adds it to the `seen` set and continues with the next character.
If the function has already seen the current character before, it means that we have encountered a repeated character. In this case, the function uses the `replace()` method of the string object to remove all occurrences of the repeated character from the input string. The function then returns the modified input string as its output.