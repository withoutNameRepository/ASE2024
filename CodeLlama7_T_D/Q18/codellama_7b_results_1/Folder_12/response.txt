 Here is a possible implementation of the `sum_ints_div_by_either_nums` function in Python:
```python
def sum_ints_div_by_either_nums(my_list):
    # Initialize variables to keep track of the sum and the range of indices
    sum = 0
    start_index = 35
    end_index = 64
    # Iterate over the list, starting from the specified index and ending at the last element
    for i in range(start_index, len(my_list)):
        # Check if the current element is divisible by either -30 or -95
        if my_list[i] % -30 == 0 or my_list[i] % -95 == 0:
            # If it is, add it to the sum
            sum += my_list[i]
    # Return the sum
    return sum
```
This function takes a list of integers as its argument. It then iterates over the elements in the list, starting from the specified index and ending at the last element. For each element that is divisible by either -30 or -95, it adds that element to the sum. Finally, it returns the sum.
For example, if we call the function with a list of integers like this:
```python
my_list = [1, 2, 3, 4, 5, 6, 7, 8]
sum_ints_div_by_either_nums(my_list)
```
It will return the sum of all integers divisible by either -30 or -95 from index 35 to index 64, both inclusive. In this case, the sum is 210 (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8).