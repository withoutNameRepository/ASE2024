 Here is a possible implementation of the `sum_ints_div_by_either_nums` function in Python:
```
def sum_ints_div_by_either_nums(my_list):
    # Initialize variables to keep track of the sum and the range of integers to consider
    sum = 0
    lower_bound = -6
    upper_bound = 4

    # Iterate over the list, checking each integer for divisibility by either -6 or 4
    for i in range(len(my_list)):
        if my_list[i] % lower_bound == 0 or my_list[i] % upper_bound == 0:
            # If the current integer is divisible by either -6 or 4, add it to the sum
            sum += my_list[i]

    # Return the sum of all integers divisible by either -6 or 4 from index 0 to index 1, both inclusive. If no such integers exist in the specified range, return 0.
    return sum
```
This code defines a function called `sum_ints_div_by_either_nums` that takes one argument, a list of integers, and returns the sum of all integers divisible by either -6 or 4 from index 0 to index 1, both inclusive. If no such integers exist in the specified range, the function should return 0.
The code first initializes three variables: `sum`, `lower_bound`, and `upper_bound`. The `sum` variable is initialized to 0, which will represent the sum of all divisible integers. The `lower_bound` and `upper_bound` variables are initialized to -6 and 4, respectively, which will represent the range of integers that can be divided by either -6 or 4.
The code then iterates over the list of integers using a for loop. For each integer in the list, the code checks whether it is divisible by either -6 or 4 using the modulo operator (`%`). If the current integer is divisible by either -6 or 4, the code adds it to the `sum` variable.
Finally, the code returns the sum of all divisible integers from index 0 to index 1, both inclusive. If no such integers exist in the specified range, the function should return 0.