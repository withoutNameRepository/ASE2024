{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_28_5.py::test_strings_of_size_equal_to_3", "location": ["tests39_28_5.py", 5, "test_strings_of_size_equal_to_3"], "keywords": {"test_strings_of_size_equal_to_3": 1, "tests39_28_5.py": 1, "Folder_28": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00015172097482718527, "start": 1700273507.967427, "stop": 1700273507.9675798, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "7ad5be5d5477442b9caffd13756c4436", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_28_5.py::test_if_result_is_sorted", "location": ["tests39_28_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_28_5.py": 1, "Folder_28": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012087900540791452, "start": 1700273507.9672496, "stop": 1700273507.967371, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7ad5be5d5477442b9caffd13756c4436", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_28_5.py::test_if_result_is_sorted", "location": ["tests39_28_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_28_5.py": 1, "Folder_28": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama/Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError: assert ['t', 'H', '>'] == ['>', 'H', 't']\n  At index 0 diff: 't' != '>'\n  Full diff:\n  - ['>', 'H', 't']\n  ?   ^         ^\n  + ['t', 'H', '>']\n  ?   ^         ^"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=3 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['t', 'H', '>'] == ['>', 'H', 't']", "E             At index 0 diff: 't' != '>'", "E             Full diff:", "E             - ['>', 'H', 't']", "E             ?   ^         ^", "E             + ['t', 'H', '>']", "E             ?   ^         ^"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=3 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['t', 'H', '>'] == ['>', 'H', 't']", "E             At index 0 diff: 't' != '>'", "E             Full diff:", "E             - ['>', 'H', 't']", "E             ?   ^         ^", "E             + ['t', 'H', '>']", "E             ?   ^         ^"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama/Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError: assert ['t', 'H', '>'] == ['>', 'H', 't']\n  At index 0 diff: 't' != '>'\n  Full diff:\n  - ['>', 'H', 't']\n  ?   ^         ^\n  + ['t', 'H', '>']\n  ?   ^         ^"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0003567569947335869, "start": 1700273507.967552, "stop": 1700273507.967909, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7ad5be5d5477442b9caffd13756c4436", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
