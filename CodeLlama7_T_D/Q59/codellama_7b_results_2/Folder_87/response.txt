 ```
def all_left_truncatable_prime(tuple):
    # Initialize variables
    x = tuple[39]
    prime_numbers = []

    # Loop through numbers less than x
    for i in range(2, x):

        # Check if number is prime
        if is_prime(i):

            # Check if number is left-truncatable prime
            if is_left_truncatable_prime(i):

                # Add number to list of prime numbers
                prime_numbers.append(i)

    # Return sorted list of prime numbers
    return sorted(prime_numbers, reverse=True)

# Function to check if a number is prime
def is_prime(n):

    # Check if n is greater than 1
    if n > 1:

        # Loop through numbers less than n
        for i in range(2, n):

            # Check if n is divisible by i
            if n % i == 0:

                # Return False if n is divisible by i
                return False

    # Return True if n is greater than 1 and not divisible by any number between 2 and n-1
    return True

# Function to check if a number is left-truncatable prime
def is_left_truncatable_prime(n):

    # Check if n is a prime number
    if not is_prime(n):

        # Return False if n is not a prime number
        return False

    # Loop through numbers less than n
    for i in range(2, n):

        # Check if n is divisible by i
        if n % i == 0:

            # Check if the leading leftmost digit of n is successively removed, then all resulting numbers are prime
            if not all([is_prime(j) for j in str(n)[1:]])):

                # Return False if the leading leftmost digit of n is successively removed, but not all resulting numbers are prime
                return False

    # Return True if n is a prime number and the leading leftmost digit of n is successively removed, and all resulting numbers are prime
    return True
```