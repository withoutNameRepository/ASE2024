 ```
def all_left_truncatable_prime(tuple):
x = tuple[4]
list = []
for i in range(2, x):
if is_prime(i) and is_left_truncatable_prime(i):
list.append(i)
return list

def is_prime(n):
if n < 2:
return False

for i in range(2, int(n ** 0.5) + 1):
if n % i == 0:
return False

return True

def is_left_truncatable_prime(n):
if n < 2:
return False

while n > 1:

if n % 10 == 0:
break

n = int(str(n)[:-1])

if not is_prime(n):
return False

return True

```
This Python code defines a function called `all_left_truncatable_prime` that takes a tuple of positive integers as an argument. The function returns the list of all left-truncatable prime numbers less than the integer at index 4 of the tuple, sorted in ascending order.
The code first defines a helper function called `is_left_truncatable_prime` that takes a single positive integer as an argument and returns a Boolean value indicating whether the integer is a left-truncatable prime number. The function uses a while loop to repeatedly remove the leading leftmost digit of the input number until it becomes 1 or less, and checks each resulting number along the way to determine if it is a prime number.
The main function `all_left_truncatable_prime` first defines an empty list to store the results of the search for all left-truncatable prime numbers less than the integer at index 4 of the input tuple, and then iterates over each integer in the range from 2 to the integer at index 4 of the input tuple, using the `is_left_truncatable_prime` function to determine if each number is a left-truncatable prime number. If a number is found to be a left-truncatable prime number, it is appended to the list of results.
Finally, the main function returns the sorted list of all left-truncatable prime numbers less than the integer at index 4 of the input tuple.