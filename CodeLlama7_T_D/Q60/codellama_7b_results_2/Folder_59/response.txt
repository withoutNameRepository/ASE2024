 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate from 1 to x, inclusive
    for i in range(1, x + 1):
        # Check if the number is a prime number
        if is_prime(i):
            # If it is, check if it is left-and-right-truncatable prime
            if is_left_right_truncatable_prime(i):
                # If it is, add it to the list of prime numbers
                prime_numbers.append(i)

    # Sort the list of prime numbers in descending order
    prime_numbers.sort(reverse=True)

    # Return the sorted list of prime numbers
    return prime_numbers

# Check if a number is a prime number using the Sieve of Eratosthenes algorithm
def is_prime(n):
    # If n is less than 2, it is not prime
    if n < 2:
        return False

    # If n is divisible by 2 to n-1 without leaving a remainder, it is prime
    for i in range(2, n):
        if n % i == 0:
            return False

    # If the loop completes successfully, n is prime
    return True

# Check if a number is a left-and-right-truncatable prime number using the definition of the number
def is_left_right_truncatable_prime(n):
    # If n is less than 10, it cannot be a left-and-right-truncatable prime number
    if n < 10:
        return False

    # If n contains the digit 0, it is not a left-and-right-truncatable prime number
    if "0" in str(n):
        return False

    # Check if the leading and last digits of n are both prime numbers
    if is_prime(int(str(n)[0]) - 1)) and is_prime(int(str(n))[-1]) - 1)):
        return True

    # If the loop completes successfully, n is not a left-and-right-truncatable prime number
    return False

# Test the function with different inputs
if __name__ == "__main__":
#    print(all_left_right_truncatable_prime((20)))
#    print(all_left_right_truncatable_prime((100))))
#    print(all_left_right_truncatable_prime((900))))
```