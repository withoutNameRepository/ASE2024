 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through the numbers from 1 to x
    for num in range(1, x + 1):
        # Check if the number is a prime number
        if is_prime(num):
            # If the number is prime, check if it is left-and-right-truncatable prime
            if is_left_right_truncatable_prime(num):
                # If the number is left-and-right-truncatable prime, add it to the list of prime numbers
                prime_numbers.append(num)
    # Return the sorted list of prime numbers
    return sorted(prime_numbers, reverse=True)

# Check if a number is a prime number
def is_prime(n):
    # Check if n is less than or equal to 1
    if n <= 1:
        return False

    # Check if n is divisible by 2 to n - 1
    for i in range(2, n):
        if n % i == 0:
            return False

    # If the number is not divisible by any number between 2 and n - 1, it is prime
    return True

# Check if a number is left-and-right-truncatable prime
def is_left_right_truncatable_prime(n):
    # Check if n is less than or equal to 1
    if n <= 1:
        return False

    # Check if the leading digit of n is not 0 and remains prime when the last rightmost digit is removed
    if str(n)[0] == "0" or n % int(str(n)[-1]) == 0:
        return False

    # Check if the number contains any repeated digits, other than the first digit
    for i in range(1, len(str(n)))):
        if str(n)[i] == str(n)[i - 1]:
            return False

    # If the number is not divisible by any number between 2 and n - 1, it is left-and-right-truncatable prime
    return True
```