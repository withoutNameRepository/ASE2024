 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    primes = []

    # Loop through all the prime numbers less than or equal to x
    for i in range(2, x + 1):

        # Check if the current number is a prime number
        if is_prime(i):

            # If it is a prime number, check if it is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):

                # If it is a left-and-right-truncatable prime number, add it to the list of prime numbers
                primes.append(i)

    # Return the sorted list of prime numbers
    return sorted(primes)

# Check if a number is a prime number
def is_prime(n):
    # If the number is less than 2, it is not a prime number
    if n < 2:
        return False

    # If the number is divisible by 2 to n - 1, it is not a prime number
    for i in range(2, n):
        if n % i == 0:
            return False

    # If the number is greater than 1 and it is divisible only by 1 and itself, it is a prime number
    return True

# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):
    # If the number contains a zero, it is not a left-and-right-truncatable prime number
    if '0' in str(n):
        return False

    # Check if the number is a prime number
    if not is_prime(n):
        return False

    # If the number is a prime number, check if it is left-truncatable and right-truncatable
    for i in range(2, n + 1):

        # Check if the current number is a left-truncatable prime number
        if is_left_truncatable_prime(i) and is_right_truncatable_prime(i):

            # If it is a left-truncatable and right-truncatable prime number, return True
            return True

    # If the number is not a left-and-right-truncatable prime number, return False
    return False

# Check if a number is a left-truncatable prime number
def is_left_truncatable_prime(n):
    # If the number contains a zero, it is not a left-truncatable prime number
    if '0' in str(n):
        return False

    # Check if the number is a prime number
    if not is_prime(n):
        return False

    # If the number is a prime number, check if it is left-truncatable
    for i in range(2, n + 1):

        # Check if the current number is a left-truncatable prime number
        if is_left_truncatable_prime(i) and is_right_truncatable_prime(i):

            # If it is a left-truncatable and right-truncatable prime number, return True
            return True

    # If the number is not a left-truncatable prime number, return False
    return False

# Check if a number is a right-truncatable prime number
def is_right_truncatable_prime(n):
    # If the number contains a zero, it is not a right-truncatable prime number
    if '0' in str(n):
        return False

    # Check if the number is a prime number
    if not is_prime(n):
        return False

    # If the number is a prime number, check if it is right-truncatable
    for i in range(2, n + 1):

        # Check if the current number is a left-truncatable prime number
        if is_left_truncatable_prime(i) and is_right_truncatable_prime(i):

            # If it is a left-truncatable and right-truncatable prime number, return True
            return True

    # If the number is not a right-truncatable prime number, return False
    return False
