 ```
def all_left_right_truncatable_prime(x):
    # List of all left-and-right-truncatable prime numbers less than or equal to x
    lr_trunc_primes = []
    # Iterate from 2 to x (both inclusive)
    for i in range(2, x + 1):
        # Check if i is a prime number
        if is_prime(i):
            # Check if i contains no 0 and remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime.
            if all_digits_nonzero(i) and lr_truncable(i):
                # Add i to the list of left-and-right-truncatable prime numbers less than or equal to x
                lr_trunc_primes.append(i)
    # Sort the list of left-and-right-truncatable prime numbers in descending order
    lr_trunc_primes.sort(reverse=True)
    # Return the sorted list of left-and-right-truncatable prime numbers less than or equal to x
    return lr_trunc_primes
# Define a function to check if a number is a prime number
def is_prime(n):
    # Check if n is an integer greater than 1
    if n > 1:
        # Iterate from 2 to n-1 (both inclusive)
        for i in range(2, n):
            # If i divides n and n is not equal to i, return False
            if n % i == 0 and n != i:
                return False

# Define a function to check if a number contains no 0
def all_digits_nonzero(n):
    # Check if n is an integer greater than 0
    if n > 0:
        # Iterate from 1 to the number of digits in n (both inclusive)
        for i in range(1, len(str(n)))):
            # If the digit at index i of n is equal to 0, return False
            if str(n)[i] == '0':
                return False

# Define a function to check if a number is left-and-right-truncatable
def lr_truncable(n):
    # Check if n is an integer greater than 1
    if n > 1:
        # Store the length of the number of digits in n
        num_digits = len(str(n))
        # Iterate from the leftmost to the rightmost digit of n (both inclusive)
        for i in range(0, num_digits):
            # If the leading leftmost and last rightmost digits of n are not equal to each other, return False
            if str(n)[i] != str(n)[num_digits - 1 - i]:
                return False

# Test the function with different values for x
x = 20
#print(all_left_right_truncatable_prime(x))
x = 40
#print(all_left_right_truncatable_prime(x))
x = 100
#print(all_left_right_truncatable_prime(x))
```