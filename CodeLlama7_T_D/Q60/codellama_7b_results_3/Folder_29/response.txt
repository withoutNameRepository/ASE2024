 ```
def all_left_right_truncatable_prime(x):
	# Initialize an empty list to store the prime numbers
	prime_numbers = []

	# Loop through the integers from 1 to x
	for i in range(1, x + 1):

		# Check if the integer is a prime number
		if is_prime(i):

			# Check if the integer is a left-and-right-truncatable prime number
			if is_left_right_truncatable_prime(i):

				# Add the integer to the list of prime numbers
				prime_numbers.append(i)

	# Sort the list of prime numbers in descending order
	prime_numbers.sort(reverse=True)

	# Return the list of prime numbers
	return prime_numbers

# Check if an integer is a prime number
def is_prime(n):

	# Check if n is greater than 1
	if n > 1:

		# Loop through the integers from 2 to the square root of n
		for i in range(2, int(n ** 0.5) + 1):

			# Check if i divides n
			if n % i == 0:

				# Return False if i divides n
				return False

	# Return True if n is greater than 1 and does not have any factors other than 1 and itself
	return True

# Check if an integer is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

	# Initialize a variable to store the number of digits in n
	num_digits = len(str(n))

	# Check if n has no 0
	if '0' not in str(n):

		# Loop through the integers from 1 to the square root of n
		for i in range(1, int(n ** 0.5) + 1):

			# Check if i divides n
			if n % i == 0:

				# Initialize a variable to store the quotient of n and i
				quotient = n // i

				# Check if the quotient has the same number of digits as n
				if len(str(quotient)) == num_digits:

					# Check if the quotient is a prime number
					if is_prime(quotient):

						# Return True if the quotient is a prime number and n has no 0
						return True

	# Return False if n has 0 or does not have any factors other than 1 and itself
	return False
```