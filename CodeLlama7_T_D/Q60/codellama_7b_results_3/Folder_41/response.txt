 ```
def all_left_right_truncatable_prime(x):
    # Create a list of all prime numbers less than or equal to x
    prime_numbers = [p for p in range(2, x + 1) if all(p % i != 0 for i in range(2, int(p ** 0.5) + 1))]
    # Initialize an empty list to store the left-and-right-truncatable prime numbers
    left_right_truncatable_prime_numbers = []
    # Loop through each prime number and check if it is a left-and-right-truncatable prime number
    for prime in prime_numbers:
        # Initialize a variable to store the leading leftmost digit of the prime number

        leading_leftmost_digit = int(str(prime)[:1])

        # Check if the leading leftmost digit is not 0 and remains a prime number if it is successively removed down to a one- or two-digit prime.

        if leading_leftmost_digit != 0 and all(prime % i != 0 for i in range(2, int(prime ** 0.5) + 1))):
            # If the leading leftmost digit is not 0 and remains a prime number if it is successively removed down to a one- or two-digit prime, add the prime number to the list of left-and-right-truncatable prime numbers.
            left_right_truncatable_prime_numbers.append(prime)
    # Sort the list of left-and-right-truncatable prime numbers in descending order and return it.
    return sorted(left_right_truncatable_prime_numbers, reverse=True)
```