 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_list = []

    # Iterate from 2 to x
    for i in range(2, x + 1):
        # Check if i is a prime number
        if is_prime(i):
            # Check if i is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add i to the prime list
                prime_list.append(i)

    # Sort the prime list in descending order
    prime_list.sort(reverse=True)

    # Return the prime list
    return prime_list

# Check if a number is prime
def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to the square root of n
        for i in range(2, int(n ** 0.5) + 1)):
            # Check if i divides n
            if n % i == 0:
                # Return False if i divides n
                return False

    # Return True if n is greater than 1 and it is not divisible by any number between 2 and the square root of n
    return True

# Check if a number is left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):
    # Check if n contains 0
    if "0" in str(n):
        # Return False if n contains 0
        return False

    # Iterate from the leading leftmost digit to the last rightmost digit of n
    for i in range(len(str(n)))):
        # Check if removing the leading leftmost digit and the last rightmost digit simultaneously successively down to a one- or two-digit prime number results in a prime number
        if is_prime(int(str(n))[1:-1])):
            # Return True if removing the leading leftmost digit and the last rightmost digit simultaneously successively down to a one- or two-digit prime number results in a prime number
            return True

    # Return False if no combination of removing the leading leftmost digit and the last rightmost digit simultaneously successively down to a one- or two-digit prime number results in a prime number
    return False
```