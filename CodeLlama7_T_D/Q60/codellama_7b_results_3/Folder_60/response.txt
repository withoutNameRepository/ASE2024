 ```
def all_left_right_truncatable_prime(x):
	# Initialize an empty list to store the prime numbers
	primes = []

	# Iterate from 1 to x
	for i in range(1, x + 1):
		# Check if i is a prime number
		if is_prime(i):
			# Check if i is left-and-right-truncatable prime number
			if is_left_right_truncatable_prime(i):
				# Add i to the list of prime numbers
				primes.append(i)

	# Return the sorted list of prime numbers
	return sorted(primes)

def is_prime(n):
	# Check if n is greater than 1
	if n > 1:
		# Iterate from 2 to the square root of n
		for i in range(2, int(n ** 0.5) + 1):
			# Check if i divides n
			if n % i == 0:
				# Return False if i divides n
				return False

		# Return True if n is a prime number
		return True

	# Return False if n is not greater than 1
	return False

def is_left_right_truncatable_prime(n):
	# Check if n contains the digit 0
	if '0' in str(n):
		# Return False if n contains the digit 0
		return False

	# Iterate from the leading leftmost digit to the last rightmost digit
	for i in range(len(str(n)))):
		# Check if the current digit is not equal to the previous digit
		if str(n)[i] != str(n)[i - 1]:
			# Check if the current digit is not equal to the next digit
			if str(n)[i] != str(n)[i + 1]:
				# Return False if the current digit is not equal to the previous or next digit
				return False

	# Return True if n is a left-and-right-truncatable prime number
	return True
```