 def all_left_right_truncatable_prime(tuple):
    x = tuple[24]
    # Create a list of all prime numbers less than or equal to x
    prime_numbers = []
    for i in range(2, x + 1):
        if is_prime(i) == True:
            prime_numbers.append(i)
    # Return the list of all left-and-right-truncatable prime numbers less than or equal to x, sorted in ascending order.
    return sorted(filter(lambda y: y >= 2 and is_left_right_truncatable_prime(y), prime_numbers)))
# Define the function that checks if a number is prime
def is_prime(num):
    # Check if num is less than 2
    if num < 2:
        return False

    # Check if num is divisible by any number between 2 and sqrt(num)
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False

    # If the above loop does not return False, it means that num is prime
    return True

# Define the function that checks if a number is left-and-right-truncatable prime
def is_left_right_truncatable_prime(num):
    # Check if num is divisible by any number between 2 and sqrt(num)
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False

    # If the above loop does not return False, it means that num is left-and-right-truncatable prime
    return True

# Test the functions with different inputs
#print(all_left_right_truncatable_prime((2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))))