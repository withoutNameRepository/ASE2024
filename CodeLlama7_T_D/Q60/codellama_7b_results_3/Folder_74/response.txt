 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_list = []

    # Iterate from 1 to x
    for i in range(1, x + 1):
        # Check if the number is a prime number
        if is_prime(i):
            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add the prime number to the list
                prime_list.append(i)

    # Return the sorted list of prime numbers
    return sorted(prime_list)

# Check if a number is a prime number
def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to the square root of n
        for i in range(2, int(n ** 0.5) + 1)):
            # Check if i divides n
            if n % i == 0:
                # Return False if a divisor is found
                return False

    # Return True if n is a prime number
    return True

# Check if a number is left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):
    # Check if the number contains 0
    if '0' in str(n):
        # Return False if the number contains 0
        return False

    # Iterate from the leftmost digit to the rightmost digit of the number
    for i in range(len(str(n)))):
        # Check if removing the leading leftmost digit and the last rightmost digit results in a prime number
        if is_prime(int(str(n)[:i] + str(n)[i+1:])))
            # Return True if the condition is met for at least one digit from the left to the right
            return True

# Return False if no prime number was found
return False

```