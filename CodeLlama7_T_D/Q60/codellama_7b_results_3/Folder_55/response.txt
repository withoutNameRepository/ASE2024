 def all_left_right_truncatable_prime(x):
    # create an empty list to store the results
    result = []
    # loop through all numbers less than or equal to x
    for i in range(1, x+1):
        # check if i is a prime number
        if is_prime(i):
            # check if i is left- and right-truncatable prime
            if is_left_right_truncatable_prime(i):
                # add i to the result list
                result.append(i)
    # sort the result list in descending order
    result = sorted(result, reverse=True)
    return result

# check if a number is prime
def is_prime(n):
    # check if n is greater than 1
    if n > 1:
        # loop through all numbers less than or equal to the square root of n
        for i in range(2, int(n**0.5) + 1):
            # check if i divides n
            if n % i == 0:
                # return False if i divides n
                return False

    # return True if n is greater than 1 and no number less than or equal to the square root of n divides n
    return True

# check if a number is left- and right-truncatable prime
def is_left_right_truncatable_prime(n):
    # check if n is not 0 and not 1
    if n != 0 and n != 1:
        # loop through all numbers less than or equal to the square root of n
        for i in range(2, int(n**0.5) + 1):
            # check if i divides n
            if n % i == 0:
                # return False if i divides n
                return False

    # check if the leading leftmost and last rightmost digits of n are both prime numbers
    for digit in [n//(10**i)%10 for i in range(len(str(n)))]]:
        # check if digit is not 0 and not 1
        if digit != 0 and digit != 1:
            # check if digit is not a prime number
            if not is_prime(digit):
                # return False if digit is not a prime number
                return False

    # return True if n is not 0 and not 1 and no number less than or equal to the square root of n divides n and the leading leftmost and last rightmost digits of n are both prime numbers
    return True

# test the function with different inputs
if __name__ == "__main__":
    # test the function with the input (73,)
#    print(all_left_right_truncatable_prime((73,))))