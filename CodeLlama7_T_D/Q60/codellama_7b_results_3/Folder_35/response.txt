 ```
def all_left_right_truncatable_prime(tuple_of_integers):
    x = tuple_of_integers[177]
    left_truncatable_primes = []
    right_truncatable_primes = []
    for i in range(2, x + 1):
        if is_prime(i) and is_left_right_truncatable_prime(i):
            left_truncatable_primes.append(i)
            right_truncatable_primes.append(i)
    return sorted(left_truncatable_primes + right_truncatable_primes, key=lambda x: x)
def is_prime(n):
    if n < 2:
        return False

    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    return True

def is_left_right_truncatable_prime(n):
    if not is_prime(n):
        return False

    string_representation = str(n)

    for i in range(len(string_representation)):
        substring = string_representation[:i] + string_representation[i + 1:]

        if not is_prime(int(substring)):
            return False

    return True
```