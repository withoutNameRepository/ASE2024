 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate from 1 to x (inclusive)
    for i in range(1, x + 1):
        # Check if i is a prime number
        if is_prime(i):
            # Check if i is a left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add i to the list of prime numbers
                prime_numbers.append(i)

    # Return the sorted list of prime numbers

    return sorted(prime_numbers)

# Function to check if a number is a prime number
def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to the square root of n (inclusive)
        for i in range(2, int(n ** 0.5) + 1)):
            # Check if i divides n
            if n % i == 0:
                # Return False if i divides n
                return False

    # Return True if n is a prime number
    return True

# Function to check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):
    # Check if n contains the digit 0
    if '0' in str(n):
        # Return False if n contains the digit 0
        return False

    # Iterate from 1 to the number of digits in n (inclusive)
    for i in range(1, len(str(n)))):
        # Check if removing the leading leftmost and last rightmost digits of n results in a prime number
        if is_prime(int(str(n).removing_prefix(str(n)[0]))):
            # Return True if removing the leading leftmost and last rightmost digits of n results in a prime number
            return True

    # Return False if no leading leftmost and last rightmost digits of n can be removed to result in a prime number
    return False
```