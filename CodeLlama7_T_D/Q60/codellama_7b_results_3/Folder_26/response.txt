 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through the range of numbers from 1 to x
    for i in range(1, x + 1):

        # Check if the number is a prime number
        if is_prime(i):

            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):

                # Add the prime number to the list
                prime_numbers.append(i)

    # Sort the list in descending order
    prime_numbers.sort(reverse=True)

    # Return the list of left-and-right-truncatable prime numbers less than or equal to x
    return prime_numbers

# Check if a number is a prime number
def is_prime(n):

    # Check if n is greater than 1
    if n > 1:

        # Loop through the range of numbers from 2 to the square root of n
        for i in range(2, int(n ** 0.5) + 1):

            # Check if i divides n without leaving a remainder
            if n % i == 0:

                # Return False since n is not a prime number
                return False

    # Return True since n is a prime number
    return True

# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

    # Check if the number contains any 0 digits
    if '0' in str(n):

        # Return False since the number contains 0 digits
        return False

    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through the range of numbers from 1 to n
    for i in range(1, n + 1):

        # Check if the number is a prime number
        if is_prime(i):

            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):

                # Add the prime number to the list
                prime_numbers.append(i)

    # Return True since all prime numbers are left-and-right-truncatable prime numbers
    return True
```