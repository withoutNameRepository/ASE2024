 ```
def all_left_right_truncatable_prime(x):
    # List of all left-and-right-truncatable prime numbers less than or equal to x
    lrtp = []

    # Iterate from 1 to x (inclusive)
    for i in range(1, x + 1):

        # Check if the number is a prime number
        if is_prime(i):

            # Check if the number is a left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):

                # Add the number to the list of left-and-right-truncatable prime numbers
                lrtp.append(i)

    # Sort the list of left-and-right-truncatable prime numbers in descending order
    lrtp.sort(reverse=True)

    # Return the list of left-and-right-truncatable prime numbers
    return lrtp

# Check if a number is a prime number
def is_prime(n):

    # Check if n is less than or equal to 1
    if n <= 1:

        # Return False if n is less than or equal to 1
        return False

    # Check if n is divisible by 2 to n - 1 (inclusive)
    for i in range(2, n):

        # Check if i divides n without a remainder
        if n % i == 0:

            # Return False if i divides n without a remainder
            return False

    # Return True if n is greater than 1 and not divisible by 2 to n - 1 (inclusive)
    return True

# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

    # Check if the number contains no 0
    if '0' in str(n):

        # Return False if the number contains a 0
        return False

    # Check if the number remains prime when the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime
    for i in range(len(str(n)) - 1, 0, -1):

        # Check if removing the digit at position i from the number results in a prime number that is less than or equal to the original number
        if is_prime(int(str(n)[:i] + str(n)[i+1:])) and int(str(n)[:i] + str(n)[i+1:])) <= n:

            # Return False if removing the digit at position i from the number results in a prime number that is less than or equal to the original number
            return False

    # Return True if the number remains prime when the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime
    return True
```