 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate from 1 to x
    for i in range(1, x + 1):
        # Check if the number is a prime number
        if is_prime(i):
            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add the prime number to the list
                prime_numbers.append(i)

    # Sort the list in descending order
    prime_numbers.sort(reverse=True)

    # Return the sorted list of left-and-right-truncatable prime numbers
    return prime_numbers

# Check if a number is a prime number
def is_prime(n):
    # Check if the number is greater than 1
    if n > 1:
        # Iterate from 2 to the square root of the number
        for i in range(2, int(n ** 0.5) + 1)):
            # Check if the number is divisible by any number between 2 and the square root of the number
            if n % i == 0:
                # If the number is divisible by any number between 2 and the square root of the number, it is not a prime number
                return False

    # If the number is greater than 1 and it is not divisible by any number between 2 and the square root of the number, it is a prime number
    return True

# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):
    # Check if the number is a prime number
    if not is_prime(n):
        # If the number is not a prime number, it is not a left-and-right-truncatable prime number
        return False

    # Check if the number contains any 0 digits
    for digit in str(n):
        # If the number contains any 0 digits, it is not a left-and-right-truncatable prime number
        if digit == '0':
            return False

    # Check if the number is left-and-right-truncatable prime number by removing the leading leftmost and last rightmost digits
    for i in range(1, int(n ** 0.5) + 1)):
        # If the number remains prime after removing the leading leftmost and last rightmost digits, it is a left-and-right-truncatable prime number
        if is_prime(n % (10 ** i)) and is_prime(n // (10 ** (len(str(n)) - i)))):
            return True

    # If the number is not a left-and-right-truncatable prime number, it is not a left-and-right-truncatable prime number
    return False
```