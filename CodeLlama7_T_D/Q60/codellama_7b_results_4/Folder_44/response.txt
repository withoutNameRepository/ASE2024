 ```
def all_left_right_truncatable_prime(x):
	# create a list of all prime numbers less than or equal to x
	prime_list = []
	for i in range(2, x + 1):
		if is_prime(i):
			prime_list.append(i)
	# filter the prime list to only include left-and-right-truncatable prime numbers
	left_right_truncatable_prime_list = []
	for i in prime_list:
		if is_left_right_truncatable_prime(i):
			left_right_truncatable_prime_list.append(i)
	# sort the left-and-right-truncatable prime list in ascending order
	left_right_truncatable_prime_list.sort()
	return left_right_truncatable_prime_list
def is_prime(n):
	if n < 2:
		return False

	for i in range(2, int(n ** 0.5) + 1):
		if n % i == 0:
			return False

	return True

def is_left_right_truncatable_prime(n):
	# check if the number is a prime number
	if not is_prime(n):
		return False

	# check if the number contains no 0
	if str(n).find("0") != -1:
		return False

	# check if the number remains prime when the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime
	for i in range(len(str(n)))):
		if str(n)[i:] == "0":
			continue

		elif is_prime(int(str(n)[i:]))):
			return True

	# if the number does not meet all of the above conditions, it is not a left-and-right-truncatable prime number
	return False
```