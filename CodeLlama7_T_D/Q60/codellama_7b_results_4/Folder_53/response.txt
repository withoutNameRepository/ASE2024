 ```
def all_left_right_truncatable_prime(x):
    # Create a list of all prime numbers less than or equal to x
    prime_numbers = [p for p in range(2, x + 1) if all(p % i != 0 for i in range(2, int(p ** 0.5) + 1))]
    # Initialize an empty list to store the left-and-right-truncatable prime numbers
    left_right_prime_numbers = []
    # Iterate over the prime numbers and check if they are left-and-right-truncatable prime numbers
    for prime in prime_numbers:
        is_left_right_truncatable_prime = True
        # Check if the leading leftmost digit is 1 or 2, and if the number remains prime after removing the last rightmost digit.
        if str(prime)[0] != "1" and str(prime)[0] != "2":
            is_left_right_truncatable_prime = False
        if not all(prime % i != 0 for i in range(2, int(prime ** 0.5) + 1))):
            is_left_right_truncatable_prime = False
        # If the number is a left-and-right-truncatable prime number, add it to the list.
        if is_left_right_truncatable_prime:
            left_right_prime_numbers.append(prime)
    # Sort the list of left-and-right-truncatable prime numbers in descending order.
    left_right_prime_numbers = sorted(left_right_prime_numbers, reverse=True)
    return left_right_prime_numbers
```