 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate from 1 to x
    for i in range(1, x + 1):
        # Check if the number is a prime number
        if is_prime(i):
            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add the number to the list of prime numbers
                prime_numbers.append(i)

    # Sort the list of prime numbers in descending order
    prime_numbers.sort(reverse=True)

    # Return the list of prime numbers
    return prime_numbers

# Check if a number is a prime number
def is_prime(n):
    # If the number is less than 2, it is not a prime number
    if n < 2:
        return False

    # Check if the number is divisible by any number between 2 and the square root of the number
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    # If the number makes it to this point, it is a prime number
    return True

# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):
    # Convert the number to a string
    s = str(n)

    # Check if the number has no 0 in it
    if '0' not in s:
        # Check if the number is prime
        if is_prime(n):
            # Check if the number is left-truncatable prime
            if is_left_truncatable_prime(n):
                # Check if the number is right-truncatable prime
                if is_right_truncatable_prime(n):
                    return True

    return False

# Check if a number is left-truncatable prime
def is_left_truncatable_prime(n):
    # Convert the number to a string
    s = str(n)

    # Check if the number has no 0 in it
    if '0' not in s:
        # Check if the number is prime
        if is_prime(n):
            # Check if the number is left-truncatable prime
            for i in range(2, int(n ** 0.5) + 1):
                # Check if the number is divisible by any number between 2 and the square root of the number
                if n % i == 0:
                    return False

            return True

    return False

# Check if a number is right-truncatable prime
def is_right_truncatable_prime(n):
    # Convert the number to a string
    s = str(n)

    # Check if the number has no 0 in it
    if '0' not in s:
        # Check if the number is prime
        if is_prime(n):
            # Check if the number is right-truncatable prime
            for i in range(int(n ** 0.5) + 1, n):
                # Check if the number is divisible by any number between the square root of the number and the number itself
                if n % i == 0:
                    return False

            return True

    return False

# Test the function with different inputs
if __name__ == "__main__":
    # Test case 1: x = 9
#    print(all_left_right_truncatable_prime(9))

    # Test case 2: x = 10
#    print(all_left_right_truncatable_prime(10))

    # Test case 3: x = 15
#    print(all_left_right_truncatable_prime(15))

    # Test case 4: x = 18
#    print(all_left_right_truncatable_prime(18))

    # Test case 5: x = 20
#    print(all_left_right_truncatable_prime(20))