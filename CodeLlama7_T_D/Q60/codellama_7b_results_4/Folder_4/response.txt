 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_list = []

    # Iterate from 1 to x
    for i in range(1, x + 1):
        # Check if the number is a prime number
        if is_prime(i):
            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add the prime number to the list
                prime_list.append(i)

    # Sort the list in descending order
    prime_list = sorted(prime_list, reverse=True)

    # Return the list of all left-and-right-truncatable prime numbers less than or equal to x
    return prime_list

# Function to check if a number is prime
def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Check if n is divisible by any number between 2 and n-1
        for i in range(2, n):
            if n % i == 0:
                return False

    # If the number is greater than 1 and it is not divisible by any number between 2 and n-1, then it is prime
    return True

# Function to check if a number is left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):
    # Check if the number contains any 0 digit
    if '0' in str(n):
        return False

    # Check if the number remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime
    for i in range(len(str(n)) - 1, 0, -1):
        # Calculate the number that is formed by removing the ith digit from the end of the number
        num = int(str(n)[:i] + str(n)[i+1:]))
        # Check if the calculated number is prime
        if is_prime(num):
            continue
        else:
            return False

    # If the number remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime, then it is a left-and-right-truncatable prime number
    return True
```