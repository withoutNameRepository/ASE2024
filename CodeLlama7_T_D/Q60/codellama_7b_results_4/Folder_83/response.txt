 ```
def all_left_right_truncatable_prime(num):
x = num[24]
left_right_truncatable_prime_list = []
for i in range(2, x + 1):
if is_prime(i) and left_and_right_truncatable_prime(i):
left_right_truncatable_prime_list.append(i)
return sorted(left_right_truncatable_prime_list)
def is_prime(n):
if n < 2:
return False

for i in range(2, int(n ** 0.5) + 1):
if n % i == 0:
return False

return True

def left_and_right_truncatable_prime(n):
string = str(n)
length = len(string)

for i in range(2, length - 1):
left_digit = string[i]
right_digit = string[-i]
if left_digit != right_digit:
return False

return True
```
This code defines a function `all_left_right_truncatable_prime` that takes one argument, which is a tuple of positive integers. The function returns the list of all left-and-right-truncatable prime numbers less than or equal to the integer at index 24 in the input tuple.
The code first defines a function `is_prime` that checks whether an integer is prime. If the integer is not prime, the function returns `False`. Otherwise, the function returns `True`.
Next, the code defines a function `left_and_right_truncatable_prime` that checks whether an integer is left-and-right-truncatable prime. The function first converts the integer to a string and then calculates the length of the string.
The function then loops through each digit in the string, starting from the second digit (index 1) and ending at the penultimate digit (length - 2). For each digit, the function checks whether the left-most and right-most digits are the same. If they are not the same, the function returns `False`.
Finally, if all of the above conditions are met, the function returns `True`.
The main function then calls this `left_and_right_truncatable_prime` function for each integer in the input tuple and returns a sorted list of all left-and-right-truncatable prime numbers less than or equal to the integer at index 24.