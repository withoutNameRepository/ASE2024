 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    primes = []

    # Iterate from 1 to x (exclusive)
    for i in range(1, x + 1):

        # Check if i is a prime number
        if is_prime(i):

            # Check if i is left-and-right-truncatable prime
            if is_left_right_truncatable_prime(i):

                # Add i to the list of prime numbers
                primes.append(i)

    # Sort the list of prime numbers in descending order
    primes.sort(reverse=True)

    # Return the list of prime numbers
    return primes

# Check if a number is a prime number
def is_prime(n):

    # Check if n is less than or equal to 1
    if n <= 1:
        return False

    # Check if n is divisible by 2 to n - 1
    for i in range(2, n):
        if n % i == 0:
            return False

    # If the loop completes successfully, then n is a prime number
    return True

# Check if a number is left-and-right-truncatable prime
def is_left_right_truncatable_prime(n):

    # Check if n is less than or equal to 1
    if n <= 1:
        return False

    # Check if n is a one-digit prime number
    if len(str(n)) == 1:
        return True

    # Check if n contains no 0
    if "0" in str(n):
        return False

    # Check if the leading leftmost and last rightmost digits of n are simultaneously successively removed down to a one- or two-digit prime number
    for i in range(len(str(n)) - 1, 0, -1):
        temp = str(n)[:i] + str(n)[i + 1:]
        if is_prime(int(temp)):
            return True

    # If the loop completes successfully, then n is not left-and-right-truncatable prime
    return False
```