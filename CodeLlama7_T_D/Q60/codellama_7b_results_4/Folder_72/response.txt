 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through all the numbers less than or equal to x
    for i in range(1, x+1):

        # Check if the number is a prime number using the isprime() function from the math module
        if (i > 1) and all(i % j != 0 for j in range(2, int(i ** 0.5) + 1)):

            # Initialize an empty string to store the left-and-right-truncatable prime number
            lr_prime = ""

            # Loop through all the digits of the number from right to left
            for digit in str(i)[::-1]:

                # Check if the digit is not 0 and if it is still a prime number after removing the leading leftmost and last rightmost digits
                if (digit != "0") and (int(digit) > 1) and all(int(digit) % j != 0 for j in range(2, int(int(digit) ** 0.5) + 1))):

                    # Add the left-and-right-truncatable prime number to the list of prime numbers
                    prime_numbers.append(i)

            # If the number is a left-and-right-truncatable prime number, add it to the list of prime numbers
            if lr_prime != "":

                # Add the left-and-right-truncatable prime number to the list of prime numbers
                prime_numbers.append(i)

    # Return the list of all left-and-right-truncatable prime numbers less than or equal to x in descending order
    return sorted(prime_numbers, reverse=True)
```