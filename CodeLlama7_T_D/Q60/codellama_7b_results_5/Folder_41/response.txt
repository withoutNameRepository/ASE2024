 Here is a function that returns the list of all left-and-right-truncatable prime numbers less than or equal to x:
```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the results
    results = []

    # Iterate from 1 to x
    for i in range(1, x + 1):
        # Check if i is a prime number
        if is_prime(i):
            # Check if i is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add i to the results list
                results.append(i)

    # Sort the results list in descending order
    results.sort(reverse=True)

    # Return the results list
    return results
```
Here is a function that checks if a number is prime:
```
def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to n-1
        for i in range(2, n):
            # If i divides n and i does not equal n, return False
            if n % i == 0 and i != n:
                return False

    # If we reach this point, return True
    return True
```
Here is a function that checks if a number is left-and-right-truncatable prime number:
```
def is_left_right_truncatable_prime(n):
    # Check if n is a prime number
    if not is_prime(n):
        return False

    # Check if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime.
    for i in range(1, n + 1):
        # If the leading leftmost and last rightmost digits are not simultaneously successively removed down to a one- or two-digit prime, return False
        if is_prime(n // (10 ** i)) and is_prime(n % (10 ** (i - 1)))):
            return False

    # If we reach this point, return True
    return True
```
Here is a function that checks if a number is palindromic:
```
def is_palindromic(n):
    # Check if n is a prime number
    if not is_prime(n):
        return False

    # Check if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime.
    for i in range(1, n + 1):
        # If the leading leftmost and last rightmost digits are not simultaneously successively removed down to a one- or two-digit prime, return False
        if is_prime(n // (10 ** i)) and is_prime(n % (10 ** (i - 1)))):
            return False

    # If we reach this point, return True
    return True
```
Note that these functions are not optimized for performance and should only be used for small to medium-sized inputs.