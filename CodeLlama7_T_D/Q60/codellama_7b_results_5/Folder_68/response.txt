 ```
def all_left_right_truncatable_prime(x):
# Initialize an empty list to store the prime numbers
primes = []

# Loop through the numbers from 1 to x
for i in range(1, x + 1):

# Check if the number is a prime number
if is_prime(i):

# Check if the number is left-and-right-truncatable prime number
if is_left_right_truncatable_prime(i):

# Add the number to the list of prime numbers
primes.append(i)

# Return the list of all left-and-right-truncatable prime numbers less than or equal to x, sorted in descending order
return sorted(primes, reverse=True)

def is_prime(n):

# Check if n is a positive integer
if not (isinstance(n, int) and n > 0):
raise ValueError("n must be a positive integer")

# Check if n is a prime number
for i in range(2, int(n ** 0.5) + 1):
if n % i == 0:
return False

return True

def is_left_right_truncatable_prime(n):

# Check if n is a positive integer
if not (isinstance(n, int) and n > 0):
raise ValueError("n must be a positive integer")

# Check if n is a prime number
if not is_prime(n):
return False

# Check if the leading leftmost and last rightmost digits of n are simultaneously successively removed down to a one- or two-digit prime
while True:

# Remove the leading leftmost digit of n
n = int(str(n)[1:])

# Check if n is less than or equal to 9
if n <= 9:
return True

# Remove the last rightmost digit of n
n = int(str(n)[:-1])

# Check if n is less than or equal to 9
if n <= 9:
return True

# If all digits of n have been removed, return False
else:
return False
```