 ```
def all_left_right_truncatable_prime(x):
	# Initialize an empty list to store the prime numbers
	prime_numbers = []

	# Iterate from 1 to x (inclusive)
	for i in range(1, x + 1):

		# Check if the number is a prime number
		if is_prime(i):

			# Check if the number is left-and-right-truncatable prime number
			if is_left_right_truncatable_prime(i):

				# Add the prime number to the list
				prime_numbers.append(i)

	# Sort the list in ascending order
	prime_numbers.sort()

	# Return the list of all left-and-right-truncatable prime numbers less than or equal to x
	return prime_numbers


# Check if a number is a prime number
def is_prime(n):

	# If the number is not an integer, return False
	if type(n) != int:
		return False

	# If the number is less than 2, return False
	if n < 2:
		return False

	# Check if the number is divisible by any prime number less than or equal to its square root
	for i in range(2, int(n ** 0.5) + 1):
		if n % i == 0:
			return False

	# If the number has not been found to be divisible by any prime number less than or equal to its square root, return True
	return True


# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

	# If the number is not a prime number, return False
	if not is_prime(n):
		return False

	# Check if the number contains any zero digits
	for i in str(n):
		if i == '0':
			return False

	# Remove the leading leftmost and last rightmost digits of the number
	leftmost_digit = int(str(n)[1])
	rightmost_digit = int(str(n)[:-1])[-1]

	# Check if the number remains prime after removing the leading leftmost and last rightmost digits
	if is_prime(leftmost_digit) and is_prime(rightmost_digit):
		return True

	# If the number does not remain prime after removing the leading leftmost and last rightmost digits, return False
	return False
```