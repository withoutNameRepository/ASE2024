 ```
def all_left_right_truncatable_prime(x):
# Initialize an empty list to store the left-and-right-truncatable prime numbers less than or equal to x
lst = []

# Loop through all prime numbers less than or equal to x

for i in range(2, x + 1):
# Check if i is a prime number
if is_prime(i):
# Check if i contains no 0 and remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime.
if left_right_truncatable_prime(i):
lst.append(i)

return sorted(lst)

def is_prime(n):
# Check if n is an integer greater than 1
if not (isinstance(n, int) and n > 1):
return False

# Check if n is a multiple of 2 to n - 1
for i in range(2, n):
if n % i == 0:
return False

return True

def left_right_truncatable_prime(n):
# Check if n contains no 0
if '0' in str(n):
return False

# Remove the leading leftmost and last rightmost digits of n simultaneously successively removed down to a one- or two-digit prime.
while len(str(n)) > 2:
n = int(str(n)[:-1]) * 10 + int(str(n)[-1])
# Check if the resulting number is a prime number
if not is_prime(n):
return False

# Return True if n is a left-and-right-truncatable prime number.
return True
```