 Here is a possible implementation of the `all_left_right_truncatable_prime` function:
```python
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the results
    results = []

    # Loop through all prime numbers less than or equal to x
    for i in range(2, x + 1):

        # Check if i is a prime number
        if is_prime(i):

            # Initialize an empty string to store the digits of i
            digits = ""

            # Loop through the digits of i and add them to the string
            for j in range(len(str(i)))):
                digits += str(i[j]))

            # Check if digits contains no 0 and remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime
            if "0" not in digits and is_prime(digits[0]) and is_prime(digits[-1])):

                # Add i to the results list
                results.append(i)

    # Return the sorted results list in descending order
    return sorted(results, reverse=True)

# Define a function to check if a number is prime
def is_prime(n):

    # Check if n is less than or equal to 1
    if n <= 1:
        return False

    # Check if n is divisible by any number between 2 and the square root of n
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    # If no numbers between 2 and the square root of n divide n, then n is prime
    return True
```