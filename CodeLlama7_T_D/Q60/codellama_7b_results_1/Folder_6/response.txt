 ```
def all_left_right_truncatable_prime(x):
\# Initialize an empty list to store the prime numbers
primes = []

\# Iterate from 1 to x, checking if each number is a prime number and meets the criteria for left-and-right-truncatable prime numbers
for i in range(1, x + 1):

\# Check if the current number is a prime number
if is_prime(i):

\# Check if the current number meets the criteria for left-and-right-truncatable prime numbers
if is_left_right_truncatable_prime(i):

\# If the current number meets the criteria, add it to the list of prime numbers
primes.append(i)

\# Return the list of prime numbers in ascending order
return sorted(primes)

\# Define a function to check if a number is a prime number
def is_prime(n):

\# Check if n is equal to 1 or 0, which are not considered prime numbers
if n == 1 or n == 0:
return False

\# Check if n is divisible by any number between 2 and the square root of n
for i in range(2, int(n ** 0.5) + 1):
if n % i == 0:
return False

\# If none of the above conditions are met, return True
return True

\# Define a function to check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

\# Check if n is equal to 1 or 0, which are not considered prime numbers
if n == 1 or n == 0:
return False

\# Check if the leading leftmost and last rightmost digits of n are simultaneously successively removed down to a one- or two-digit prime number
while len(str(n)) > 2:
if is_prime(int(str(n)[1:]))) == False:
return False

\# If none of the above conditions are met, return True
return True
```