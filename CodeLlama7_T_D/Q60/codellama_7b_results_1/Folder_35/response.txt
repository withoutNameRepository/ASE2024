 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    primes = []

    # Loop through all numbers less than or equal to x
    for i in range(1, x + 1):

        # Check if the number is a prime number
        if is_prime(i):

            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):

                # Add the prime number to the list
                primes.append(i)

    # Sort the list in ascending order
    primes = sorted(primes)

    # Return the list of all left-and-right-truncatable prime numbers less than or equal to x
    return primes

# Check if a number is a prime number
def is_prime(n):

    # Check if n is greater than 1
    if n > 1:

        # Loop through all numbers less than n
        for i in range(2, n):

            # Check if i divides n without leaving a remainder
            if n % i == 0:

                # Return False since n is not a prime number
                return False

    # Return True since n is a prime number
    return True

# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

    # Initialize an empty string to store the number in reverse order
    rev = ""

    # Loop through all characters of the number n in reverse order
    for i in range(len(str(n))) - 1, -1:

        # Add each character of the number n to the end of the reversed string
        rev += str(n)[i]

    # Check if the reversed string is equal to the original string
    if str(n) == rev:

        # Initialize an empty list to store the prime factors of the number n
        factors = []

        # Loop through all numbers less than or equal to sqrt(n)
        for i in range(1, int(math.sqrt(n))) + 1:

            # Check if i divides n without leaving a remainder
            if n % i == 0:

                # Add i and its multiplicative inverse (if exists) to the list of prime factors
                factors.append(i)
                factors.append(int(n / i)))

    # Check if any prime factor in the list is equal to the number n
    for i in range(len(factors)):

        # Check if the current prime factor equals the number n
        if factors[i] == n:

            # Return True since the number n is a left-and-right-truncatable prime number
            return True

# Return False since the number n is not a left-and-right-truncatable prime number
return False

```