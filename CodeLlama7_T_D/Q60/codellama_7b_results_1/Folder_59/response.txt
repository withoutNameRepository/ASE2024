 ```
def all_left_right_truncatable_prime(x):
	# Initialize an empty list to store the prime numbers
	prime_numbers = []

	# Iterate from 2 to x (both inclusive)
	for i in range(2, x + 1):

		# Check if the number is a prime number
		if is_prime(i):

			# Check if the number is left-and-right-truncatable prime number
			if is_left_right_truncatable_prime(i):

				# Add the prime number to the list
				prime_numbers.append(i)

	# Return the list of all left-and-right-truncatable prime numbers less than or equal to x, sorted in descending order
	return sorted(prime_numbers, reverse=True)

# Define a function to check if a number is a prime number
def is_prime(n):

	# Check if n is an integer greater than 1
	if not isinstance(n, int) or n < 2:

		return False

	# Check if n is a multiple of 2 to n-1
	for i in range(2, n):

		if n % i == 0:

			return False

	# If the number is a prime number, return True
	return True

# Define a function to check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

	# Check if n is an integer greater than 1
	if not isinstance(n, int) or n < 2:

		return False

	# Check if n contains the digit 0
	if '0' in str(n):

		return False

	# Check if the number is a prime number
	if not is_prime(n):

		return False

	# Check if the number remains prime after removing the leading leftmost and last rightmost digits
	if not is_prime(n % 10 ** (len(str(n))) - len(str(n)))):

		return False

	# If the number is a left-and-right-truncatable prime number, return True
	return True
```