 ```
def all_left_right_truncatable_prime(x):
    # List of left-and-right-truncatable prime numbers less than or equal to x
    prime_list = []
    # Iterate from 1 to x
    for i in range(1, x + 1):
        # Check if i is a prime number
        if is_prime(i):
            # Check if the leading leftmost and last rightmost digits of i are simultaneously successively removed down to a one- or two-digit prime
            if is_left_right_truncatable_prime(i):
                # Add i to the list of left-and-right-truncatable prime numbers less than or equal to x
                prime_list.append(i)
    # Sort the list of left-and-right-truncatable prime numbers in ascending order
    prime_list = sorted(prime_list)
    return prime_list

def is_prime(n):
    # Check if n is a positive integer
    if not (isinstance(n, int) and n > 0):
        raise ValueError("n must be a positive integer")

    # Check if n is an even number
    if n % 2 == 0:
        return False

    # Check if n is a prime number using the Sieve of Eratosthenes
    for i in range(3, int(n ** 0.5) + 1, 2):
        if n % i == 0:
            return False

    return True

def is_left_right_truncatable_prime(n):
    # Check if n is a prime number
    if not is_prime(n):
        return False

    # Check if the leading leftmost digit of n is 1 or 2
    if n // 10 ** (len(str(n))) - 1) % 10 < 3:
        return False

    # Check if the last rightmost digit of n is 1 or 2
    if n % 10 < 3:
        return False

    # Check if the leading leftmost and last rightmost digits of n are simultaneously successively removed down to a one- or two-digit prime
    for i in range(len(str(n)) - 1, 0, -1):
        if not is_prime(int(str(n)[i:]) * int(str(n)[:i]))) % 10 < 3:
            return False

    return True
```