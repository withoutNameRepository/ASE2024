 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Loop through all numbers less than or equal to x
    for i in range(1, x + 1):

        # Check if the number is a prime number
        if is_prime(i):

            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):

                # Add the number to the list of prime numbers
                prime_numbers.append(i)

    # Sort the list of prime numbers in ascending order
    prime_numbers.sort()

    # Return the list of prime numbers
    return prime_numbers

# Check if a number is a prime number
def is_prime(n):

    # Check if the number is greater than 1
    if n > 1:

        # Loop through all numbers less than or equal to the square root of the number
        for i in range(2, int(n ** 0.5) + 1):

            # Check if the number is divisible by any number between 2 and the square root of the number
            if n % i == 0:

                # Return False if the number is not prime
                return False

    # Return True if the number is prime
    return True

# Check if a number is left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

    # Check if the number contains any 0 digits
    if '0' in str(n):

        # Return False if the number contains any 0 digits
        return False

    # Loop through all numbers less than or equal to the square root of the number
    for i in range(2, int(n ** 0.5) + 1):

        # Check if the number is divisible by any number between 2 and the square root of the number
        if n % i == 0:

            # Return False if the number is not left-and-right-truncatable prime number
            return False

    # Check if the number is a one-digit or two-digit prime number
    if len(str(n)) == 1 or len(str(n)) == 2:

        # Return True if the number is a one-digit or two-digit prime number
        return True

    # Check if the number has any left-truncatable prime numbers
    for i in range(len(str(n)) - 1, 0, -1):

        # Check if the number has any right-truncatable prime numbers
        for j in range(i + 1, len(str(n)))):

            # Check if the number is divisible by any number between i and j
            if n % (int(str(n)[i]) * int(str(n)[j]))) == 0:

                # Return False if the number is not left-and-right-truncatable prime number
                return False

    # Check if the number has any right-truncatable prime numbers
    for i in range(len(str(n)) - 1, 0, -1):

        # Check if the number is divisible by any number between i and j
        if n % (int(str(n)[i]) * int(str(n)[i]))) == 0:

            # Return False if the number is not left-and-right-truncatable prime number
            return False

    # Return True if the number is a left-and-right-truncatable prime number
    return True
```