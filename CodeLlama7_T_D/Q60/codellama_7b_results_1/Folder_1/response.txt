 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate from 1 to x
    for i in range(1, x + 1):

        # Check if the number is a prime number
        if is_prime(i):

            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):

                # Add the prime number to the list
                prime_numbers.append(i)

    # Return the sorted list of all left-and-right-truncatable prime numbers less than or equal to x
    return sorted(prime_numbers, reverse=True)

# Check if a number is a prime number
def is_prime(n):

    # If the number is less than 2, it is not a prime number
    if n < 2:
        return False

    # If the number is divisible by any number between 2 and the square root of the number, it is not a prime number
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    # If the number is greater than 1 and it is divisible only by 1 and itself, it is a prime number
    return True

# Check if a number is a left-and-right-truncatable prime number
def is_left_right_truncatable_prime(n):

    # If the number is not a prime number, it cannot be a left-and-right-truncatable prime number
    if not is_prime(n):
        return False

    # Check if the number contains any 0 digits
    for digit in str(n):
        if digit == '0':
            return False

    # Remove the leading leftmost and last rightmost digits of the number
    leading_leftmost = int(str(n)[1:])
    last_rightmost = int(str(n)[:-1]))

    # Check if the removed digits are still prime numbers
    if not is_prime(leading_leftmost) or not is_prime(last_rightmost):
        return False

    # If all the checks are successful, the number is a left-and-right-truncatable prime number
    return True
```