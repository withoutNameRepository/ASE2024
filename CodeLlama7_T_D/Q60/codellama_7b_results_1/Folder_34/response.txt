 ```
def all_left_right_truncatable_prime(x):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate from 1 to x
    for i in range(1, x + 1):
        # Check if the number is a prime number
        if is_prime(i):
            # Check if the number is left-and-right-truncatable prime number
            if is_left_right_truncatable_prime(i):
                # Add the number to the list of prime numbers
                prime_numbers.append(i)

    # Return the sorted list of prime numbers
    return sorted(prime_numbers, reverse=True)

def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to the square root of n
        for i in range(2, int(n ** 0.5) + 1)):
            # Check if i divides n
            if n % i == 0:
                # Return False if i divides n
                return False

    # Return True if n is greater than 1 and has no factors other than 1 and itself
    return True

def is_left_right_truncatable_prime(n):
    # Check if the number contains any leading zeros
    if not n.startswith("0"):
        # Check if the number is a left-and-right-truncatable prime number
        if is_left_truncatable_prime(n) and is_right_truncatable_prime(n)):
            return True

def is_left_truncatable_prime(n):
    # Check if the number is a prime number
    if is_prime(n):
        # Check if the number has no leading zeros
        if not n.startswith("0"):
            # Return True if the number is a left-truncatable prime number
            return True

def is_right_truncatable_prime(n):
    # Check if the number is a prime number
    if is_prime(n):
        # Check if the number has no trailing zeros
        if not n.endswith("0"):
            # Return True if the number is a right-truncatable prime number
            return True
```