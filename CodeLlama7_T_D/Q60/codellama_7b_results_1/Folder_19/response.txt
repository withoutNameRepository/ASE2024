 ```
def all_left_right_truncatable_prime(x):
	# Create a list of all left-and-right-truncatable prime numbers less than or equal to x
	list = []

	# Iterate from 1 to x
	for i in range(1, x + 1):

		# Check if the number is a prime number and it is also left-and-right-truncatable
		if is_prime(i) and is_left_right_truncatable(i):

			# Add the number to the list
			list.append(i)

	# Sort the list in descending order
	list.sort(reverse=True)

	# Return the list of all left-and-right-truncatable prime numbers less than or equal to x
	return list

# Check if a number is a prime number
def is_prime(n):

	# If the number is 1, it is not a prime number
	if n == 1:
		return False

	# If the number is less than 2, it is not a prime number
	if n < 2:
		return False

	# Check if the number is divisible by any integer between 2 and the square root of the number
	for i in range(2, int(n ** 0.5) + 1):
		if n % i == 0:
			return False

	# If the number makes it to this point, it is a prime number
	return True

# Check if a number is left-and-right-truncatable
def is_left_right_truncatable(n):

	# If the number is 1, it is not left-and-right-truncatable
	if n == 1:
		return False

	# Check if the number contains any 0 digits
	if "0" in str(n):
		return False

	# Check if the number remains prime if the leading leftmost and last rightmost digits are simultaneously successively removed down to a one- or two-digit prime.
	for i in range(len(str(n)) - 1):
		if not is_prime(int(str(n)[:i] + str(n)[i+1:])):
			return False

	# If the number makes it to this point, it is left-and-right-truncatable
	return True
```