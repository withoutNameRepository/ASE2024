 Here is a function called `lists_with_product_equal_n` that takes a circular list of integers as an argument and returns a list of sublists each containing the contiguous integers from the given list such that their product equals 6. Each sublist in the returned list can be of any size as long as it is smaller than or equal to the size of the given list. If no such sublist exists, the function should return an empty list. If there are duplicates of such a sublist, they should all be contained in the returned list. The order of sublists in the returned list does not matter.
```python
def lists_with_product_equal_n(my_list):
    # Initialize an empty list to store the sublists
    sublists = []

    # Iterate over the elements of the given list
    for i in range(len(my_list)):

        # Initialize a variable to store the product of the current sublist
        product = 1

        # Initialize a variable to store the size of the current sublist
        size = 0

        # Iterate over the elements of the given list starting from the current element
        for j in range(i, len(my_list)):

            # Update the product and size of the current sublist
            product *= my_list[j]
            size += 1

            # If the product equals 6, add the current sublist to the list of sublists
            if product == 6:
                sublists.append(my_list[i:j + 1])

    # Return the list of sublists
    return sublists
```