 Here is a possible implementation of the function `lists_with_product_equal_n` in Python:
```
def lists_with_product_equal_n(circular_list):
    # Initialize an empty list to store the sublists
    sublists = []

    # Loop through the elements of the circular list
    for i in range(len(circular_list)):
        # Initialize a variable to store the product of the current element and its successor
        product = circular_list[i] * circular_list[(i + 1) % len(circular_list)]

        # If the product is equal to -81, add the current element and its successor to the list of sublists
        if product == -81:
            sublists.append([circular_list[i], circular_list[(i + 1) % len(circular_list)]]))

    # Return the list of sublists
    return sublists
```
This function takes a circular list of integers as input, and returns a list of sublists each of which contains the contiguous integers from the given list such that their product equals -81. Each sublist in the returned list can be of any size as long as it is smaller than or equal to the size of the given list. If no such sublist exists, the function should return an empty list. If there are duplicates of such a sublist, they should all be contained in the returned list. The order of sublists in the returned list does not matter.