 ```
def filter_chars(string):
    # Create a new string that is the same length as the original string
    filtered_string = ""

    # Iterate over each character in the original string
    for char in string:
        # If the current character is between indices 421 and 854 (both exclusive) and it is greater than 'D' and smaller than 'J', remove all occurrences of that character within the filtered string while keeping the order of all characters intact.
        if (421 < char < 854) and (char > "D") and (char < "J"):
            # Remove all occurrences of this character from the filtered string.
            filtered_string = filtered_string.replace(char, "")

        else:
            # Add the current character to the filtered string if it does not meet the above conditions.
            filtered_string += char

    # Return the altered string.
    return filtered_string

# Test the function with a sample input.
#print(filter_chars("Hello World"))
```
This code defines a function called `filter_chars` that takes a single argument, a string. The function creates a new empty string called `filtered_string`. Then it iterates over each character in the original string using a for loop. For each character, if it is between indices 421 and 854 (both exclusive) and it is greater than 'D' and smaller than 'J', the function removes all occurrences of that character within the `filtered_string` while keeping the order of all characters intact. Then it adds the current character to the filtered string if it does not meet the above conditions. Finally, it returns the altered string.
In this code, the user-defined function `filter_chars` is defined with a single argument, which is a string. The function creates a new empty string called `filtered_string`. Then it iterates over each character in the original string using a for loop. For each character, if it is between indices 421 and 854 (both exclusive) and it is greater than 'D' and smaller than 'J', the function removes all occurrences of that character within the `filtered_string` while keeping the order of all characters intact. Then it adds the current character to the filtered string if it does not meet the above conditions. Finally, it returns the altered string.