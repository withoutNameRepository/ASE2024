 Here is a possible implementation of the `sum_of_divisors_in_range` function in Python:
```python
def sum_of_divisors_in_range(n):
    # Check if n is a positive integer
    if not isinstance(n, int) or n <= 0:
        raise ValueError("The argument must be a positive integer")

    # Initialize the sum to 0
    sum = 0

    # Iterate over the divisors of n between 36 and 93 (inclusive)
    for i in range(36, 94):
        if n % i == 0:
            sum += i

    return sum
```
This function takes a positive integer `n` as its argument. It then checks if `n` is a positive integer using the `isinstance()` method and raising a `ValueError` if it is not.
Next, the function initializes the sum to 0 using the assignment operator `=`.
Then, the function iterates over the divisors of `n` between 36 and 93 (inclusive) using a range loop, where each divisor is represented by the variable `i`.
For each divisor `i`, the function checks if it divides evenly into `n` using the modulo operator `%`. If the result of this operation is 0, then the divisor `i` is included in the sum. Otherwise, the divisor is skipped and not included in the sum.
Finally, the function returns the sum of all positive divisors of `n` that are between 36 and 93 (inclusive). If no such divisors exist in the specified range, then the function returns 0.