 Here is a possible implementation of the `palindromes_of_specific_lengths` function:
```python
def palindromes_of_specific_lengths(string, indices, lengths):
    # Define a list to store the palindromes
    palindromes = []
    # Loop through each index in the specified range
    for i in range(*indices):
        # Check if the character at the current index is an English letter
        if string[i].isalpha():
            # Loop through each length in the specified range
            for j in range(*lengths):
                # Check if the substring starting from the current index and having the specified length is a palindrome
                if string[i:i+j] == string[i:i+j][::-1]:
                    # Add the palindrome to the list
                    palindromes.append(string[i:i+j])
    # Return the list of palindromes in a case-insensitive manner
    return [p.lower() for p in palindromes]
```
This implementation defines a function `palindromes_of_specific_lengths` that takes three arguments: `string`, which is the string to search for palindromes; `indices`, which is a tuple of two integers specifying the range of indices in `string` to search for palindromes; and `lengths`, which is a tuple of two integers specifying the range of lengths to consider when searching for palindromes. The function returns the set of all palindromes with the specified length occurring in the substring from index 30 to index 84, both inclusive.
For example, if we call the function with the following arguments:
```python
string = "abcdefghijklmnopqrstuvwxyz"
indices = (30, 84)
lengths = (12, 20)
```
the function would return the set of all palindromes with lengths between 12 and 20 that occur in the substring from index 30 to index 84, both inclusive. The resulting set might include palindromes such as "civic," "radar," or "level."