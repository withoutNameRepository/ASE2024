 ```
def palindromes_of_specific_lengths(string):
    # Convert the string to lowercase for case-insensitive comparison
    string = string.lower()

    # Define the index range for the substring
    start_index = 101
    end_index = 292

    # Create an empty set to store the palindromes
    palindromes = set()

    # Iterate over the characters in the substring
    for i in range(start_index, end_index + 1):
        # Check if the character is a letter
        if string[i].isalpha():
            # Create a variable to store the length of the palindrome
            palindrome_length = 0

            # Initialize the starting index for the palindrome
            start_index = i

            # Iterate over the characters in the substring, starting from the current character
            for j in range(i, end_index + 1):
                # Check if the character is a letter
                if string[j].isalpha():
                    # Increment the length of the palindrome
                    palindrome_length += 1

                    # Check if the length of the palindrome is within the specified range
                    if palindrome_length >= 154 and palindrome_length <= 182:
                        # Create a variable to store the ending index for the palindrome
                        end_index = j

                        # Check if the palindrome is found in the substring
                        if string[start_index:end_index + 1] == string[start_index:end_index + 1][::-1]:
                            # Add the palindrome to the set of palindromes
                            palindromes.add(string[start_index:end_index + 1])

    # Return the set of palindromes found in the substring
    return palindromes

# Test the function with a sample string
#print(palindromes_of_specific_lengths("abcdefghijklmnopqrstuvwxyz"))
```