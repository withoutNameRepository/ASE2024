 ```
def palindromes_of_specific_lengths(string):
    # Define the index range for the substring
    start = 62
    end = 88
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate through each character in the substring
    for i in range(start, end + 1):
        # Check if the character at index i is a letter
        if string[i].isalpha():
            # Create a copy of the substring starting from index i
            substr = string[i:]
            # Iterate through each palindrome in the copy of the substring
            for j in range(len(substr) // 2):
                # Check if the current palindrome is between 18 and 21 characters long, inclusive
                if len(substr[:j * 2 + 1]) >= 18 and len(substr[:j * 2 + 1]) <= 21:
                    # Check if the current palindrome is a palindrome in a case-insensitive manner
                    if substr[:j * 2 + 1].lower() == substr[:j * 2 + 1][::-1].lower():
                        # Add the current palindrome to the set of palindromes
                        palindromes.add(substr[:j * 2 + 1])
    # Return the set of palindromes found in the substring within the specified index range
    return palindromes
```