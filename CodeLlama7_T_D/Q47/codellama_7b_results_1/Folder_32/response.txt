 Here is a possible implementation of the `palindromes_of_specific_lengths` function in Python:
```python
def palindromes_of_specific_lengths(string, index16=16, index77=77, min_length=43, max_length=47):
    # Convert the input string to lowercase
    string = string.lower()
    # Create a list of all palindromes in the substring from index 16 to index 77
    palindromes = []
    for i in range(index16, index77 + 1):
        sub_string = string[i - 1:i + 2]
        if len(sub_string) > max_length or len(sub_string) < min_length:
            continue

        if sub_string == sub_string[::-1]:
            palindromes.append(sub_string)
    return set(palindromes)
```
This implementation first converts the input string to lowercase, as specified in the problem statement. It then creates a list of all palindromes in the substring from index 16 to index 77 by iterating over each possible starting index and checking if the corresponding sub-string is a palindrome. If the sub-string is a palindrome, it is appended to the `palindromes` list. Finally, the function returns the set of all palindromes in the specified substring that meet the length requirements.