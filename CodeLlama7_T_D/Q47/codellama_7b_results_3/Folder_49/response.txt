 Here is a possible implementation of the `palindromes_of_specific_lengths` function:
```python
def palindromes_of_specific_lengths(string):
    # Extract the substring containing the palindromes
    substr = string[10:100]
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over the characters in the substring
    for i in range(len(substr)):
        # Check if the character is a letter
        if substr[i].isalpha():
            # Extract the palindrome from the substring starting at index i
            palindrome = substr[i:]
            # Check if the palindrome is of the desired length
            if len(palindrome) >= 10 and len(palindrome) <= 50:
                # Add the palindrome to the set of palindromes
                palindromes.add(palindrome)
    # Return the set of palindromes
    return palindromes
```
This implementation first extracts a substring from the original string that contains only the characters between indices 10 and 100, both inclusive. It then initializes an empty set to store all the palindromes that are found in this substring.
Next, it iterates over each character in the substring using a for loop. For each character, it checks if it is a letter using the `isalpha()` method of the string class. If the character is a letter, it extracts the palindrome from the substring starting at the current index and extending to the end of the substring.
It then checks if the extracted palindrome is of the desired length (between 10 and 50 characters inclusive). If it is not, it skips to the next character in the substring. However, if the extracted palindrome has the correct length, it adds it to the set of palindromes that will be returned by the function.
Finally, the function returns the set of all palindromes that were found in the specified index range and had the desired length.