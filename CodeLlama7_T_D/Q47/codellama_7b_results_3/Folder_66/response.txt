 ```
def palindromes_of_specific_lengths(string):
    # Convert the input string to lowercase for case-insensitive comparison
    string = string.lower()

    # Define the range of indices for which palindromes will be searched

    index_range = range(32, 79)

    # Initialize an empty set to store the palindromes

    palindromes = set()

    # Iterate over the characters in the input string within the specified range

    for i in index_range:

        # Check if the current character is a letter (i.e., not a space or punctuation)

        if string[i].isalpha():

            # Define the range of indices within which palindromes will be searched for the current character

            sub_index_range = range(max(0, i - 32), min(len(string), i + 41)))

            # Iterate over the characters in the input string within the specified range and check if they form a palindrome

            for j in sub_index_range:

                # Check if the current character is the same as the character at index j - 1 (i.e., the previous character) and that the length of the substring between i and j is within the specified range

                if string[i] == string[j - 1] and 35 <= j - i + 1 <= 41:

                    # Add the palindrome to the set of palindromes

                    palindromes.add(string[i:j])

    # Return the set of palindromes found within the specified index range and lengths

    return palindromes
```