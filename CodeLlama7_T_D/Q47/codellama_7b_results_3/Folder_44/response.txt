 ```
def palindromes_of_specific_lengths(string):
    # Define the range of lengths to consider
    min_len = 31
    max_len = 51
    # Define the substring range to search in
    start_index = 18
    end_index = 98
    # Create a set to store the palindromes
    palindromes = set()
    # Iterate over the characters in the substring
    for i in range(start_index, end_index + 1):
        # Check if the current character is a letter
        if string[i].isalpha():
            # Create a variable to store the palindrome
            palindrome = ''
            # Iterate over the characters in the substring starting from the current index
            for j in range(i, i + max_len):
                # Check if the current character is a letter and it is not the last character in the substring
                if string[j].isalpha() and (j != end_index or string[j].islower()):
                    # Add the current character to the palindrome
                    palindrome += string[j]
            # Check if the palindrome has the required length
            if len(palindrome) >= min_len and len(palindrome) <= max_len:
                # Add the palindrome to the set of palindromes
                palindromes.add(palindrome)
    # Return the set of palindromes found in the substring
    return palindromes
```