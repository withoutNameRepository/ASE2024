 ```
def palindromes_of_specific_lengths(string):
    # Define the substring range
    substring = string[70:140]
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over each character in the substring
    for i in range(len(substring)):
        # Get the current character and its index
        char = substring[i]
        index = i + 70
        # Check if the current character is a palindrome of length 3 to 60
        if len(char) >= 3 and len(char) <= 60:
            # Initialize an empty string to store the reverse of the current character
            rev = ""

            # Iterate over each character in the current character
            for j in range(len(char)):
                # Get the current character and its index
                c = char[j]
                ix = j + index

                # Check if the current character is a palindrome of length 3 to 60
                if len(c) >= 3 and len(c) <= 60:
                    # Add the reverse of the current character to the rev string
                    rev += c[::-1]

                    # Check if the rev string is a palindrome of length 3 to 60
                    if rev == char:
                        # Add the current character to the set of palindromes
                        palindromes.add(char)

                    # Reset the rev string
                    rev = ""

            # Check if any palindromes were found
            if len(palindromes) > 0:
                # Return the set of palindromes
                return palindromes

        # Check if any palindromes were found
        if len(palindromes) > 0:
            # Return the set of palindromes
            return palindromes

    # Check if any palindromes were found
    if len(palindromes) > 0:
        # Return the set of palindromes
        return palindromes

# Test the function with a string
string = "abcdefghijklmnopqrstuvwxyz"
#print(palindromes_of_specific_lengths(string))

```