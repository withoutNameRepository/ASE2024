 ```
def palindromes_of_specific_lengths(string):
    # Create a substring of the input string from index 23 to 94 (both inclusive)
    substring = string[23:94].lower()
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over each character in the substring
    for i in range(len(substring)):
        # Check if the current character is a letter (a-z or A-Z)
        if substring[i].isalpha():
            # Check if the current character is the same as the previous character
            if substring[i] == substring[i - 1]:
                # Create a variable to store the length of the palindrome being checked
                length = 2

                # Iterate over each character in the substring starting from the current position
                for j in range(i + 1, len(substring)):
                    # Check if the current character is a letter (a-z or A-Z)
                    if substring[j].isalpha():
                        # Check if the current character is the same as the previous character
                        if substring[j] == substring[j - 1]:
                            # Increment the length of the palindrome being checked
                            length += 2

                            # Check if the length of the palindrome being checked meets the requirements (between 17 to 55)
                            if length >= 17 and length <= 55:
                                # Add the palindrome to the set of palindromes
                                palindromes.add(substring[i - length + 1:i + 1])
    return palindromes
```