 ```
def palindromes_of_specific_lengths(string):
    # Define the range of indexes to consider
    start_index = 12
    end_index = 92
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate through the substring between start_index and end_index
    for i in range(start_index, end_index + 1):
        # Check if the character at index i is a letter
        if string[i].isalpha():
            # Define the length of the palindrome to consider
            length = min(66, len(string) - i + 1)
            # Iterate through the possible lengths of the palindrome
            for j in range(17, length + 1):
                # Check if the substring starting from index i and ending at index (i + j - 1) forms a palindrome
                if string[i:i+j].lower() == string[i:i+j][::-1].lower():
                    # If the palindrome is found, add it to the set of palindromes
                    palindromes.add(string[i:i+j])
    # Return the set of palindromes found in the substring between start_index and end_index
    return palindromes
```