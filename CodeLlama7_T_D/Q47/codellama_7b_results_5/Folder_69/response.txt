 Here is a possible implementation of the `palindromes_of_specific_lengths` function in Python:
```python
def palindromes_of_specific_lengths(string):
    # Define the substring from index 11 to index 96, both inclusive
    substring = string[10:97]
    # Create a list of all palindromes in the substring
    palindromes = []
    for i in range(45, 53):
        # Check if there is a palindrome of length i in the substring
        if substring.find(substring[::-1]) != -1:
            # Add the palindrome to the list
            palindromes.append(substring[:i+1:-1])
    return set(palindromes)
```
This function takes a single argument, `string`, which is a string that may contain any character. It then defines a substring from index 11 to index 96, both inclusive, and creates a list of all palindromes in the substring. The loop checks for palindromes of lengths between 45 and 52 (both inclusive), and if there is a palindrome of length `i` in the substring, it adds the palindrome to the list. Finally, the function returns the set of all palindromes found in the substring.
Note that this function uses the `find()` method to search for palindromes in the substring, which is a case-sensitive search. To perform a case-insensitive search, you can use the `lower()` method to convert both the substring and the palindrome to lowercase before searching for them.