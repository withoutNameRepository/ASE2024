 ```
def palindromes_of_specific_lengths(string, index_range=None, lengths=(3, 4)):
    # Check if the input is a string and has at least 5 characters
    if not isinstance(string, str) or len(string) < 5:
        raise ValueError("Invalid input. The input must be a non-empty string.")
    # Convert the input string to lowercase for case-insensitive comparison
    string = string.lower()
    # Check if the index range is valid and convert it to a tuple of two integers (start, end)
    if index_range is not None:
        try:
            start, end = map(int, index_range.split(","))
        except ValueError:
            raise ValueError("Invalid input. The 'index_range' argument must be a string of two integers separated by a comma.")
    # Check if the lengths are valid and convert them to a tuple of two integers (min, max)
    try:
        min_length, max_length = map(int, lengths)
    except ValueError:
        raise ValueError("Invalid input. The 'lengths' argument must be a string of two integers separated by a comma.")
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over each character in the input string
    for i, char in enumerate(string):
        # Check if the current character is a letter (not a whitespace or a special character)
        if char.isalpha():
            # Start iterating from the current character backwards to find the starting index of the palindrome
            j = i - 1





            while j >= 0 and string[j].lower() == char:
                j -= 1





            # If the above loop found a valid starting index for the palindrome, start iterating from the current character forward to find the ending index of the palindrome
            if j >= 0:
                k = i + 1





                while k < len(string) and string[k].lower() == char:
                    k += 1





                # If the above loop found a valid ending index for the palindrome, add it to the set of palindromes
                if k >= len(string):
                    palindromes.add((j + 1, k - 1))





# Check if the specified index range is valid and convert it to a tuple of two integers (start, end)
if index_range is not None:
    try:
        start, end = map(int, index_range.split(","))
    except ValueError:
        raise ValueError("Invalid input. The 'index_range' argument must be a string of two integers separated by a comma.")
# Check if the specified lengths are valid and convert them to a tuple of two integers (min, max)
try:
    min_length, max_length = map(int, lengths)
except ValueError:
    raise ValueError("Invalid input. The 'lengths' argument must be a string of two integers separated by a comma.")
# Initialize an empty set to store the palindromes
palindromes = set()
# Iterate over each character in the input string
for i, char in enumerate(string):
    # Check if the current character is a letter (not a whitespace or a special character)
    if char.isalpha():
        # Start iterating from the current character backwards to find the starting index of the palindrome
        j = i - 1




        while j >= 0 and string[j].lower() == char:
            j -= 1




        # If the above loop found a valid starting index for the palindrome, start iterating from the current character forward to find the ending index of the palindrome
        if j >= 0:
            k = i + 1




            while k < len(string) and string[k].lower() == char:
                k += 1




            # If the above loop found a valid ending index for the palindrome, add it to the set of palindromes
            if k >= len(string):
                palindromes.add((j + 1, k - 1))
# Filter the palindromes based on their lengths
palindromes = {(j, k) for (j, k) in palindromes if min_length <= k - j + 1 <= max_length}
# If the specified index range is valid and convert it to a tuple of two integers (start, end)
if index_range is not None:
    try:
        start, end = map(int, index_range.split(","))
    except ValueError:
        raise ValueError("Invalid input. The 'index_range' argument must be a string of two integers separated by a comma.")
# Filter the palindromes based on their starting and ending indices within the specified index range
palindromes = {(j, k) for (j, k) in palindromes if start <= j <= end}
# Return the set of filtered palindromes
return palindromes
```