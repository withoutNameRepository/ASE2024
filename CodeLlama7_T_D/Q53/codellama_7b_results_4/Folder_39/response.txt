 ```
def palindrome_of_length_at_least_n(string, n):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each character in the string
    for i in range(len(string)):
        # Check if the character is a letter (not a whitespace or a punctuation)
        if string[i].isalpha():
            # Loop through each character in the reversed substring starting from the current character
            for j in range(i, -1, -1):
                # Check if the character at the current position is a letter (not a whitespace or a punctuation)
                if string[j].isalpha():
                    # If the length of the palindrome is greater than or equal to the given value 'n', add it to the set of palindromes
                    if len(string[i:j+1]) >= n:
                        palindromes.add(string[i:j+1])
    # Return the set of palindromes in a case-insensitive manner
    return frozenset(palindromes)
```