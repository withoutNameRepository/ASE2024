 ```
def palindrome_of_length_at_least_n(string, n):
    # Convert the string to lowercase for case-insensitive comparison
    string = string.lower()

    # Initialize an empty set to store the palindromes

    palindromes = set()

    # Iterate over the characters in the string

    for i in range(len(string)):

        # Check if the character at position i is a letter (not a space or other non-letter character)

        if string[i].isalpha():

            # Get the length of the substring starting from position i and ending at the end of the string

            substr_length = len(string) - i

            # Check if the substring is a palindrome (the same characters read the same way forward and backward)

            if substr_length >= n and string[i:i+substr_length] == string[i:i+substr_length][::-1]:

                # Add the palindrome to the set of palindromes

                palindromes.add(string[i:i+substr_length])

    # Return the set of palindromes

    return palindromes
```