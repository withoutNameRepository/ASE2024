 ```
def palindrome_of_length_at_least_n(string, n):
    # create a list of all words in the string
    words = string.split()
    # initialize an empty set to store the palindromes
    palindromes = set()
    # loop through each word in the string
    for word in words:
        # check if the word is a palindrome and its length is greater than or equal to n
        if word == word[::-1] and len(word) >= n:
            # add the palindrome to the set
            palindromes.add(word)
    return palindromes
```
This code defines a function `palindrome_of_length_at_least_n` that takes two arguments: `string`, which is the input string, and `n`, which is the minimum length of the palindromes to be returned. The function returns a set containing all palindromes in the input string that have a length greater than or equal to the specified minimum length.
The function first splits the input string into individual words using the `split()` method, and then iterates over each word in the list of words. For each word, the function checks if it is a palindrome by comparing its reverse with itself. If the word is a palindrome and its length is greater than or equal to the specified minimum length, the function adds it to an empty set that will be returned at the end of the iteration.
The function also takes into account the case-insensitivity requirement by using the `lower()` method on the input string before splitting it into words. This ensures that all words in the input string are compared in a case-insensitive manner.