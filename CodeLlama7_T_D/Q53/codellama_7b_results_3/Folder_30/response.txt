 Here is a possible implementation of the `palindrome_of_length_at_least_n` function in Python:
```
def palindrome_of_length_at_least_n(string, n):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over each substring of length greater than or equal to 16 in the given string
    for i in range(len(string) - n + 1):
        # Check if the current substring is a palindrome
        if string[i:i+n].lower() == string[i:i+n][::-1].lower():
            # Add the palindrome to the set of palindromes
            palindromes.add(string[i:i+n])
    # Return the set of palindromes
    return palindromes
```
This implementation uses a combination of slicing and lowercasing to check if a substring is a palindrome. It also uses a set to store the palindromes, which allows for efficient membership checking.