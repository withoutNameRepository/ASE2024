 Here is a possible implementation of the `palindrome_of_length_at_least_n` function in Python:
```
def palindrome_of_length_at_least_n(string, n):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over the characters in the string
    for i in range(len(string)):
        # Check if the character is a letter
        if string[i].isalpha():
            # Create a copy of the string without the first character
            substr = string[i + 1:]
            # Check if the copy contains any palindromes of length greater than or equal to n
            for j in range(len(substr) - n + 1):
                substr_slice = substr[j:j + n]
                # Check if the slice is a palindrome
                if substr_slice == substr_slice[::-1]:
                    # Add the palindrome to the set
                    palindromes.add(substr_slice)
    return palindromes
```
This function takes two arguments: `string`, which is a string containing the text in which the palindromes should be searched, and `n`, which is an integer representing the minimum length of the palindromes that should be returned. The function returns a set of all palindromes of length greater than or equal to 28 that exist in the given string, with each palindrome only consisting of English letters. If no such palindromes exist in the given string, the function returns an empty set.