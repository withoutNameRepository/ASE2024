 ```
def palindrome_of_length_at_least_n(string, n):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each character in the string
    for i in range(len(string)):
        # Check if the current character is a letter
        if string[i].isalpha():
            # Create a copy of the current character and reverse it
            reversed_char = string[i][::-1]
            # Loop through each character in the reversed string
            for j in range(len(reversed_char)):
                # Check if the current character is a letter
                if reversed_char[j].isalpha():
                    # Create a copy of the current character and reverse it again
                    double_reversed_char = reversed_char[j][::-1]
                    # Check if the length of the double-reversed character is greater than or equal to n
                    if len(double_reversed_char) >= n:
                        # Add the palindrome to the set
                        palindromes.add(double_reversed_char)
    # Return the set of all palindromes of length greater than or equal to n that exist in the given string
    return palindromes
```