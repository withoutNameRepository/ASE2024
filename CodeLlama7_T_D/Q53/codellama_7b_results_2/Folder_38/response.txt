 ```
def palindrome_of_length_at_least_n(string, n):
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Loop through each character in the string
    for i in range(len(string)):
        # Check if the current character is a letter
        if string[i].isalpha():
            # Get the lowercase version of the current character
            lower_char = string[i].lower()
            # Loop through each character in the remaining part of the string
            for j in range(i + 1, len(string)):
                # Check if the next character is a letter
                if string[j].isalpha():
                    # Get the lowercase version of the next character
                    lower_next_char = string[j].lower()
                    # Check if the current character and the next character form a palindrome of length greater than or equal to n
                    if (lower_char + lower_next_char) == (lower_next_char + lower_char):
                        # Add the palindrome to the set of palindromes
                        palindromes.add(lower_char + lower_next_char)
    # Return the set of palindromes
    return palindromes
```