 ```
def palindrome_of_length_at_least_n(string, n):
# Check if the input string is empty or None
if not string:
return set()

# Initialize an empty set to store the palindromes
palindromes = set()

# Iterate over the characters in the input string
for i in range(len(string)):
# Get the character at index i
char = string[i]

# Check if the character is a letter (uppercase or lowercase)
if char.isalpha():
# Convert the character to uppercase
uppercase_char = char.upper()

# Check if the converted character is a palindrome of length greater than or equal to n
if is_palindrome(uppercase_char, n):
# Add the palindrome to the set of palindromes
palindromes.add(uppercase_char)

return palindromes

def is_palindrome(string, length):
"""Check if a string is a palindrome of length greater than or equal to n."""
# Check if the input string is empty or None
if not string:
return False

# Check if the length of the input string is less than the required length
if len(string) < length:
return False

# Check if the first half of the input string is equal to the second half of the input string in reverse order
for i in range(len(string) // 2)):
if string[i] != string[-i - 1]:
return False

return True

```