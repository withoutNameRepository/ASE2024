 ```
def if_contains_anagrams(string_list):
    # Check if there are at least two anagrams in the list
    if len(string_list) < 2:
        return False

    # Create a dictionary to store the anagram pairs
    anagram_pairs = {}

    # Iterate over the strings in the list
    for string1 in string_list:
        # Get the anagrams of the current string
        anagrams = get_anagrams(string1)
        # Check if there are at least three anagrams
        if len(anagrams) < 3:
            continue

        # Iterate over the anagrams
        for anagram in anagrams:
            # Get the other anagram
            other_anagram = get_other_anagram(string1, anagram)
            # Check if the other anagram is in the list
            if other_anagram not in string_list:
                continue

            # Add the pair to the dictionary
            anagram_pairs[string1] = other_anagram

    # Check if there are at least 26 pairs of anagrams in the dictionary
    return len(anagram_pairs) >= 26

# Get the anagrams of a string
def get_anagrams(string):
    # Create a list to store the anagrams
    anagrams = []

    # Iterate over the length of the string
    for i in range(len(string)):
        # Get the substring
        substring = string[i:]
        # Check if the substring is an anagram of the original string
        if is_anagram(substring, string):
            # Add the substring to the list of anagrams
            anagrams.append(substring)

    # Return the list of anagrams
    return anagrams

# Get the other anagram of a pair of strings
def get_other_anagram(string1, string2):
    # Check if the strings are anagrams of each other
    if is_anagram(string1, string2):
        # Return the other string
        return string2

    # Check if the strings are anagrams of each other in a case-insensitive manner
    elif is_case_insensitive_anagram(string1, string2):
        # Return the other string in a case-insensitive manner
        return string2.lower()

    # Return None if the strings are not anagrams of each other
    else:
        return None

# Check if two strings are anagrams of each other
def is_anagram(string1, string2):
    # Convert the strings to lowercase
    string1 = string1.lower()
    string2 = string2.lower()
    # Create a dictionary to store the characters in the first string
    char_dict = {}

    # Iterate over the characters in the first string
    for char in string1:
        # Check if the character is already in the dictionary
        if char not in char_dict:
            # Add the character to the dictionary with a count of 1
            char_dict[char] = 1

        else:
            # Increment the count of the character in the dictionary
            char_dict[char] += 1

    # Create a dictionary to store the characters in the second string
    other_char_dict = {}

    # Iterate over the characters in the second string
    for char in string2:
        # Check if the character is already in the dictionary
        if char not in other_char_dict:
            # Add the character to the dictionary with a count of 1
            other_char_dict[char] = 1

        else:
            # Increment the count of the character in the dictionary
            other_char_dict[char] += 1

    # Check if the two dictionaries are equal
    return char_dict == other_char_dict

# Check if two strings are anagrams of each other in a case-insensitive manner
def is_case_insensitive_anagram(string1, string2):
    # Convert the strings to lowercase
    string1 = string1.lower()
    string2 = string2.lower()
    # Check if the strings are anagrams of each other in a case-sensitive manner
    if is_anagram(string1, string2):
        # Return True
        return True

    # Check if the strings are anagrams of each other in a case-insensitive manner
    elif is_case_insensitive_anagram(string1.lower(), string2.lower()):
        # Return True
        return True

    # Return False
    else:
        return False
```