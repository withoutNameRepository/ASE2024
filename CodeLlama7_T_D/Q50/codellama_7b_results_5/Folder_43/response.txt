 ```
def if_contains_anagrams(word_list):
    # Initialize variables
    anagram_count = 0
    three_or_more_chars = False
    # Iterate through the list of words
    for word in word_list:
        # Check if the word has at least three characters
        if len(word) >= 3:
            three_or_more_chars = True
            # Create a copy of the word with all letters sorted alphabetically
            sorted_word = "".join(sorted(word))
            # Iterate through the rest of the words in the list
            for other_word in word_list:
                # Skip the current word to avoid counting it twice
                if other_word == word:
                    continue

                # Create a copy of the other word with all letters sorted alphabetically
                sorted_other_word = "".join(sorted(other_word)))
                # Check if the two words are anagrams of each other
                if sorted_word == sorted_other_word:
                    # Increment the anagram count
                    anagram_count += 1
                    # If there are at least 61 pairs of anagrams in the list, return True
                    if anagram_count >= 61:
                        return True
            # If there are not at least 61 pairs of anagrams in the list, return False
            if anagram_count < 61:
                return False

    # If there were no words with at least three characters in the list, return False
    if not three_or_more_chars:
        return False

# If there were at least 61 pairs of anagrams in the list, return True
if anagram_count >= 61:
    return True

# Otherwise, return False
return False
```