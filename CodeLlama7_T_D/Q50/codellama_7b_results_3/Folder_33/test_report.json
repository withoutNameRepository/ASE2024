{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests50_33_3.py::test_list_of_strings_of_length_two", "location": ["tests50_33_3.py", 6, "test_list_of_strings_of_length_two"], "keywords": {"test_list_of_strings_of_length_two": 1, "tests50_33_3.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001114260230679065, "start": 1700277330.4758348, "stop": 1700277330.475947, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "35d493c0a3434516970565a3e9ac7a1a", "node": "<WorkerController gw0>"}
{"nodeid": "tests50_33_3.py::test_list_of_many_strings_with_different_lengths", "location": ["tests50_33_3.py", 16, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests50_33_3.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.968900121748447e-05, "start": 1700277330.4758406, "stop": 1700277330.4759407, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "35d493c0a3434516970565a3e9ac7a1a", "node": "<WorkerController gw1>"}
{"nodeid": "tests50_33_3.py::test_list_of_many_strings_with_different_lengths", "location": ["tests50_33_3.py", 16, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests50_33_3.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 9.574700379744172e-05, "start": 1700277330.4761345, "stop": 1700277330.4762309, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "35d493c0a3434516970565a3e9ac7a1a", "node": "<WorkerController gw1>"}
{"nodeid": "tests50_33_3.py::test_list_of_many_strings_with_different_lengths", "location": ["tests50_33_3.py", 16, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests50_33_3.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 5.906401202082634e-05, "start": 1700277330.476404, "stop": 1700277330.4764636, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "35d493c0a3434516970565a3e9ac7a1a", "node": "<WorkerController gw1>"}
{"nodeid": "tests50_33_3.py::test_list_of_anagrams_of_size_n", "location": ["tests50_33_3.py", 21, "test_list_of_anagrams_of_size_n"], "keywords": {"test_list_of_anagrams_of_size_n": 1, "tests50_33_3.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 6.44679821562022e-05, "start": 1700277330.4773748, "stop": 1700277330.4774394, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "35d493c0a3434516970565a3e9ac7a1a", "node": "<WorkerController gw1>"}
{"nodeid": "tests50_33_3.py::test_list_of_anagrams_of_size_n", "location": ["tests50_33_3.py", 21, "test_list_of_anagrams_of_size_n"], "keywords": {"test_list_of_anagrams_of_size_n": 1, "tests50_33_3.py": 1, "Folder_33": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama/Q50/codellama_7b_results_3/Folder_33/tests50_33_3.py", "lineno": 33, "message": "AssertionError: assert False\n +  where False = if_contains_anagrams(['AbCd', 'AbdC', 'ACbd', 'ACdb', 'AdbC', 'AdCb', ...])"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_anagrams_of_size_n():", "        d = {3:'aBc', 4:'AbCd', 5:'aBCdE', 6:'AbCdEf'}", "        for i in range(3,7):", "            l = [''.join(j) for j in itertools.permutations(d[i])]", "            if i == 3:", "                if 140 < 16:", "                    assert if_contains_anagrams(l)", "                else:", "                    assert not if_contains_anagrams(l)", "            elif i == 4:", "                if 140 < 277:", ">                  assert if_contains_anagrams(l)", "E                  AssertionError: assert False", "E                   +  where False = if_contains_anagrams(['AbCd', 'AbdC', 'ACbd', 'ACdb', 'AdbC', 'AdCb', ...])"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q50/codellama_7b_results_3/Folder_33/tests50_33_3.py", "lineno": 33, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_anagrams_of_size_n():", "        d = {3:'aBc', 4:'AbCd', 5:'aBCdE', 6:'AbCdEf'}", "        for i in range(3,7):", "            l = [''.join(j) for j in itertools.permutations(d[i])]", "            if i == 3:", "                if 140 < 16:", "                    assert if_contains_anagrams(l)", "                else:", "                    assert not if_contains_anagrams(l)", "            elif i == 4:", "                if 140 < 277:", ">                  assert if_contains_anagrams(l)", "E                  AssertionError: assert False", "E                   +  where False = if_contains_anagrams(['AbCd', 'AbdC', 'ACbd', 'ACdb', 'AdbC', 'AdCb', ...])"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q50/codellama_7b_results_3/Folder_33/tests50_33_3.py", "lineno": 33, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama/Q50/codellama_7b_results_3/Folder_33/tests50_33_3.py", "lineno": 33, "message": "AssertionError: assert False\n +  where False = if_contains_anagrams(['AbCd', 'AbdC', 'ACbd', 'ACdb', 'AdbC', 'AdCb', ...])"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00014764300431124866, "start": 1700277330.4775176, "stop": 1700277330.4776654, "extras": [], "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "35d493c0a3434516970565a3e9ac7a1a", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
