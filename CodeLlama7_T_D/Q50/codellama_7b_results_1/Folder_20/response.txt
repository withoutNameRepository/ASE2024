 Here is a possible implementation of the `if_contains_anagrams` function:
```python
def if_contains_anagrams(my_list):
    # Check that the input is a list of strings
    if not all(isinstance(s, str) for s in my_list)):
        raise ValueError("Input must be a list of strings")
    # Create a dictionary to keep track of anagram pairs
    pair_dict = {}

    for i in range(len(my_list)):

        for j in range(i + 1, len(my_list))):
            if sorted(my_list[i].lower()) == sorted(my_list[j].lower())):
                # If the strings are anagrams, add them to the dictionary
                pair_dict[(my_list[i], my_list[j])] += 1
    # Return True if there are at least 64 pairs of anagrams in the list
    return len(pair_dict) >= 64
```
This implementation first checks that the input is a list of strings. It then creates a dictionary to keep track of anagram pairs. The dictionary is initialized with key-value pairs representing the two strings in each pair and the number of occurrences of those pairs in the list. The for loop iterates over the elements of the list, and for each element, it iterates over all the other elements that come after it. If two strings are anagrams of each other, they are added to the dictionary with a value of 1 if they have not been seen before. If the strings are already in the dictionary, their values are incremented by 1. Finally, the function returns True if there are at least 64 pairs of anagrams in the list, and False otherwise.