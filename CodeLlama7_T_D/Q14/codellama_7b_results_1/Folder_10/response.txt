 Here is a possible implementation of the `find_second_smallest_num` function:
```
def find_second_smallest_num(numbers):
    # Check if there are at least two elements in the list
    if len(numbers) < 2:
        return None

    # Find the smallest element and its index
    smallest = numbers[0]
    smallest_index = 0

    for i in range(1, len(numbers)):
        if numbers[i] < smallest:
            smallest = numbers[i]
            smallest_index = i

    # Find the second smallest element and its index
    second_smallest = numbers[smallest_index + 1]
    second_smallest_index = smallest_index + 1

    return second_smallest
```
This implementation first checks if there are at least two elements in the list, by comparing the length of the list to `2`. If there are less than two elements, the function returns `None`.
Next, the implementation finds the smallest element and its index in the list. This is done by iterating over the elements of the list starting from the first element, and keeping track of the smallest element seen so far. The index of the smallest element is also kept track of, to be used later.
Once the smallest element and its index are known, the implementation finds the second smallest element by iterating over the elements of the list starting from the element after the smallest element. This is done by keeping track of the current element and its index, and updating the value of `second_smallest` and `second_smallest_index` accordingly.
Finally, the implementation returns the second smallest element as the output of the function.