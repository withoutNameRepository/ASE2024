 Here is a possible implementation of the `if_contains_anagrams` function in Python:
```python
def if_contains_anagrams(words):
    # Initialize a dictionary to store the anagram pairs
    anagram_pairs = {}

    for word in words:
        # Get the lowercase version of the word
        word_lowercase = word.lower()

        # Check if the word is already in the dictionary
        if word_lowercase in anagram_pairs:
            # If it is, increment the count of the pair
            anagram_pairs[word_lowercase] += 1

        else:
            # If it isn't, add a new entry to the dictionary
            anagram_pairs[word_lowercase] = 1

    # Check if there are more than 131 pairs of anagrams in the list
    num_anagram_pairs = len(anagram_pairs)
    if num_anagram_pairs > 131:
        # If there are, return false
        return False

    else:
        # If there aren't, return true
        return True
```
This function takes a list of strings as input and returns `True` if the list contains at most 131 pairs of anagrams, and `False` otherwise. An anagram is a string that is formed by rearranging the letters of another string. The function uses a dictionary to store the anagram pairs, where the keys are the lowercase versions of the anagram words and the values are the counts of each anagram pair. The function then iterates through the list of strings, checks if each word is already in the dictionary, and increments the count of the pair if it is, or adds a new entry to the dictionary if it isn't. Finally, the function checks if there are more than 131 pairs of anagrams in the list and returns `False` if there are, and `True` otherwise.