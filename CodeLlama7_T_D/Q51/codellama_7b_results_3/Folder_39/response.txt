 Here is a possible implementation of the `if_contains_anagrams` function:
```python
def if_contains_anagrams(strings):
    # Create a dictionary to store the anagram counts
    anagram_counts = {}

    # Iterate over the list of strings
    for string in strings:
        # Convert the string to lowercase
        lowercase_string = string.lower()

        # Check if the lowercase string is a palindrome
        if lowercase_string == lowercase_string[::-1]:
            # If it is, add 1 to the anagram count for this letter
            for letter in lowercase_string:
                if letter not in anagram_counts:
                    anagram_counts[letter] = 0

                anagram_counts[letter] += 1

    # Check if there are at most 257 pairs of anagrams in the list
    return sum(count > 1 for count in anagram_counts.values()) <= 257
```
This implementation uses a dictionary to keep track of the number of times each letter appears as an anagram in the given list of strings. It then iterates over the list and checks if each string is a palindrome, and adds 1 to the count for that letter if it is. Finally, it checks if there are at most 257 pairs of anagrams in the list by summing the number of times each count is greater than 1.