 ```
def if_contains_anagrams(word_list):
    # Create a dictionary to store the anagram counts
    anagram_counts = {}

    # Iterate over each word in the list
    for word in word_list:
        # Convert the word to lowercase
        word = word.lower()

        # Check if the word is at least three characters long
        if len(word) >= 3:
            # Get a list of all the anagrams of the word
            anagram_words = get_anagrams(word)

            # Iterate over each anagram in the list
            for anagram in anagram_words:
                # Increment the count for this anagram
                if anagram not in anagram_counts:
                    anagram_counts[anagram] = 1

                else:
                    anagram_counts[anagram] += 1

    # Check if there are at most 147 pairs of anagrams in the list
    return len(anagram_counts) <= 147

def get_anagrams(word):
    # Get a list of all the possible anagrams of the word
    anagram_words = []

    # Iterate over each letter in the word
    for i in range(len(word)):
        # Get the letter at position i in the word
        letter = word[i]

        # Check if there are any other letters in the word that are not this letter
        if len(set([letter] + list(filter(lambda x: x != letter, word)))) > 1:
            # Get a list of all the possible anagrams of the word with this letter as the first letter
            sub_anagram_words = get_anagrams(word[i+1:] + word[:i])

            # Add each sub-anagram to the list of all anagrams
            for sub_anagram in sub_anagram_words:
                anagram_words.append(sub_anagram)

    # Return the list of all possible anagrams of the word
    return anagram_words
```