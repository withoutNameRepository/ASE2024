{"pytest_version": "7.2.2", "$report_type": "SessionStart"}
{"nodeid": "tests59_36_4.py::test_if_result_is_less_than_992", "location": ["tests59_36_4.py", 34, "test_if_result_is_less_than_992"], "keywords": {"test_if_result_is_less_than_992": 1, "tests59_36_4.py": 1, "Folder_36": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001253689988516271, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "46577f9a340e41748c50631cb8e98742", "node": "<WorkerController gw1>"}
{"nodeid": "tests59_36_4.py::test_list_of_all_one_digit_nums", "location": ["tests59_36_4.py", 4, "test_list_of_all_one_digit_nums"], "keywords": {"test_list_of_all_one_digit_nums": 1, "tests59_36_4.py": 1, "Folder_36": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011876699863933027, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "46577f9a340e41748c50631cb8e98742", "node": "<WorkerController gw0>"}
{"nodeid": "tests59_36_4.py::test_list_of_all_one_digit_nums", "location": ["tests59_36_4.py", 4, "test_list_of_all_one_digit_nums"], "keywords": {"test_list_of_all_one_digit_nums": 1, "tests59_36_4.py": 1, "Folder_36": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/home/shahin/Benchmark_Command_T0/Q59/command_results_4/Folder_36/generated_answer.py", "lineno": 2, "message": "ValueError: invalid literal for int() with base 10: '('"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_all_one_digit_nums():", "        for i in range(1,10):", "            input_list = (i,) * (992 + 1)", "            if i <= 2:", ">               assert not all_left_truncatable_prime(input_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q59/command_results_4/Folder_36/tests59_36_4.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_truncatable_prime(n):", ">       return sorted(set(str(n)[0] for n in range(2, int(str(n)[0]) + 1) if all(str(n)[i] for i in range(1, len(str(n)) + 1) if str(n)[i] not in '0')))", "E       ValueError: invalid literal for int() with base 10: '('"], "reprfuncargs": {"args": [["n", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q59/command_results_4/Folder_36/generated_answer.py", "lineno": 2, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_all_one_digit_nums():", "        for i in range(1,10):", "            input_list = (i,) * (992 + 1)", "            if i <= 2:", ">               assert not all_left_truncatable_prime(input_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q59/command_results_4/Folder_36/tests59_36_4.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_left_truncatable_prime(n):", ">       return sorted(set(str(n)[0] for n in range(2, int(str(n)[0]) + 1) if all(str(n)[i] for i in range(1, len(str(n)) + 1) if str(n)[i] not in '0')))", "E       ValueError: invalid literal for int() with base 10: '('"], "reprfuncargs": {"args": [["n", "(1, 1, 1, 1, 1, 1, ...)"]]}, "reprlocals": null, "reprfileloc": {"path": "Q59/command_results_4/Folder_36/generated_answer.py", "lineno": 2, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/home/shahin/Benchmark_Command_T0/Q59/command_results_4/Folder_36/generated_answer.py", "lineno": 2, "message": "ValueError: invalid literal for int() with base 10: '('"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0001561980025144294, "extra": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "46577f9a340e41748c50631cb8e98742", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
