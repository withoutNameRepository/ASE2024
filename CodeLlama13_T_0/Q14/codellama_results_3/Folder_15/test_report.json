{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests14_15_3.py::test_smallest_is_in_range", "location": ["tests14_15_3.py", 4, "test_smallest_is_in_range"], "keywords": {"test_smallest_is_in_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001364150084555149, "start": 1700316832.0112, "stop": 1700316832.0113373, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_smallest_is_in_range", "location": ["tests14_15_3.py", 4, "test_smallest_is_in_range"], "keywords": {"test_smallest_is_in_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00010331702651455998, "start": 1700316832.0115306, "stop": 1700316832.0116343, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_smallest_is_in_range", "location": ["tests14_15_3.py", 4, "test_smallest_is_in_range"], "keywords": {"test_smallest_is_in_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 6.0732971178367734e-05, "start": 1700316832.0118184, "stop": 1700316832.0118797, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_unsorted_large_range", "location": ["tests14_15_3.py", 21, "test_unsorted_large_range"], "keywords": {"test_unsorted_large_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00010682301945053041, "start": 1700316832.0111256, "stop": 1700316832.0112329, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw1>"}
{"nodeid": "tests14_15_3.py::test_large_range", "location": ["tests14_15_3.py", 12, "test_large_range"], "keywords": {"test_large_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 7.975602056831121e-05, "start": 1700316832.0131433, "stop": 1700316832.0132236, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_large_range", "location": ["tests14_15_3.py", 12, "test_large_range"], "keywords": {"test_large_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00018219798221252859, "start": 1700316832.013315, "stop": 1700316832.0134976, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_large_range", "location": ["tests14_15_3.py", 12, "test_large_range"], "keywords": {"test_large_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 5.587199120782316e-05, "start": 1700316832.0136595, "stop": 1700316832.0137157, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_reversed_range", "location": ["tests14_15_3.py", 42, "test_reversed_range"], "keywords": {"test_reversed_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 7.440400077030063e-05, "start": 1700316832.014516, "stop": 1700316832.0145912, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_reversed_range", "location": ["tests14_15_3.py", 42, "test_reversed_range"], "keywords": {"test_reversed_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 7.493598968721926e-05, "start": 1700316832.01468, "stop": 1700316832.014755, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_reversed_range", "location": ["tests14_15_3.py", 42, "test_reversed_range"], "keywords": {"test_reversed_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 5.197699647396803e-05, "start": 1700316832.0149057, "stop": 1700316832.014958, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw0", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw0>"}
{"nodeid": "tests14_15_3.py::test_unsorted_large_range", "location": ["tests14_15_3.py", 21, "test_unsorted_large_range"], "keywords": {"test_unsorted_large_range": 1, "tests14_15_3.py": 1, "Folder_15": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_13B_T0/Q14/codellama_results_3/Folder_15/tests14_15_3.py", "lineno": 30, "message": "assert -999 == 380\n +  where -999 = find_second_smallest_num([937, 380, 596, -428, -615, -697, ...])"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_unsorted_large_range():", "        initial_list = [i for i in range(-1000, 3 + 1000)]", "        random.shuffle(initial_list)", "        if 0 == 3:", "                assert find_second_smallest_num(initial_list) == None", "        else:", "            sliced_list = initial_list[0:3 + 1]", "            sliced_list.sort()", ">           assert find_second_smallest_num(initial_list) == sliced_list[1]", "E           assert -999 == 380", "E            +  where -999 = find_second_smallest_num([937, 380, 596, -428, -615, -697, ...])"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q14/codellama_results_3/Folder_15/tests14_15_3.py", "lineno": 30, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_unsorted_large_range():", "        initial_list = [i for i in range(-1000, 3 + 1000)]", "        random.shuffle(initial_list)", "        if 0 == 3:", "                assert find_second_smallest_num(initial_list) == None", "        else:", "            sliced_list = initial_list[0:3 + 1]", "            sliced_list.sort()", ">           assert find_second_smallest_num(initial_list) == sliced_list[1]", "E           assert -999 == 380", "E            +  where -999 = find_second_smallest_num([937, 380, 596, -428, -615, -697, ...])"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q14/codellama_results_3/Folder_15/tests14_15_3.py", "lineno": 30, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_13B_T0/Q14/codellama_results_3/Folder_15/tests14_15_3.py", "lineno": 30, "message": "assert -999 == 380\n +  where -999 = find_second_smallest_num([937, 380, 596, -428, -615, -697, ...])"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0006909950170665979, "start": 1700316832.0114043, "stop": 1700316832.0120957, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "be6374582ac548e5b8bf95bde3295e0d", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
