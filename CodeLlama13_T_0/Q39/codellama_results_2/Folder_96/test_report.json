{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_96_2.py::test_if_result_is_sorted", "location": ["tests39_96_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_96_2.py": 1, "Folder_96": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001280579890590161, "start": 1700329292.964858, "stop": 1700329292.9649866, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "3cc5b026f79f4d8c97e055dd178902be", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_96_2.py::test_strings_of_size_equal_to_20", "location": ["tests39_96_2.py", 5, "test_strings_of_size_equal_to_20"], "keywords": {"test_strings_of_size_equal_to_20": 1, "tests39_96_2.py": 1, "Folder_96": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001426770177204162, "start": 1700329292.965078, "stop": 1700329292.9652216, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "3cc5b026f79f4d8c97e055dd178902be", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_96_2.py::test_if_result_is_sorted", "location": ["tests39_96_2.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_96_2.py": 1, "Folder_96": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_13B_T0/Q39/codellama_results_2/Folder_96/tests39_96_2.py", "lineno": 28, "message": "AssertionError: assert '|{wusqlhcaYRQPGCA;85' == ['|', '{', 'w', 'u', 's', 'q', ...]\n +  where ['|', '{', 'w', 'u', 's', 'q', ...] = sorted('|{wusqlhcaYRQPGCA;85', reverse=True)"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=20 + 1))", "        result = return_n_greatest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert '|{wusqlhcaYRQPGCA;85' == ['|', '{', 'w', 'u', 's', 'q', ...]", "E            +  where ['|', '{', 'w', 'u', 's', 'q', ...] = sorted('|{wusqlhcaYRQPGCA;85', reverse=True)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_results_2/Folder_96/tests39_96_2.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=20 + 1))", "        result = return_n_greatest_chars(s)", "        if 'descending' == 'ascending':", "            assert result == sorted(result)", "        else:", ">           assert result == sorted(result, reverse=True)", "E           AssertionError: assert '|{wusqlhcaYRQPGCA;85' == ['|', '{', 'w', 'u', 's', 'q', ...]", "E            +  where ['|', '{', 'w', 'u', 's', 'q', ...] = sorted('|{wusqlhcaYRQPGCA;85', reverse=True)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_results_2/Folder_96/tests39_96_2.py", "lineno": 28, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_13B_T0/Q39/codellama_results_2/Folder_96/tests39_96_2.py", "lineno": 28, "message": "AssertionError: assert '|{wusqlhcaYRQPGCA;85' == ['|', '{', 'w', 'u', 's', 'q', ...]\n +  where ['|', '{', 'w', 'u', 's', 'q', ...] = sorted('|{wusqlhcaYRQPGCA;85', reverse=True)"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002072150236926973, "start": 1700329292.9651582, "stop": 1700329292.9653656, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "3cc5b026f79f4d8c97e055dd178902be", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
