{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_28_5.py::test_if_result_is_sorted", "location": ["tests39_28_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_28_5.py": 1, "Folder_28": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011288499808870256, "start": 1700295320.221748, "stop": 1700295320.2218616, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "103c48cdbb4848e295e0beaf2162e163", "node": "<WorkerController gw1>"}
{"nodeid": "tests39_28_5.py::test_strings_of_size_equal_to_3", "location": ["tests39_28_5.py", 5, "test_strings_of_size_equal_to_3"], "keywords": {"test_strings_of_size_equal_to_3": 1, "tests39_28_5.py": 1, "Folder_28": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001366600045002997, "start": 1700295320.221766, "stop": 1700295320.2219033, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "103c48cdbb4848e295e0beaf2162e163", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_28_5.py::test_if_result_is_sorted", "location": ["tests39_28_5.py", 20, "test_if_result_is_sorted"], "keywords": {"test_if_result_is_sorted": 1, "tests39_28_5.py": 1, "Folder_28": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_T0/Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError: assert ['z', 'v', 'W'] == ['W', 'v', 'z']\n  At index 0 diff: 'z' != 'W'\n  Full diff:\n  - ['W', 'v', 'z']\n  ?   ^         ^\n  + ['z', 'v', 'W']\n  ?   ^         ^"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=3 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['z', 'v', 'W'] == ['W', 'v', 'z']", "E             At index 0 diff: 'z' != 'W'", "E             Full diff:", "E             - ['W', 'v', 'z']", "E             ?   ^         ^", "E             + ['z', 'v', 'W']", "E             ?   ^         ^"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_if_result_is_sorted():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=3 + 1))", "        result = return_n_greatest_chars(s)", "        if 'ascending' == 'ascending':", ">           assert result == sorted(result)", "E           AssertionError: assert ['z', 'v', 'W'] == ['W', 'v', 'z']", "E             At index 0 diff: 'z' != 'W'", "E             Full diff:", "E             - ['W', 'v', 'z']", "E             ?   ^         ^", "E             + ['z', 'v', 'W']", "E             ?   ^         ^"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_T0/Q39/codellama_7b_results_5/Folder_28/tests39_28_5.py", "lineno": 26, "message": "AssertionError: assert ['z', 'v', 'W'] == ['W', 'v', 'z']\n  At index 0 diff: 'z' != 'W'\n  Full diff:\n  - ['W', 'v', 'z']\n  ?   ^         ^\n  + ['z', 'v', 'W']\n  ?   ^         ^"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.000324182998156175, "start": 1700295320.222052, "stop": 1700295320.2223766, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "103c48cdbb4848e295e0beaf2162e163", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
