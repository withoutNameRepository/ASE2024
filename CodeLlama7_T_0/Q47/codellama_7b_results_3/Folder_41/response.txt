 ```
def palindromes_of_specific_lengths(string):
    # Define the substring range for consideration
    substring = string[1:7]
    # Initialize an empty set to store the palindromes
    palindromes = set()
    # Iterate over each character in the substring
    for i in range(len(substring)):
        # Get the current character and its index
        char = substring[i]
        index = i + 1
        # Check if the current character is a palindrome
        if char == substring[::-1][index - 1]:
            # If it is, add it to the set of palindromes
            palindromes.add(char)
    # Iterate over each length range for consideration
    for length in range(3, 5):
        # Initialize an empty list to store the palindromes of the current length
        palindromes_of_length = []
        # Iterate over each palindrome in the set
        for palindrome in palindromes:
            # Check if the palindrome has the current length
            if len(palindrome) == length:
                # If it does, add it to the list of palindromes of the current length
                palindromes_of_length.append(palindrome)
        # Return the list of palindromes of the current length
        return palindromes_of_length
```