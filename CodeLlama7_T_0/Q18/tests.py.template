from Q18.$6_results_$7.Folder_$4.generated_answer import $5


def test_list_of_zeros():
    list_of_zeros = [0 for i in range(0, 3 * ($3 + 1))]
    assert $5(list_of_zeros) == 0


def test_list_of_ones():
    list_of_ones = [1 for i in range(0, 3 * ($3 + 1))]
    if $0 == 1 or $0 == -1 or $1 == 1 or $1 == -1:
        indices_gap_inclusive = $3 - $2 + 1
        assert $5(list_of_ones) == indices_gap_inclusive
    else:
        assert $5(list_of_ones) == 0


def test_negate_of_lists():
    initial_list = [i for i in range(0, $3 + 1)]
    neg_initial_list = [-i for i in range(0, $3 + 1)]
    assert $5(initial_list) == -($5(neg_initial_list))


def test_multiplication_of_divisors():
    mul_of_divs = $0 * $1
    mul_list = [mul_of_divs for _ in range(0, $3 + 10)]
    expected_sum = sum(mul_list[$2:$3 + 1])
    assert $5(mul_list) == expected_sum


def test_negate_of_divisors_large_list():
    neg_div1 = -$0
    neg_div2 = -$1
    mul_of_negs = neg_div1 * neg_div2
    mul_list = [mul_of_negs for _ in range(0, ($3 + 1) * 100)]
    expected_sum = sum(mul_list[$2:$3 + 1])
    assert $5(mul_list) == expected_sum


def test_non_divisibles():
    if $0 != -1 and $0 != 1 and $1 != -1 and $1 != 1: 
        initial_list = [x for x in range(-20000, 20000) if x % $0 != 0 and x % $1 != 0]
        if len(initial_list) > $3:
            assert $5(initial_list) == 0
