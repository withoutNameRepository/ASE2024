 ```
def all_right_truncatable_prime(tuple):
    # Initialize an empty list to store the prime numbers
    prime_numbers = []

    # Iterate over the tuple of positive integers
    for i in range(len(tuple)):
        # Get the current number from the tuple
        current_number = tuple[i]

        # Check if the current number is a prime number
        if is_prime(current_number):
            # If the current number is a prime number, add it to the list of prime numbers
            prime_numbers.append(current_number)

    # Iterate over the list of prime numbers and check if they are right-truncatable prime numbers
    for i in range(len(prime_numbers)):
        # Get the current prime number from the list
        current_prime = prime_numbers[i]

        # Check if the current prime number is a right-truncatable prime number
        if is_right_truncatable_prime(current_prime):
            # If the current prime number is a right-truncatable prime number, add it to the list of right-truncatable prime numbers
            right_truncatable_prime_numbers.append(current_prime)

    # Return the sorted list of all right-truncatable prime numbers less than x
    return sorted(right_truncatable_prime_numbers)

# Define a function to check if a number is a prime number
def is_prime(n):
    # Check if n is greater than 1
    if n > 1:
        # Iterate from 2 to n-1
        for i in range(2, n):
            # If the remainder of n/i is equal to 0, return False
            if n % i == 0:
                return False

        # If the loop completes without returning False, return True
        return True

    # If n is less than or equal to 1, return False
    else:
        return False

# Define a function to check if a number is a right-truncatable prime number
def is_right_truncatable_prime(n):
    # Check if n is a prime number
    if is_prime(n):
        # Iterate from 2 to n-1
        for i in range(2, n):
            # If the remainder of n/i is equal to 0, return False
            if n % i == 0:
                return False

        # If the loop completes without returning False, return True
        return True

    # If n is not a prime number, return False
    else:
        return False
```