{"pytest_version": "7.4.3", "$report_type": "SessionStart"}
{"nodeid": "tests58_47_4.py::test_matrix_of_one_integer", "location": ["tests58_47_4.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_47_4.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00025415897835046053, "start": 1700303596.1263375, "stop": 1700303596.1265924, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "5256ba27d6394633a7055a64eeaa034b", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_47_4.py::test_horizontal_matrix", "location": ["tests58_47_4.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_47_4.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012025597970932722, "start": 1700303596.1273503, "stop": 1700303596.1274712, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "5256ba27d6394633a7055a64eeaa034b", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_47_4.py::test_horizontal_matrix", "location": ["tests58_47_4.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_47_4.py": 1, "Folder_47": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/CodeLlama_T0/Q58/codellama_7b_results_4/Folder_47/generated_answer.py", "lineno": 19, "message": "TypeError: unhashable type: 'matrix'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(90)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 90 < 30:", "            num = 4", "        elif 30 <= 90 < 70:", "            num = 3", "        elif 70 <= 90 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", ">           output = submatrix_with_n_numbers(m)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/codellama_7b_results_4/Folder_47/tests58_47_4.py", "lineno": 56, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def submatrix_with_n_numbers(matrix):", "        # Initialize the count variable", "        count = 0", "    ", "        # Iterate over each row of the matrix", "        for i in range(matrix.shape[0]):", "            # Get the current row of the matrix", "            row = matrix[i]", "    ", "            # Iterate over each column of the matrix", "            for j in range(matrix.shape[1]):", "                # Get the current column of the matrix", "                col = matrix[:, j]", "    ", "                # Check if the submatrix contains 90 integers", ">               if len(set(row)) == 90 and len(set(col)) == 90:", "E               TypeError: unhashable type: 'matrix'"], "reprfuncargs": {"args": [["matrix", "matrix([[ -4,  -9, -10,  10,  -7,   6,   5,  -9,   3,  10,   0,  -9,   8,\n           4,  -9,  -6,   8,   1,  -4,  -5, ... 5,  -5,   2,  10,  -2,   6,  -6,  -4,   0,  -2,   4, -10,\n          10,   9,  -7,   2,   9,  -4,  -5,   6,  -4, -10]])"]]}, "reprlocals": null, "reprfileloc": {"path": "Q58/codellama_7b_results_4/Folder_47/generated_answer.py", "lineno": 19, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(90)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 90 < 30:", "            num = 4", "        elif 30 <= 90 < 70:", "            num = 3", "        elif 70 <= 90 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", ">           output = submatrix_with_n_numbers(m)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/codellama_7b_results_4/Folder_47/tests58_47_4.py", "lineno": 56, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def submatrix_with_n_numbers(matrix):", "        # Initialize the count variable", "        count = 0", "    ", "        # Iterate over each row of the matrix", "        for i in range(matrix.shape[0]):", "            # Get the current row of the matrix", "            row = matrix[i]", "    ", "            # Iterate over each column of the matrix", "            for j in range(matrix.shape[1]):", "                # Get the current column of the matrix", "                col = matrix[:, j]", "    ", "                # Check if the submatrix contains 90 integers", ">               if len(set(row)) == 90 and len(set(col)) == 90:", "E               TypeError: unhashable type: 'matrix'"], "reprfuncargs": {"args": [["matrix", "matrix([[ -4,  -9, -10,  10,  -7,   6,   5,  -9,   3,  10,   0,  -9,   8,\n           4,  -9,  -6,   8,   1,  -4,  -5, ... 5,  -5,   2,  10,  -2,   6,  -6,  -4,   0,  -2,   4, -10,\n          10,   9,  -7,   2,   9,  -4,  -5,   6,  -4, -10]])"]]}, "reprlocals": null, "reprfileloc": {"path": "Q58/codellama_7b_results_4/Folder_47/generated_answer.py", "lineno": 19, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/CodeLlama_T0/Q58/codellama_7b_results_4/Folder_47/generated_answer.py", "lineno": 19, "message": "TypeError: unhashable type: 'matrix'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002822139940690249, "start": 1700303596.127785, "stop": 1700303596.1280675, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "5256ba27d6394633a7055a64eeaa034b", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
