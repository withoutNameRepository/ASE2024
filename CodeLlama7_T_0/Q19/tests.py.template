from Q19.$5_results_$6.Folder_$3.generated_answer import $4


def test_list_of_zeros():
    list_of_zeros = [0 for i in range(0, 3 * ($2 + 1))]
    assert $4(list_of_zeros) == []


def test_negate_of_lists():
    initial_list = [i for i in range(0, $2 + 1)]
    neg_initial_list = [-i for i in range(0, $2 + 1)]
    expected_list = [-i for i in $4(neg_initial_list)]
    assert $4(initial_list) == expected_list


def test_negate_of_divisors():
    neg_div = -$0
    neg_div_list = [neg_div for _ in range(0, $2 + 1)]
    assert $4(neg_div_list) == []


def test_compare_neg_divisor():
    initial_list = [i for i in range(0, $2 + 1)]
    neg_div = -$0
    neg_div_result_list = [i for i in initial_list[$1 + 1: $2] if i % neg_div != 0]
    assert $4(initial_list) == neg_div_result_list


def test_lengths():
    initial_list = [x for x in range(0, $2 + 1)]
    expected_list = $4(initial_list)
    assert len(expected_list) <= len(initial_list)


def test_sums():
    initial_list = [x for x in range(0, $2 + 1)]
    expected_list = $4(initial_list)
    assert sum(expected_list) <= sum(initial_list)


def test_coefficient_of_divisor():
    for n in range(-10,11):
        initial_list = [$0 * n for _ in range(0, $2 + 1)]
        assert $4(initial_list) == []
        

def test_divisibles():
    initial_list = [x for x in range(-20000, 20000) if x % $0 == 0]
    if len(initial_list) > $2:
        assert $4(initial_list) == []